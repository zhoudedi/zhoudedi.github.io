<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Nexus9刷机全纪录</title>
      <link href="2021/06/29/Nexus9%E5%88%B7%E6%9C%BA%E5%85%A8%E7%BA%AA%E5%BD%95/"/>
      <url>2021/06/29/Nexus9%E5%88%B7%E6%9C%BA%E5%85%A8%E7%BA%AA%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>最近从某海鲜市场花了200软妹币购买了Nexus9，2+32GB的，具体参数可以看<a href="https://product.pconline.com.cn/tabletpc/google/571146_detail.html">这里</a>，NVIDIA Tegra K1的CPU</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210629143729.png"></p><p>原系统是谷歌原生7.X，把玩了半天，发现卡的不能，所以还是刷个鸡吧！顺便记录一下</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1-解锁BL锁"><a href="#1-解锁BL锁" class="headerlink" title="1.解锁BL锁"></a>1.解锁BL锁</h2><p><strong>下载安装Nexus Root Toolkit</strong></p><p>官方：</p><p><a href="https://androidfilehost.com/?fid=24728673521238129">NRT_v2.1.9.sfx.exe | by WugFresh for Generic Device/Other (androidfilehost.com)</a></p><p>我的网盘：</p><p><a href="https://huangenet.lanzoui.com/iDtZZqtet5i">NRT_v2.1.9.sfx.exe - 蓝奏云 (lanzoui.com)</a></p><p>一路next安装好后，按照图示数字开启刷机之旅……</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210629144612.png"></p><p>开发者选项，打开 OEM 锁，打开 USB 调试<br>点 unlock 解锁（好像也可以用命令 [adb fastboot flashing unlock / fastboot oem unlock]</p><p>装 adb 环境（好像装 nexus root toolkit 时会自动把 adb 也装上）</p><p>解锁好后 进入bootloader 会显示 unlocked</p><h2 id="2-安装第三方REC-twrp"><a href="#2-安装第三方REC-twrp" class="headerlink" title="2.安装第三方REC-twrp"></a>2.安装第三方REC-twrp</h2><p><strong>下载（下载最新版本即可）：</strong></p><p><a href="https://twrp.me/">TeamWin - TWRP</a></p><p><strong>拷贝twrp到指定目录</strong><br>以twrp-3.5.2_9-0-flounder.img为例，将twrp-3.5.2_9-0-flounder.img拷贝到Nexus Root Toolkit的默认安装目录下</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">C:<span class="hljs-string">\Program</span> Files (x86)<span class="hljs-string">\WugFresh</span> Development<span class="hljs-string">\Nexus</span> Root Toolkit<span class="hljs-string">\data</span><br></code></pre></td></tr></table></figure><p><strong>进入bootloader模式</strong><br>设备关机，*<strong>*同时按住电源键和音量键上（直到进入界面后方可松开）**</strong>，选择进入bootloader模式</p><p>当然你也可以用命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">adb reboot bootloade</span><br></code></pre></td></tr></table></figure><p><strong>刷入twrp</strong><br>在dos模式下进入C:\Program Files (x86)\WugFresh Development\Nexus Root Toolkit\data目录，输入如下命令：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">fastboot</span> flash recovery twrp-<span class="hljs-number">3</span>.<span class="hljs-number">5</span>.<span class="hljs-number">2</span>_<span class="hljs-number">9</span>-<span class="hljs-number">0</span>-flounder.img<br></code></pre></td></tr></table></figure><p>之后</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">fastboot boot twrp-<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>-<span class="hljs-keyword">x</span>.img<br></code></pre></td></tr></table></figure><p>进入REC模式</p><p><strong>之后的操作都在 twrp 里进行</strong></p><h2 id="3-刷机"><a href="#3-刷机" class="headerlink" title="3.刷机"></a>3.刷机</h2><p>⑴<strong>备份</strong>（也可以忽略）</p><p>* 点 backup<br>* 命令 [adb pull xxx xxx] 保存到电脑里</p><p>（2）<strong>清除数据</strong>（三清）<br>点 wipe，全选<br>点 format data </p><p>还有一个滑动的那个也执行了</p><p>（3）<strong>刷机</strong></p><p>命令 [adb push xxx /sdcard/] 把需要装的包传进手机</p><p>①点 install，刷 [驱动] <a href="https://androidfilehost.com/?fid=817906626617936176">vendor-flounder-n9f27m.img</a>，在文件列表的右下角，点 install image 才会显示 img 后缀的文件</p><p>②点 install，刷 [系统] <a href="https://androidfilehost.com/?w=files&flid=149860&sort_by=date&sort_dir=DESC">Resurrection Remix Oreo for Nexus 9</a></p><p> ③点 install，刷 [内核]  <a href="https://elementalx.org/devices/nexus-9/">ElementalX-N9</a> （8.1.0的那个）</p><p>④点 install，刷 [gapps] <a href="https://opengapps.org/?arch=arm64&api=8.1&variant=nano">The Open GApps Project</a></p><p>⑤点 install，刷 [root] <a href="https://huangenet.lanzoui.com/ilj6Hqtgfij">root包</a></p><p><a href="https://huangenet.lanzoui.com/iB0lqqtisne">SuperSU-v2.82-nexus9</a></p><p>⑥刷机完成</p><h2 id="4-跳过激活"><a href="#4-跳过激活" class="headerlink" title="4.跳过激活"></a>4.<strong>跳过激活</strong></h2><p>原因你懂的，安装android原生系统后，无法在wifi环境下激活，因此强烈推荐手工修改系统文件跳过激活步骤</p><p>A、设备关机，同时按住电源键和音量键（直到进入界面后方可松开），进入bootloader状态</p><p>B、选择音量增减键进入recovery模式</p><p>C、选择界面中mount，勾选system分区并挂载</p><p>D、adb修改系统文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd C:\Program Files (x86)\WugFresh Development\Nexus Root Toolkit\data<br>adb shell<br>echo <span class="hljs-string">&quot;ro.setupwizard.mode=DISABLED&quot;</span> &gt;&gt; <span class="hljs-regexp">/system/</span>build.prop<br><span class="hljs-keyword">exit</span><br>adb reboot<br></code></pre></td></tr></table></figure><p>小伙伴终于可以愉快玩耍了</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210629151718.png"></p><p>平板应用推荐</p><p><a href="https://www.coolapk.com/album/28085545">https://www.coolapk.com/album/28085545</a></p><p>参考文档：</p><p><a href="https://blog.csdn.net/chj113/article/details/96460552">nexus9刷机全记录_chj113的专栏-CSDN博客_nexus9刷机</a></p><p><a href="https://tieba.baidu.com/p/5987428550">刷机 全过程 记录 LineageOS 14.1 Nexus 9 (Wi-Fi)【nexus9吧】_百度贴吧 (baidu.com)</a></p><p>[<a href="https://forum.xda-developers.com/t/rom-official-lineageos-14-1-for-nexus-9-flounder.3617907/">ROM][OFFICIAL] LineageOS 14.1 for Nexus 9 (flounder) | XDA Forums (xda-developers.com)</a></p><p>[<a href="https://www.cyanogenmods.org/forums/topic/resurrection-remix-oreo-for-nexus-9-android-8-1/">RR OREO] Nexus 9 Resurrection Remix OREO 8. 1 Download (cyanogenmods.org)</a></p><p>[<a href="https://forum.xda-developers.com/t/kernel-january-29-elementalx-n9-5-17-nougat-7-03-oreo.2931657/">KERNEL] [January 29] ElementalX-N9 5.17 (Nougat) 7.03 (Oreo) | XDA Forums (xda-developers.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nexus9 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派自动化推流摄像头到Bilibili直播</title>
      <link href="2021/06/12/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A8%E6%B5%81%E6%91%84%E5%83%8F%E5%A4%B4%E5%88%B0Bilibili%E7%9B%B4%E6%92%AD/"/>
      <url>2021/06/12/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A8%E6%B5%81%E6%91%84%E5%83%8F%E5%A4%B4%E5%88%B0Bilibili%E7%9B%B4%E6%92%AD/</url>
      
        <content type="html"><![CDATA[<p>树莓派/玩客云闲置怎么办？用来直播推流呀</p><p><a href="https://github.com/withsalt/BilibiliLiveTools">withsalt/BilibiliLiveTools: Bilibili直播工具</a></p><p>直播间演示：</p><p><a href="https://live.bilibili.com/21577989">https://live.bilibili.com/21577989</a></p><p><strong>准备工作</strong></p><p>（1）前提条件</p><p>a.首先要有一个树莓派，并连接了摄像头（USB摄像头）。并能够访问网络。<br>b.在Bilibili中通过实名认证，并开通了直播间。<a href="https://link.bilibili.com/p/center/index">点击连接</a>开通直播间（很简单的，实名认证通过后直接就可以开通了）<br>c.FFmpeg。推流默认使用FFmpeg，树莓派官方系统默认安装了的，我就不再赘述，其它系统请自行安装。</p><p>（2）获取程序</p><p>下载编译好的程序：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://github.com/withsalt/BilibiliLiveTools/releases/download/2.0.2/BilibiliLiver_Linux_ARM.zip<br></code></pre></td></tr></table></figure><p>（2）解压并授权</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">unzip BilibiliLiver_Linux_ARM.zip &amp;&amp; chmod -R 755 BilibiliLiver_Linux_ARM &amp;&amp; chmod +x BilibiliLiver_Linux_ARM/BilibiliLiver<br></code></pre></td></tr></table></figure><p>（3）编辑配置文件</p><p>编辑用户配置文件User.json</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> BilibiliLiver_Linux_ARM/<br>nano appsettings.json<br></code></pre></td></tr></table></figure><p>编辑直播配置文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;AppSetting&quot;</span>: &#123;<br>    <span class="hljs-comment">//加密密钥，一般不需要修改，要修改的话，至少需要16位</span><br>    <span class="hljs-attr">&quot;Key&quot;</span>: <span class="hljs-string">&quot;ac131de1-ed20-499f-8fdf-dede054dbaad&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;LiveSetting&quot;</span>: &#123;<br>    <span class="hljs-comment">//直播间分类</span><br>    <span class="hljs-attr">&quot;LiveCategory&quot;</span>: <span class="hljs-string">&quot;369&quot;</span>,<br>    <span class="hljs-comment">//直播间名称</span><br>    <span class="hljs-attr">&quot;LiveRoomName&quot;</span>: <span class="hljs-string">&quot;【24H】小金鱼啦~&quot;</span>,<br>    <span class="hljs-comment">//FFmpeg推流命令，请自行填写对应操作系统和设备的推流命令，默认为树莓派，且摄像头设备为‘/dev/video0’</span><br>    <span class="hljs-comment">//填写到此处时，请注意将命令中‘&quot;’用‘\’进行转义，将推流的rtmp连接替换为[[URL]]，[[URL]]不需要双引号。</span><br>    <span class="hljs-attr">&quot;FFmpegCmd&quot;</span>: <span class="hljs-string">&quot;ffmpeg -f dshow -video_size 1280x720 -i video=\&quot;5M USB CAM\&quot; -vcodec libx264 -pix_fmt yuv420p -r 30 -s 1280*720 -g 60 -b:v 5000k -an -preset:v ultrafast -tune:v zerolatency -f flv [[URL]]&quot;</span>,<br>    <span class="hljs-comment">//ffmpeg异常退出后，是否自动重新启动</span><br>    <span class="hljs-attr">&quot;AutoRestart&quot;</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;UserSetting&quot;</span>: &#123;<br>    <span class="hljs-comment">//B站账号</span><br>    <span class="hljs-attr">&quot;Account&quot;</span>: <span class="hljs-string">&quot;*********&quot;</span>,<br>    <span class="hljs-comment">//B站密码，放心填写，没有后门</span><br>    <span class="hljs-attr">&quot;Password&quot;</span>: <span class="hljs-string">&quot;*********&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于推流方式不同以及FFmpeg配置的多边性，这里采用直接填写推流命令的方式。建议填写之前先测试推流命令能否正确执行。默认的推流命令设配树莓派官方系统，其它系统可能不适用，需要自己修改。</p><p>推流命令（FFmpegCmd）中的“[[URL]]”，是一个配置符号，将在程序中被替换为获取到的Bilibili推流地址，所以一定要在最终命令中，把测试文件或者地址修改为 “[[URL]]”（URL大写） ，否则程序将抛出错误。推流命令中注意半角双引号需要用符号‘\’来进行转义。</p><p>FFmpeg的使用请查看最后一节：FFmpeg的使用</p><p><strong>开始直播</strong></p><p>执行推流程序。推流程序将会自动开启B站直播，并获取推流地址，然后执行预设的FFmpeg推流命令。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo ./BilibiliLiver<br></code></pre></td></tr></table></figure><p>输出下面的就表示开始直播啦~</p><p><img src="https://www.quarkbook.com/wp-content/uploads/2019/09/image-12-1024x424.png" alt="树莓派自动化推流摄像头到Bilibili直播">开始直播输出</p><p>如果希望在后台持续直播，可以将上面一条命令替换为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo nohup ./BilibiliLiver /dev/null 2&gt;live.log<br></code></pre></td></tr></table></figure><p>程序将会在后台运行。</p><p>或者编写一个系统服务，设置开机启动，控制开始关闭推流什么的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo nano /etc/systemd/system/bilibiliLiver.service<br></code></pre></td></tr></table></figure><p>将下方代码中的执行路径替换为BilibiliLiver程序所在的<strong>绝对路径</strong>。比如“/home/pi/BilibiliLiver_Linux_ARM/BilibiliLiver”，注意大小写。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=BilibiliLiver<br><span class="hljs-attr">After</span>=network.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">WorkingDirectory</span>=BilibiliLiver所在路径，比如/home/pi/BilibiliLiver_Linux_ARM<br><span class="hljs-attr">ExecStart</span>=BilibiliLiver所在路径包含程序的路径，比如/home/pi/BilibiliLiver_Linux_ARM/BilibiliLiver<br><span class="hljs-attr">Restart</span>=always<br><span class="hljs-attr">SyslogIdentifier</span>=BilibiliLiver Tool<br><span class="hljs-attr">User</span>=root<br><span class="hljs-attr">Environment</span>=ASPNETCORE_ENVIRONMENT=Production<br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><p>执行start，开启推流服务。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo systemctl start bilibiliLiver<br></code></pre></td></tr></table></figure><p>检查命令是否配置正确已经程序是否正常工作。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo systemctl status bilibiliLiver<br></code></pre></td></tr></table></figure><p>其它服务维护命令。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo systemctl stop bilibiliLiver    <span class="hljs-comment">#停止推流服务</span><br>sudo systemctl <span class="hljs-built_in">enable</span> bilibiliLiver  <span class="hljs-comment">#设置开机启动</span><br>sudo systemctl <span class="hljs-built_in">disable</span> bilibiliLiver <span class="hljs-comment">#禁用开机启动</span><br></code></pre></td></tr></table></figure><p><strong>FFmpeg的使用</strong></p><p>无论是Windows还是Linux，运行环境无论是PC还是树莓派，如果使用FFmpeg推流，都要在上面安装好FFmpeg，并在命令行中执行ffmpeg -version后可以准确的获取ffmpeg的相关信息。</p><p><img src="https://www.quarkbook.com/wp-content/uploads/2019/10/image-5-1024x360.png" alt="树莓派自动化推流摄像头到Bilibili直播">ffmpeg命令行输出</p><p>至于如何在各种环境中安装ffmpeg我就不在此赘述，网上有很多详细的教程。树莓派官方系统是内置了ffmpeg的，不用自己再编译安装。</p><p>以下是树莓派Raspbian系统中推流命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#推流USB摄像头（包含音频，音频源为音频文件）</span><br>ffmpeg -thread_queue_size 512 -f video4linux2 -s 1280*720 -input_format mjpeg -i <span class="hljs-string">&quot;视频源&quot;</span> -stream_loop -1 -i <span class="hljs-string">&quot;音频源&quot;</span> -vcodec h264_omx -pix_fmt yuv420p -r 30 -s 1280*720 -g 60 -b:v 10M -bufsize 10M -acodec aac -ac 2 -ar 44100 -ab 128k -f flv <span class="hljs-string">&quot;推流地址&quot;</span><br><br><span class="hljs-comment">#推流USB摄像头（包含音频，音频源麦克风）</span><br>ffmpeg -thread_queue_size 512 -f video4linux2 -s 1280*720 -input_format mjpeg -i <span class="hljs-string">&quot;视频源&quot;</span> -i <span class="hljs-string">&quot;音频源&quot;</span> -vcodec h264_omx -pix_fmt yuv420p -r 30 -s 1280*720 -g 60 -b:v 10M -bufsize 10M -acodec aac -ac 2 -ar 44100 -ab 128k -f flv <span class="hljs-string">&quot;推流地址&quot;</span><br><br><span class="hljs-comment">#推流USB摄像头（不包含音频）</span><br>ffmpeg -thread_queue_size 512 -f video4linux2 -s 1280*720 -i <span class="hljs-string">&quot;视频源&quot;</span> -vcodec h264_omx -pix_fmt yuv420p -r 30 -s 1280*720 -g 60 -b:v 10M -bufsize 10M -an -f flv <span class="hljs-string">&quot;推流地址&quot;</span><br><br><span class="hljs-comment">#推流视频</span><br>ffmpeg -re -i <span class="hljs-string">&quot;视频源&quot;</span> -vcodec copy -acodec aac -b:a 192k -f flv <span class="hljs-string">&quot;推流地址&quot;</span> <br></code></pre></td></tr></table></figure><p>以下是Windows系统中推流命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#推流USB摄像头（包含音频，音频源为音频文件）</span><br>ffmpeg -f dshow -s 1280*720 -r 1024 -i video=<span class="hljs-string">&quot;视频源&quot;</span> -stream_loop -1 -i <span class="hljs-string">&quot;音频源&quot;</span> -vcodec libx264 -pix_fmt yuv420p -r 30 -s 1280*720 -g 60 -b:v 5000k -acodec aac -ac 2 -ar 44100 -ab 128k -preset:v ultrafast -tune:v zerolatency -f flv <span class="hljs-string">&quot;推流地址&quot;</span><br><br><span class="hljs-comment">#推流USB摄像头（包含音频，音频源麦克风）</span><br>ffmpeg -f dshow -s 1280*720 -r 1024 -i video=<span class="hljs-string">&quot;视频源&quot;</span> -i <span class="hljs-string">&quot;音频源&quot;</span> -vcodec libx264 -pix_fmt yuv420p -r 30 -s 1280*720 -g 60 -b:v 5000k -acodec aac -ac 2 -ar 44100 -ab 128k -preset:v ultrafast -tune:v zerolatency -f flv <span class="hljs-string">&quot;推流地址&quot;</span><br><br><span class="hljs-comment">#推流USB摄像头（不包含音频）</span><br>ffmpeg -f dshow -s 1280*720 -r 1024 -i video=<span class="hljs-string">&quot;视频源&quot;</span> -vcodec libx264 -pix_fmt yuv420p -r 30 -s 1280*720 -g 60 -b:v 5000k -an -preset:v ultrafast -tune:v zerolatency -f flv <span class="hljs-string">&quot;推流地址&quot;</span><br><br><span class="hljs-comment">#推流视频</span><br>ffmpeg -re -i <span class="hljs-string">&quot;视频源&quot;</span> -vcodec copy -acodec aac -b:a 192k -f flv <span class="hljs-string">&quot;推流地址&quot;</span> <br></code></pre></td></tr></table></figure><p>以上命令没有经过仔细测试，不同环境需要不同的参数，请自行学习FFmpeg的用法。</p><p>FFmpeg基本用法：</p><p>ffmpeg [全局选项] {[输入文件选项] -i 输入文件} … {[输出文件选项] 输出文件} …</p><p>参数简单介绍：</p><ul><li>-f：输入格式（video4linux2 ）</li><li>-i：输入源</li><li>-s：视频分辨率</li><li>-r：所需的帧率</li><li>-vcodec：视频编解码器</li><li>-vb：视频比特率</li><li>-bufsize：缓冲区大小（对于流来说很重要）</li><li>-vf：像素格式</li><li>-g：GOP（图片组，对于流式传输很重要）</li><li>-an：不使用音频</li><li>-f：输出格式</li></ul><p><a href="https://huangenet.lanzoui.com/i7RjTq47fwj">ffmpeg翻译文档.pdf - 蓝奏云 (lanzoui.com)</a></p><p>树莓派在使用FFmpeg推流时，帧数大概在10帧左右，这个帧数并不理想，而且还在用树莓派硬件解码的情况下。但是也是目前我能找到的最优解了</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 玩客云 </tag>
            
            <tag> 树莓派 </tag>
            
            <tag> FFmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在玩客云上部署code-server</title>
      <link href="2021/06/05/%E5%9C%A8%E7%8E%A9%E5%AE%A2%E4%BA%91%E4%B8%8A%E9%83%A8%E7%BD%B2code-server/"/>
      <url>2021/06/05/%E5%9C%A8%E7%8E%A9%E5%AE%A2%E4%BA%91%E4%B8%8A%E9%83%A8%E7%BD%B2code-server/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://coder.com/">Code-server</a> 是在远程服务器上运行的VS Code，通过浏览器访问。</p><ul><li>在你的Chromebook、平板、笔记本上用一样的环境来进行开发</li><li>如果你有Windows或Mac工作站，也可以轻松地在Linux上开发</li><li>利用云服务器来加快测试、编译、下载等操作</li><li>不论在哪永远在线</li><li>所有的计算都在云端进行</li><li>不需要再运行过多的Chrome实例</li></ul><p>Code-server → <a href="https://coder.com/">https://coder.com/</a></p><p>GitHub → <a href="https://github.com/linuxserver/docker-code-server">https://github.com/linuxserver/docker-code-server</a></p><p>Docker Hub → <a href="https://hub.docker.com/r/linuxserver/code-server">https://hub.docker.com/r/linuxserver/code-server</a></p><h2 id="支持的系统架构"><a href="#支持的系统架构" class="headerlink" title="支持的系统架构"></a>支持的系统架构</h2><p>得益于docker的跨平台属性，我们的镜像也支持多架构（如，x86-64、arm64、armhf）。</p><p>直接拉取 <code>ghcr.io/linuxserver/code-server</code> 应该就可以自动获取适合你系统架构的版本，当然你也可以通过 tag 获取特定的版本。</p><table><thead><tr><th>架构</th><th>Tag</th></tr></thead><tbody><tr><td>x86-64</td><td>amd64-latest</td></tr><tr><td>arm64</td><td>arm64v8-latest</td></tr><tr><td>armhf</td><td>arm32v7-latest</td></tr></tbody></table><hr><p><strong>玩客云是32位的，所以也可以用这个</strong></p><h2 id="部署方法"><a href="#部署方法" class="headerlink" title="部署方法"></a>部署方法</h2><p>你需要先安装好Docker  ，方法自行百度</p><p><strong>部署命令</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> -d \<br>  <span class="hljs-attribute">--name</span>=code-server \<br>  -e <span class="hljs-attribute">PUID</span>=1000 \<br>  -e <span class="hljs-attribute">PGID</span>=1000 \<br>  -e <span class="hljs-attribute">TZ</span>=Europe/London \<br>  -e <span class="hljs-attribute">PASSWORD</span>=password  \<br>  -e <span class="hljs-attribute">SUDO_PASSWORD</span>=password  \<br>  -e <span class="hljs-attribute">PROXY_DOMAIN</span>=code-server.my.domain  \<br>  -p 8443:8443 \<br>  -v /path/<span class="hljs-keyword">to</span>/appdata/config:<span class="hljs-built_in">/config </span>\<br>  --restart unless-stopped \<br>  linuxserver/code-server<br></code></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>Docker镜像在使用的时候需要配置一些参数，这些参数使用 <code>:</code> 分隔，分别表示 <code>宿主机:容器内</code>。例如 <code>-p 8080:80</code> 指的是将容器内的<code>80</code>端口映射到宿主机上的<code>8080</code>端口，即通过宿主机网络访问的话，访问<code>8080</code>端口即是访问容器内的<code>80</code>端口。</p><h3 id="端口（-p）"><a href="#端口（-p）" class="headerlink" title="端口（-p）"></a>端口（-p）</h3><table><thead><tr><th>port</th><th>说明</th></tr></thead><tbody><tr><td><code>8443</code></td><td>WEB界面</td></tr></tbody></table><h3 id="环境变量（-e）"><a href="#环境变量（-e）" class="headerlink" title="环境变量（-e）"></a>环境变量（-e）</h3><table><thead><tr><th>env</th><th>说明</th></tr></thead><tbody><tr><td><code>PUID=1000</code></td><td>用户的 UID，详见下面的说明</td></tr><tr><td><code>PGID=1000</code></td><td>用户的 GID，详见下面的说明</td></tr><tr><td><code>TZ=Europe/London</code></td><td>设置时区，在国内的话可以使用 Asia/Shanghai</td></tr><tr><td><code>PASSWORD=password</code></td><td>Web界面的密码，如果不设置则不会启用认证</td></tr><tr><td><code>SUDO_PASSWORD=password</code></td><td>如果设置了该项，则在服务器的终端上用该密码使用sudo</td></tr><tr><td><code>PROXY_DOMAIN=code-server.my.domain</code></td><td>反向代理相关的设置，<a href="https://github.com/cdr/code-server/blob/master/doc/FAQ.md#sub-domains">具体参阅这里</a></td></tr></tbody></table><h3 id="卷映射（-v）"><a href="#卷映射（-v）" class="headerlink" title="卷映射（-v）"></a>卷映射（-v）</h3><table><thead><tr><th>volume</th><th>说明</th></tr></thead><tbody><tr><td><code>/config</code></td><td>配置文件所在路径</td></tr></tbody></table><h2 id="从文件加载环境变量"><a href="#从文件加载环境变量" class="headerlink" title="从文件加载环境变量"></a>从文件加载环境变量</h2><p>可以使用前缀名为 <code>FILE__</code> 的文件来加载环境变量。</p><p>例：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">-e FILE__PASSWORD=<span class="hljs-regexp">/run/</span>secrets/mysecretpassword<br></code></pre></td></tr></table></figure><p>将把 <code>/run/secrets/mysecretpassword</code> 文件中的内容作为 <code>PASSWORD</code> 变量的值。</p><h2 id="UID和GID"><a href="#UID和GID" class="headerlink" title="UID和GID"></a>UID和GID</h2><p>当使用 <code>-v</code> 映射卷的时候，宿主机和容器内会出现关于权限的问题，我们的镜像可以通过指定 <code>PUID</code> 和 <code>GUID</code> 来避免此类问题。</p><p>可以使用你目前正在使用的用户的UID和GID进行设置，这样就不会存在权限问题。</p><p>可以通过如下的方式查看当前用户的UID和GID：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> id <span class="hljs-variable">$user</span></span><br>  uid=1000(dockeruser) gid=1000(dockergroup) groups=1000(dockergroup)<br></code></pre></td></tr></table></figure><h2 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h2><p>访问WEB界面：<code>http://ip:8443</code></p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210605150345.png" alt="image-20210605150345025"></p><p>如果要使用GitHub，把ssh密钥放在 /config/.ssh 文件夹</p><p>然后在菜单中打开终端，设置github的用户名和邮箱</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> <span class="hljs-string">&quot;username&quot;</span><br>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> <span class="hljs-string">&quot;email address&quot;</span><br></code></pre></td></tr></table></figure><p>想换成中文，在拓展那里搜索“Chinese”,找到“简体中文”安装，重新加载页面即可。</p><p>哈哈哈，快去压榨玩客云的性能吧！</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VsCode </tag>
            
            <tag> 玩客云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于宝塔面板的Google镜像网站设置教程</title>
      <link href="2021/05/20/%E5%9F%BA%E4%BA%8E%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E7%9A%84Google%E9%95%9C%E5%83%8F%E7%BD%91%E7%AB%99%E8%AE%BE%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
      <url>2021/05/20/%E5%9F%BA%E4%BA%8E%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E7%9A%84Google%E9%95%9C%E5%83%8F%E7%BD%91%E7%AB%99%E8%AE%BE%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="建立站点"><a href="#建立站点" class="headerlink" title="建立站点"></a>建立站点</h2><p>在宝塔面板后台点击：<strong>网站-添加站点-输入网站域名</strong></p><h2 id="反向代理设置"><a href="#反向代理设置" class="headerlink" title="反向代理设置"></a>反向代理设置</h2><p>安装面板后新建站点，然后设置站点选择反向代理（如下图所示）<br><a href="http://blog.chauncey09.com/usr/uploads/2019/08/3707359233.png"><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210520192934.png" alt="img"></a></p><p>然后设置反向代理</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">目标URL是： https:<span class="hljs-comment">//www.google.com.hk</span><br>发送域名也是： www<span class="hljs-selector-class">.google</span><span class="hljs-selector-class">.com</span>.hk<br><br><br>#注意：目标URL一定是www<span class="hljs-selector-class">.google</span><span class="hljs-selector-class">.com</span><span class="hljs-selector-class">.hk</span> 后缀为二级区域域名.hk或者.sg。<br>否则会出现无法反代，连续多跳的问题。<br></code></pre></td></tr></table></figure><h2 id="SSL设置"><a href="#SSL设置" class="headerlink" title="SSL设置"></a>SSL设置</h2><p>点击SSL-开启https强制运行（这一步一定要有，因为谷歌目前已经强制https，所以镜像站点同样要以https运行）</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Google </tag>
            
            <tag> 宝塔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小米路由器mini刷openwrt系统</title>
      <link href="2021/04/24/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8mini%E5%88%B7openwrt%E7%B3%BB%E7%BB%9F/"/>
      <url>2021/04/24/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8mini%E5%88%B7openwrt%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://www.mi.com/miwifilite/specs">这个路由器</a>有16M的ROM，还能装点东西，比斐讯K2还是好使得多，可以刷功能较齐备的openwrt，顺便搞个去广告，科学上网等</p><h1 id="刷机步骤"><a href="#刷机步骤" class="headerlink" title="刷机步骤"></a>刷机步骤</h1><p>小米路由器要刷其他系统，需要先获得SSH权限，而获得SSH权限则需要先刷开发版</p><p>只有开发版系统才能开启SSH权限，所以第一步我们需要将路由器系统刷为开发版。<br>到<a href="http://www.miui.com/thread-1776173-1-1.html">小米路由官网</a>去下载开发版系统ROM，建议直接刷这个版本<a href="http://bigota.miwifi.com/xiaoqiang/rom/r1cm/miwifi_r1cm_firmware_426e6_0.8.11.bin">小米路由器mini MiWiFi 开发版 0.8.11</a></p><blockquote><p>非常重要，如果版本高了，不能开启SSH，版本低了没有修改root用户的api。</p></blockquote><h3 id="刷开发版"><a href="#刷开发版" class="headerlink" title="刷开发版"></a>刷开发版</h3><p>刷入开发版非常简单，步骤如下：</p><ol><li>将上面下载好的固件改名为：<code>miwifi.bin</code> ，放入一个U盘的根目录，U盘需要是 <code>FAT32</code> 格式</li><li>U盘插到路由屁股上，拿根取卡针等尖头物件顶住 <code>reset</code> ，然后插入电源</li><li>路由器指示灯先会常亮黄色，等指示灯狂闪后就可以松开 <code>reset</code> 了，然后静候路由器指示灯变成蓝色</li></ol><p>以上做完就完成刷入开发版的步骤了。如果指示灯是红色，那么代表这个固件有问题，重新更换固件，断电再走一遍流程就可以了，不用担心会变砖。</p><h3 id="开启SSH权限"><a href="#开启SSH权限" class="headerlink" title="开启SSH权限"></a>开启SSH权限</h3><p>系统刷好开发版后，我们就可以开启系统的SSH权限了。开启SSH权限，需要登录<a href="http://d.miwifi.com/rom/ssh">官方网站</a>下载对应的工具包：</p><ol><li>请将下载的工具包 <code>bin</code> 文件复制到U盘（<code>FAT/FAT32</code> 格式）的根目录下，保证文件名为 <code>miwifi_ssh.bin</code> 「如果之前刷开发版用的同一个U盘，那之前放的 <code>miwifi.bin</code> 删除掉不需要多说吧？」；</li><li>断开小米路由器的电源，将U盘插入USB接口；</li><li>抵住 <code>reset</code> 按钮之后重新插上电源，指示灯变为黄色闪烁状态即可松开 <code>reset</code> 键；</li><li>等待3-5秒后安装完成之后，小米路由器会自动重启</li></ol><blockquote><p>官方给每个账号提供了一个随机的root密码，为了管理方便，我们可以登录后用 <code>passwd</code> 命令将root密码改成我们自己好记得的</p></blockquote><p>刷完 <code>miwifi_ssh.bin</code> 后，我们可以用Xshell等SSH客户端连接登录路由器，我这里使用的是FinalShell</p><p>如果不成功（红灯）就换个固件或者U盘</p><h3 id="刷Breed"><a href="#刷Breed" class="headerlink" title="刷Breed"></a>刷Breed</h3><p>SSH权限搞定后，我们要做的是换个BootLoder系统，大名鼎鼎的Breed（Boot and Recovery Environment for Embedded Devices）便是不二选择。</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210424200506.png" alt="Breed Web 恢复控制台"></p><p>要刷入Breed也不复杂，操作步骤如下：</p><h3 id="1-下载Breed固件"><a href="#1-下载Breed固件" class="headerlink" title="1.下载Breed固件"></a>1.下载Breed固件</h3><p>在<a href="https://breed.hackpascal.net/">Breed固件列表</a>，查找自己设备所需的版本，小米路由器mini需要的是这个：<a href="https://breed.hackpascal.net/breed-mt7620-xiaomi-mini.bin">breed-mt7620-xiaomi-mini.bin</a></p><h3 id="2-备份原有的BootLoder"><a href="#2-备份原有的BootLoder" class="headerlink" title="2.备份原有的BootLoder"></a>2.备份原有的BootLoder</h3><p>使用SSH客户端连接登录路由系统，输入以下命令：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">dd <span class="hljs-keyword">if</span>=<span class="hljs-regexp">/dev/m</span>td1 of=<span class="hljs-regexp">/tmp/</span>xiaomi_uboot.bin<br></code></pre></td></tr></table></figure><p>系统返回，说明已经将原来的xiaomi_uboot.bin备份到/tmp：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">384</span>+<span class="hljs-number">0</span> records in<br><span class="hljs-attribute">384</span>+<span class="hljs-number">0</span> records out<br></code></pre></td></tr></table></figure><p>备份完成后将备份文件下载到本地妥善保存，用不到就最好了。不知道怎么下载？那就扔了不要了吧，就当这步备份操作白做了，反正出了问题自己负责o(<em>￣︶￣</em>)o</p><h3 id="3-刷Breed"><a href="#3-刷Breed" class="headerlink" title="3.刷Breed"></a>3.刷Breed</h3><p>用sftp之类工具把Breed固件上传到 <code>/tmp</code> 目录下，如果不会传那也可以ssh登录路由系统后执行下面的命令直接从网上下载：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd /tmp<br>wget http:<span class="hljs-regexp">//</span>down.sobaigu.com<span class="hljs-regexp">/files/</span>breed-mt7620-xiaomi-mini.bin<br></code></pre></td></tr></table></figure><p>这里，我的路由器wget用不了，所以下载<a href="https://winscp.net/eng/docs/lang:chs">WinSCP</a>，把下载好的固件上传到 <code>/tmp</code> 目录下</p><p>然后执行以下写入命令：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">mtd -r <span class="hljs-keyword">write</span> <span class="hljs-regexp">/tmp/</span>breed-mt7620-xiaomi-mini.bin Bootloader<br></code></pre></td></tr></table></figure><p>眨眼的功夫就刷写完成了，完成后关闭路由拔掉电源，找取卡针之类的尖物件抵住 <code>reset</code> 按钮，插上电源开机，等到路由指示灯狂闪的时候，就可以松开 <code>reset</code> 键，然后在用网线连接在该路由上的Wan口浏览器登录 <code>192.168.1.1</code> 就可以进入 <code>Breed web恢复控制台</code> 界面了，就如上面那个截图。</p><h3 id="刷固件"><a href="#刷固件" class="headerlink" title="刷固件"></a>刷固件</h3><p>在刷固件前，建议使用Breed固件备份功能，将原路由所有的项目备份好以备用，同样的用不到最好。</p><p>因为路由有16M的ROM，所以可选的固件还是蛮多的，潘朵拉，华硕改等固件都行，在此推荐一个，个人觉着还蛮不错的，功能也齐全：<a href="https://www.right.com.cn/forum/thread-423219-1-1.html">小米路由器Mini Lean R9.7.6 自编译固件</a></p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210424201327.png" alt="固件更新"></p><p>选择 <code>固件更新</code> 》点击 <code>固件</code> 右侧的 <code>选择文件</code> ，选择刚下载的固件文件，然后点上传，不一会儿就完成了，新系统默认后台信息为：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns">IP：   <span class="hljs-number">192.168.1.1</span><br>用户： root<br>密码： password<br></code></pre></td></tr></table></figure><p>至此，路由器系统脱胎换骨完成，有广告屏蔽，有科学上网还支持订阅地址，V2Ray，支持局域网网络唤醒设备，提供打印机服务…… 有点小瑕疵，可能有内存泄露开久了会死机，带宽监控统计图表不展示之类的，设置下每周定时重启，完全OK，知足常乐！</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210424201406.png" alt="img"></p><h3 id="更换Wan口的MAC地址"><a href="#更换Wan口的MAC地址" class="headerlink" title="更换Wan口的MAC地址"></a>更换Wan口的MAC地址</h3><p>在SSH中输入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi /etc/config/network<br></code></pre></td></tr></table></figure><p>修改其中一段</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gams">config <span class="hljs-string">&#x27;interface&#x27;</span> <span class="hljs-string">&#x27;lan&#x27;</span><br>        <span class="hljs-keyword">option</span> <span class="hljs-string">&#x27;type&#x27;</span> <span class="hljs-string">&#x27;bridge&#x27;</span><br>        <span class="hljs-keyword">option</span> <span class="hljs-string">&#x27;ifname&#x27;</span> <span class="hljs-string">&#x27;eth0.0&#x27;</span><br>        <span class="hljs-keyword">option</span> <span class="hljs-string">&#x27;proto&#x27;</span> <span class="hljs-string">&#x27;static&#x27;</span><br>        <span class="hljs-keyword">option</span> <span class="hljs-string">&#x27;netmask&#x27;</span> <span class="hljs-string">&#x27;255.255.255.0&#x27;</span><br>        <span class="hljs-keyword">option</span> <span class="hljs-string">&#x27;ipaddr&#x27;</span> <span class="hljs-string">&#x27;192.168.200.1&#x27;</span><br>        <span class="hljs-keyword">option</span> <span class="hljs-string">&#x27;macaddr&#x27;</span> <span class="hljs-string">&#x27;d8:64:c7:5e:f1:c6&#x27;</span><br><br>config <span class="hljs-string">&#x27;interface&#x27;</span> <span class="hljs-string">&#x27;wan&#x27;</span><br>        <span class="hljs-keyword">option</span> <span class="hljs-string">&#x27;ifname&#x27;</span> <span class="hljs-string">&#x27;eth0.1&#x27;</span><br>        <span class="hljs-keyword">option</span> <span class="hljs-string">&#x27;proto&#x27;</span> <span class="hljs-string">&#x27;dhcp&#x27;</span><br>        <span class="hljs-keyword">option</span> <span class="hljs-string">&#x27;macaddr&#x27;</span> <span class="hljs-string">&#x27;d8:64:c7:5e:f1:c6&#x27;</span><br></code></pre></td></tr></table></figure><p>修改Wan口Mac地址即可</p><p>之后保存，reboot 重启，就能看到所有修改都生效了。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小米 </tag>
            
            <tag> 路由器 </tag>
            
            <tag> Openwrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为玩客云或树莓派安装LNMP和PhpMyAdmin</title>
      <link href="2021/04/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85MySQL%E5%92%8CPhpMyAdmin/"/>
      <url>2021/04/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85MySQL%E5%92%8CPhpMyAdmin/</url>
      
        <content type="html"><![CDATA[<h2 id="一、更换国内源，修改为清华镜像源（PS-如果不更换，可能…………）"><a href="#一、更换国内源，修改为清华镜像源（PS-如果不更换，可能…………）" class="headerlink" title="一、更换国内源，修改为清华镜像源（PS. 如果不更换，可能…………）"></a>一、更换国内源，修改为清华镜像源（PS. 如果不更换，可能…………）</h2><p>备份原文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak<br>sudo cp /etc/apt/sources.list.d/raspi.list /etc/apt/sources.list.d/raspi.list.bak<br></code></pre></td></tr></table></figure><p>更改系统源文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo vim /etc/apt/sources.list<br></code></pre></td></tr></table></figure><p>将原内容注释掉，然后添加：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi<br>deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi<br></code></pre></td></tr></table></figure><p>更改系统源：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo vim /etc/apt/sources.list.d/raspi.list<br></code></pre></td></tr></table></figure><p>将原内容注释并改为</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui<br>deb-src http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui<br></code></pre></td></tr></table></figure><p>玩客云：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> focal main restricted universe multiverse<br><span class="hljs-comment"># deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal main restricted universe multiverse</span><br><br>deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> focal-security main restricted universe multiverse<br><span class="hljs-comment"># deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse</span><br><br>deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> focal-updates main restricted universe multiverse<br><span class="hljs-comment"># deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse</span><br><br>deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> focal-backports main restricted universe multiverse<br><span class="hljs-comment"># deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse</span><br></code></pre></td></tr></table></figure><p>更新软件包索引</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get update<br>sudo apt-get upgrade<br></code></pre></td></tr></table></figure><h2 id="一、安装Nginx"><a href="#一、安装Nginx" class="headerlink" title="一、安装Nginx"></a>一、安装Nginx</h2><p>安装Nginx，输入下面的命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install -y nginx<br></code></pre></td></tr></table></figure><p>安装完毕后启动nginx服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo service nginx restart<br></code></pre></td></tr></table></figure><h2 id="二、安装PHP"><a href="#二、安装PHP" class="headerlink" title="二、安装PHP"></a>二、安装PHP</h2><p>安装PHP7.0，输入下面的命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install -y nginx php7.0-fpm php7.0-cli php7.0-curl php7.0-gd php7.0-mcrypt php7.0-cgi php7.0-mysql php7.0-mbstring<br></code></pre></td></tr></table></figure><p>安装完毕后启动php7.0服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo service php7.0-fpm restart<br></code></pre></td></tr></table></figure><h2 id="三、安装MySQL（MariaDB）"><a href="#三、安装MySQL（MariaDB）" class="headerlink" title="三、安装MySQL（MariaDB）"></a>三、安装MySQL（MariaDB）</h2><blockquote><p>「重要前提」上面的 “更新软件包索引” 必须执行成功之后，才能进行安装</p></blockquote><p>安装MySQL（MariaDB）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install mariadb-server<br></code></pre></td></tr></table></figure><p>运行  mysql_secure_installation  工具：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo mysql_secure_installation<br></code></pre></td></tr></table></figure><p>根据向导指引进行相关设置：</p><ul><li>第一步： “输入 root 的当前密码：”，默认为空，直接按Enter即可；</li><li>第二步： “设置 root 密码？”，这里请输入 Y 并按  Enter。设置 root 登陆密码确保数据安全。然后向导将要求输入新密码和确认密码。</li><li>第三步： “删除匿名用户？”，输入 Y 或 N 并按  Enter。</li><li>第四步： “禁止远程 root 登录？”，输入 Y 或 N 并按  Enter；根据自己需要设置，我这里设置为N。</li><li>第五步： “删除测试数据库并访问它？”，输入 Y 或 N 并按  Enter。</li></ul><p>开始尽情使用 MySQL 吧：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo mysql -u root -p<br></code></pre></td></tr></table></figure><p>输入前面设置的密码并回车，然后……就和我们平时使用的 mysql 一样了！</p><h2 id="四、配置Nginx-PHP-MySQL"><a href="#四、配置Nginx-PHP-MySQL" class="headerlink" title="四、配置Nginx+PHP+MySQL"></a>四、配置Nginx+PHP+MySQL</h2><p>1.配置Nginx让它能处理 PHP</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo nano /etc/nginx/sites-available/default<br></code></pre></td></tr></table></figure><p>找到下面这段代码：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">location / &#123;<br>       <span class="hljs-comment"># First attempt to serve request as file, then</span><br>       <span class="hljs-comment"># as directory, then fall back to displaying a 404.</span><br>       try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ =<span class="hljs-number">404</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这段代码的{}里面，添加一行代码：index index.html index.htm index.php;</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-keyword">location</span> / &#123;<br>       <span class="hljs-meta"># First attempt to serve request as file, then</span><br>       <span class="hljs-meta"># as directory, then fall back to displaying a 404.</span><br>       try_files $uri $uri/ =<span class="hljs-number">404</span>;<br>       <span class="hljs-keyword">index</span> <span class="hljs-keyword">index</span>.html <span class="hljs-keyword">index</span>.htm <span class="hljs-keyword">index</span>.php;<br>&#125;<br></code></pre></td></tr></table></figure><p>再找到下面的代码：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs clean">#location ~ \.php$ &#123;<br>        #       include snippets/fastcgi-php.conf;<br>        #<br>        #       # With php-fpm (or other unix sockets):<br>        #       fastcgi_pass unix:/var/run/php/php7<span class="hljs-number">.0</span>-fpm.sock;<br>        #       # With php-cgi (or other tcp sockets):<br>        #       fastcgi_pass <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">9000</span>;<br>        #&#125;<br></code></pre></td></tr></table></figure><p>改为：（注意要去掉location 和 }前面的“#”号）</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">location</span> <span class="hljs-regexp">~ \.php$</span> &#123;<br>        <span class="hljs-comment">#       include snippets/fastcgi-php.conf;</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment">#       # With php-fpm (or other unix sockets):</span><br>                <span class="hljs-attribute">fastcgi_pass</span> unix:/run/php/php7.0-fpm.sock;<br>                <span class="hljs-attribute">fastcgi_param</span> SCRIPT_FILENAME $document_root$fastcgi_script_name;<br>                <span class="hljs-attribute">include</span> fastcgi_params;<br>        <span class="hljs-comment">#       # With php-cgi (or other tcp sockets):</span><br>        <span class="hljs-comment">#       fastcgi_pass 127.0.0.1:9000;</span><br>        &#125;<br></code></pre></td></tr></table></figure><p>Ctrl + O 保存再 Ctrl + X 退出。<br>最后重启 Nginx 即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo service nginx restart<br></code></pre></td></tr></table></figure><p>测试运行php文件，在/var/www/html/目录下新建一个index.php文件，这里直接su获取最高权限来完成：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">pi@raspberrypi:~ $ su<br>密码：《输入你的root密码》<br>root@raspberrypi:/home/pi<span class="hljs-comment"># cat &gt;/var/www/html/index.php#回车进入编辑状态</span><br>&lt;?php<br>phpinfo();<br>?&gt;<br></code></pre></td></tr></table></figure><p>好了，用浏览器打开http:// 树莓派的IP你就可以看到熟悉的页面啦！</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210409232609.png" alt="image-20210409232609347"></p><p><strong>配置MySQL，允许远程连接</strong><br>用shell登录mysql：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#默认无密码，直接回车</span><br>mysql -u root -p<br><br><span class="hljs-comment">#设置允许远程连接并修改root密码，123456为root用户的新密码，%代表所有主机</span><br>UPDATE mysql.user SET host=<span class="hljs-string">&#x27;%&#x27;</span>,authentication_string=PASSWORD(<span class="hljs-string">&#x27;123456&#x27;</span>), PLUGIN=<span class="hljs-string">&#x27;mysql_native_password&#x27;</span> WHERE USER=<span class="hljs-string">&#x27;root&#x27;</span>;<br><br><span class="hljs-comment">#刷新权限</span><br>FLUSH PRIVILEGES;<br><br><span class="hljs-comment">#退出myslq</span><br><span class="hljs-built_in">exit</span><br><br><span class="hljs-comment">#重启mysql服务</span><br>sudo service mysql restart<br><br></code></pre></td></tr></table></figure><p>如果远程连接提示“100061”错误，那就继续修改/etc/mysql/mariadb.conf.d文件夹中的50-server.cnf文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#用nano打开50-server.cnf</span><br>sudo nano /etc/mysql/mariadb.conf.d/50-server.cnf<br><br><span class="hljs-comment">#修改其中的bind-address为</span><br>bind-address = 0.0.0.0<br><br><span class="hljs-comment">#Ctrl + O 保存再 Ctrl + X 退出,并重启mysql服务即可生效。</span><br>sudo service mysql restart<br><br></code></pre></td></tr></table></figure><h2 id="五、安装PhpMyAdmin"><a href="#五、安装PhpMyAdmin" class="headerlink" title="五、安装PhpMyAdmin"></a>五、安装PhpMyAdmin</h2><p>1.要将PHPMyAdmin软件包安装到树莓派中，需要运行以下命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install phpmyadmin<br></code></pre></td></tr></table></figure><p>2.PHPMyAdmin现在将开始安装到树莓派。在此过程中，系统将会询问你已经运行的Web服务器类型。</p><p>我这里使用的是nginx，所以点击Esc退出，你可以根据自己的情况选择</p><p>安装完毕后，再把phpmyadmin链接到/var/www/html目录下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo ln -s /usr/share/phpmyadmin /var/www/html<br></code></pre></td></tr></table></figure><p>浏览器打开 http:// 树莓派ip/phpmyadmin 就可以用root和新密码登录管理mysql数据库了！！</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210409232831.png" alt="image-20210409232830987"></p><p>好了，到这里就差不多结束了，遇到问题要多使用搜索引擎搜索哦！不要放弃，慢慢来。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 玩客云 </tag>
            
            <tag> 树莓派 </tag>
            
            <tag> Nginx </tag>
            
            <tag> PHP </tag>
            
            <tag> MySQL </tag>
            
            <tag> PhpMyAdmin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在玩客云或树莓派上通过ffmpeg将视频推流到直播平台</title>
      <link href="2021/04/09/%E5%9C%A8%E7%8E%A9%E5%AE%A2%E4%BA%91%E6%88%96%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8A%E9%80%9A%E8%BF%87ffmpeg%E5%B0%86%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E5%88%B0%E7%9B%B4%E6%92%AD%E5%B9%B3%E5%8F%B0/"/>
      <url>2021/04/09/%E5%9C%A8%E7%8E%A9%E5%AE%A2%E4%BA%91%E6%88%96%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8A%E9%80%9A%E8%BF%87ffmpeg%E5%B0%86%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E5%88%B0%E7%9B%B4%E6%92%AD%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<p>为了压榨玩客云的性能，搞了直播推流，下面教大家怎么推流</p><p>我把玩客云刷了Powersee的玩客云第二版固件，具体看<a href="https://powersee.gitee.io/2021/02/wankeyun-2/">这里</a>，当然使用树莓派也可以</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h4 id="1、安装ffmpeg"><a href="#1、安装ffmpeg" class="headerlink" title="1、安装ffmpeg"></a>1、安装ffmpeg</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install ffmpeg<br></code></pre></td></tr></table></figure><h4 id="2、启动推流"><a href="#2、启动推流" class="headerlink" title="2、启动推流"></a>2、启动推流</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -re -i /root/video.mp<span class="hljs-number">4</span> -vcodec libx<span class="hljs-number">264</span> -acodec aac -strict -<span class="hljs-number">2</span> -f flv <span class="hljs-string">&quot;你的推流地址&quot;</span><br></code></pre></td></tr></table></figure><p>举个栗子（B站）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ffmpeg -re -i <span class="hljs-regexp">/mnt/</span>aria2-downloads<span class="hljs-regexp">/xianghuo.mkv -vcodec libx264 -acodec aac -strict -2 -f flv &quot;rtmp:/</span><span class="hljs-regexp">/live-push.bilivideo.com/</span>live-bvc/直播码<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210409224001.png" alt="image-20210409224001344"></p><p>更多详细说明可参考ffmpeg官方文档：<a href="http://ffmpeg.org/ffmpeg.html">http://ffmpeg.org/ffmpeg.html</a></p><h4 id="3、后台执行"><a href="#3、后台执行" class="headerlink" title="3、后台执行"></a>3、后台执行</h4><p>（1）安装screen</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install screen<br></code></pre></td></tr></table></figure><p>（2）新建终端</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">screen -S live</span><br></code></pre></td></tr></table></figure><p>（3）在新的终端执行命令后</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">Ctrl+<span class="hljs-selector-tag">A</span>+D<br></code></pre></td></tr></table></figure><p>（4）重新进入终端</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">screen -r live</span><br></code></pre></td></tr></table></figure><p>（5）删除某一个终端</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">screen -<span class="hljs-keyword">S</span> 进程号 -<span class="hljs-keyword">X</span> <span class="hljs-keyword">quit</span><br></code></pre></td></tr></table></figure><h4 id="4-推流成功"><a href="#4-推流成功" class="headerlink" title="4.推流成功"></a>4.推流成功</h4><p><a href="https://live.bilibili.com/21577989">https://live.bilibili.com/21577989</a></p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210409224250.png" alt="image-20210409224250405"></p><p>玩客云直播时的参数</p><p>CPU基本跑满</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210409224355.png" alt="image-20210409224355158"></p><p>好了，赶快去实践吧！</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ffmpeg </tag>
            
            <tag> 玩客云 </tag>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云盘+OneManager+Heroku+CFWorkers实现阿里云盘网络挂载</title>
      <link href="2021/03/28/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98-OneManager-Heroku-CFWorkers%E5%AE%9E%E7%8E%B0%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E7%BD%91%E7%BB%9C%E6%8C%82%E8%BD%BD/"/>
      <url>2021/03/28/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98-OneManager-Heroku-CFWorkers%E5%AE%9E%E7%8E%B0%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E7%BD%91%E7%BB%9C%E6%8C%82%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>你是不是想和我一样把阿里云盘搭建成一个分享平台呢？像下面这样</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210328182903.png" alt="image-20210328182902788"></p><p>实现直链下载，不通过客户端，还可以分享给别人</p><p>我们先来看看实现的方法</p><p>下面有两种挂载程序（任选其一）</p><p>1.Onemanager</p><p><a href="https://github.com/qkqpttgf/OneManager-php">https://github.com/qkqpttgf/OneManager-php</a></p><p>2.ShareList</p><p><a href="https://github.com/reruin/sharelist">https://github.com/reruin/sharelist</a></p><p>部署方式有许多种，我们这里采用Heroku部署（要白嫖嘛~）</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>阿里云盘账户</li><li>Heroku账户</li><li>GitHub 项目地址</li></ul><h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><p>我们先来讲Onemanager</p><p>首先注册一个Heroku账号（可能需要科学上网）</p><p><a href="https://signup.heroku.com/login">https://signup.heroku.com/login</a></p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210328184128.png" alt="image-20210328184128510"></p><p>这个不用教了吧~</p><p>注册好后登陆，打开Onemanager的github项目</p><p><a href="https://github.com/qkqpttgf/OneManager-php">https://github.com/qkqpttgf/OneManager-php</a></p><p>点击“<strong>Deploy to Heroku</strong>”</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210328184305.png" alt="image-20210328184305549"></p><p>App name 随便填一个，下面选择美国或欧洲，然后点击“Deploy app”</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210328184431.png" alt="image-20210328184431355"></p><p>然后等它构建完成，点击“<strong>View</strong>”</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210328184659.png" alt="image-20210328184659731"></p><p>点击“点击开始安装程序”</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210328184754.png" alt="image-20210328184754371"></p><p>语言选择中文，然后点击新建API Key</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210328184844.png" alt="image-20210328184844603"></p><p>然后滑到下边找到<strong>API Key</strong>点击<strong>Reveal</strong>，复制key</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210328184957.png" alt="image-20210328184956986"></p><p>然后返回刚才的页面，粘贴key并设置管理密码</p><p>之后会进入这个页面，点击“登陆”，输入你刚才设置的密码</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210328185252.png" alt="image-20210328185252740"></p><p>然后点击“管理-设置”，然后在添加盘那里选择“Aliyundrive”，然后点击“添加盘”</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210328185440.png" alt="image-20210328185440480"></p><p>这个随便填一下</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210328185616.png" alt="image-20210328185616863"></p><p>然后点击“确认”</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210328185658.png" alt="image-20210328185658487"></p><p>接下来我们获取refresh_token</p><p>首先登陆阿里云盘</p><p><a href="https://www.aliyundrive.com/drive">https://www.aliyundrive.com/drive</a></p><p>登陆阿里云盘之后，打开开发者工具，切换到<code>Application</code>选项卡，点开<code>Local storage</code>,会有一个<code>token</code>项，点开就可以看到<code>refresh_token</code>了</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210328185933.png"></p><p>复制粘贴到刚才的页面，选择下面的其中之一</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210328190144.png" alt="image-20210328190144678"></p><p>这样就搭建好了，你可以在设置里美化页面，设置参数</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210328190233.png" alt="image-20210328190232979"></p><p>接下来我们讲ShareList</p><p>还是注册登陆好 <strong>Heroku</strong></p><p>打开<a href="https://github.com/reruin/sharelist%EF%BC%8C%E7%82%B9%E5%87%BB%E2%80%9C%E6%9F%A5%E7%9C%8B%E6%96%87%E6%A1%A3%E2%80%9D">https://github.com/reruin/sharelist，点击“查看文档”</a></p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210328190652.png" alt="image-20210328190652385"></p><p>点击“<strong>Deploy toHeroku</strong>”</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210328190832.png" alt="image-20210328190832463"></p><p>名字name随便起，json地址   </p><p> <a href="https://raw.githubusercontent.com/reruin/sharelist/master/package.json">https://raw.githubusercontent.com/reruin/sharelist/master/package.json</a></p><p>点击Deploy app，开始创建</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210328190956.png" alt="image-20210328190956545"></p><p>创建成功，点击“View“</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210328191604.png" alt="image-20210328191604095"></p><p>进行初始化</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210328191803.png" alt="image-20210328191802983"></p><p>要求按下面这个，虚拟路径那里选择“AliyunDrive”，然后点击保存</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210328191705.png" alt="image-20210328191705132"></p><p>下一步填入refresh_token，方法还是上面那个</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210328192122.png" alt="image-20210328192122118"></p><p>好了，这样就搭建好了。为了更好的访问速度可以进行CF Workers部署</p><h2 id="CF-Workers部署"><a href="#CF-Workers部署" class="headerlink" title="CF Workers部署"></a>CF Workers部署</h2><p>打开</p><p><a href="https://dash.cloudflare.com/">https://dash.cloudflare.com/</a></p><p>1.进入cf workers后台，选择新建worker</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210328192858.png" alt="image-20210328192858698"></p><p>2.复制如下代码，到worker编辑器中(xxxx.herokuapp.com改成你自己的)</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 替换成你想镜像的站点</span><br><span class="hljs-keyword">const</span> upstream = <span class="hljs-string">&#x27;xxxx.herokuapp.com&#x27;</span><br> <br><span class="hljs-comment">// 如果那个站点有专门的移动适配站点，否则保持和上面一致</span><br><span class="hljs-keyword">const</span> upstream_mobile = <span class="hljs-string">&#x27;xxxx.herokuapp.com&#x27;</span><br> <br><span class="hljs-comment">// 你希望禁止哪些国家访问</span><br><span class="hljs-keyword">const</span> blocked_region = [<span class="hljs-string">&#x27;KP&#x27;</span>]<br> <br><span class="hljs-comment">// 禁止自访问</span><br><span class="hljs-keyword">const</span> blocked_ip_address = [<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>]<br> <br><span class="hljs-comment">// 替换成你想镜像的站点</span><br><span class="hljs-keyword">const</span> replace_dict = &#123;<br>    <span class="hljs-string">&#x27;$upstream&#x27;</span>: <span class="hljs-string">&#x27;$custom_domain&#x27;</span>,<br>    <span class="hljs-string">&#x27;//google.com&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br> <br><span class="hljs-comment">//以下内容都不用动</span><br>addEventListener(<span class="hljs-string">&#x27;fetch&#x27;</span>, <span class="hljs-keyword">event</span> =&gt; &#123;<br>    <span class="hljs-keyword">event</span>.respondWith(fetchAndApply(<span class="hljs-keyword">event</span>.request));<br>&#125;)<br> <br><span class="hljs-function"><span class="hljs-keyword">async</span> function <span class="hljs-title">fetchAndApply</span>(<span class="hljs-params">request</span>)</span> &#123;<br> <br>    <span class="hljs-keyword">const</span> region = request.headers.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;cf-ipcountry&#x27;</span>).toUpperCase();<br>    <span class="hljs-keyword">const</span> ip_address = request.headers.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;cf-connecting-ip&#x27;</span>);<br>    <span class="hljs-keyword">const</span> user_agent = request.headers.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;user-agent&#x27;</span>);<br> <br>    <span class="hljs-keyword">let</span> response = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">let</span> url = <span class="hljs-keyword">new</span> URL(request.url);<br>    <span class="hljs-keyword">let</span> url_host = url.host;<br> <br>    <span class="hljs-keyword">if</span> (url.protocol == <span class="hljs-string">&#x27;http:&#x27;</span>) &#123;<br>        url.protocol = <span class="hljs-string">&#x27;https:&#x27;</span><br>        response = Response.redirect(url.href);<br>        <span class="hljs-keyword">return</span> response;<br>    &#125;<br> <br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">await</span> device_status(user_agent)) &#123;<br>        upstream_domain = upstream<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        upstream_domain = upstream_mobile<br>    &#125;<br> <br>    url.host = upstream_domain;<br> <br>    <span class="hljs-keyword">if</span> (blocked_region.includes(region)) &#123;<br>        response = <span class="hljs-keyword">new</span> Response(<span class="hljs-string">&#x27;Access denied: WorkersProxy is not available in your region yet.&#x27;</span>, &#123;<br>            status: <span class="hljs-number">403</span><br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(blocked_ip_address.includes(ip_address))&#123;<br>        response = <span class="hljs-keyword">new</span> Response(<span class="hljs-string">&#x27;Access denied: Your IP address is blocked by WorkersProxy.&#x27;</span>, &#123;<br>            status: <span class="hljs-number">403</span><br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">let</span> method = request.method;<br>        <span class="hljs-keyword">let</span> request_headers = request.headers;<br>        <span class="hljs-keyword">let</span> new_request_headers = <span class="hljs-keyword">new</span> Headers(request_headers);<br> <br>        new_request_headers.<span class="hljs-keyword">set</span>(<span class="hljs-string">&#x27;Host&#x27;</span>, upstream_domain);<br>        new_request_headers.<span class="hljs-keyword">set</span>(<span class="hljs-string">&#x27;Referer&#x27;</span>, url.href);<br> <br>        <span class="hljs-keyword">let</span> original_response = <span class="hljs-keyword">await</span> fetch(url.href, &#123;<br>            method: method,<br>            headers: new_request_headers<br>        &#125;)<br> <br>        <span class="hljs-keyword">let</span> original_response_clone = original_response.clone();<br>        <span class="hljs-keyword">let</span> original_text = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">let</span> response_headers = original_response.headers;<br>        <span class="hljs-keyword">let</span> new_response_headers = <span class="hljs-keyword">new</span> Headers(response_headers);<br>        <span class="hljs-keyword">let</span> status = original_response.status;<br> <br>        new_response_headers.<span class="hljs-keyword">set</span>(<span class="hljs-string">&#x27;access-control-allow-origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>);<br>        new_response_headers.<span class="hljs-keyword">set</span>(<span class="hljs-string">&#x27;access-control-allow-credentials&#x27;</span>, <span class="hljs-literal">true</span>);<br>        new_response_headers.delete(<span class="hljs-string">&#x27;content-security-policy&#x27;</span>);<br>        new_response_headers.delete(<span class="hljs-string">&#x27;content-security-policy-report-only&#x27;</span>);<br>        new_response_headers.delete(<span class="hljs-string">&#x27;clear-site-data&#x27;</span>);<br> <br>        <span class="hljs-keyword">const</span> content_type = new_response_headers.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;content-type&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (content_type.includes(<span class="hljs-string">&#x27;text/html&#x27;</span>) &amp;&amp; content_type.includes(<span class="hljs-string">&#x27;UTF-8&#x27;</span>)) &#123;<br>            original_text = <span class="hljs-keyword">await</span> replace_response_text(original_response_clone, upstream_domain, url_host);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            original_text = original_response_clone.body<br>        &#125;<br> <br>        response = <span class="hljs-keyword">new</span> Response(original_text, &#123;<br>            status,<br>            headers: new_response_headers<br>        &#125;)<br>    &#125;<br>    <span class="hljs-keyword">return</span> response;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">async</span> function <span class="hljs-title">replace_response_text</span>(<span class="hljs-params">response, upstream_domain, host_name</span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> text = <span class="hljs-keyword">await</span> response.text()<br> <br>    <span class="hljs-keyword">var</span> i, j;<br>    <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> replace_dict) &#123;<br>        j = replace_dict[i]<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-string">&#x27;$upstream&#x27;</span>) &#123;<br>            i = upstream_domain<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-string">&#x27;$custom_domain&#x27;</span>) &#123;<br>            i = host_name<br>        &#125;<br> <br>        <span class="hljs-keyword">if</span> (j == <span class="hljs-string">&#x27;$upstream&#x27;</span>) &#123;<br>            j = upstream_domain<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == <span class="hljs-string">&#x27;$custom_domain&#x27;</span>) &#123;<br>            j = host_name<br>        &#125;<br> <br>        <span class="hljs-keyword">let</span> re = <span class="hljs-keyword">new</span> RegExp(i, <span class="hljs-string">&#x27;g&#x27;</span>)<br>        text = text.replace(re, j);<br>    &#125;<br>    <span class="hljs-keyword">return</span> text;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">async</span> function <span class="hljs-title">device_status</span> (<span class="hljs-params">user_agent_info</span>)</span> &#123;<br>    <span class="hljs-keyword">var</span> agents = [<span class="hljs-string">&quot;Android&quot;</span>, <span class="hljs-string">&quot;iPhone&quot;</span>, <span class="hljs-string">&quot;SymbianOS&quot;</span>, <span class="hljs-string">&quot;Windows Phone&quot;</span>, <span class="hljs-string">&quot;iPad&quot;</span>, <span class="hljs-string">&quot;iPod&quot;</span>];<br>    <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> v = <span class="hljs-number">0</span>; v &lt; agents.length; v++) &#123;<br>        <span class="hljs-keyword">if</span> (user_agent_info.indexOf(agents[v]) &gt; <span class="hljs-number">0</span>) &#123;<br>            flag = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后点击“保存并部署“，然后你可以改一个你喜欢的名称</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210328193133.png" alt="image-20210328193133570"></p><p>自定义域名可以参考这篇文章</p><p><a href="https://vircloud.net/exp/cf-worker-domain.html">https://vircloud.net/exp/cf-worker-domain.html</a></p><p>演示站点</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>huangepan.hgnet.workers.dev/<br></code></pre></td></tr></table></figure><p>好了，快去实践吧！</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云盘 </tag>
            
            <tag> OneManager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GiWiFI校园网认证过程分析与模拟登录</title>
      <link href="2021/03/22/GiWiFI%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%AE%A4%E8%AF%81%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90%E4%B8%8E%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/"/>
      <url>2021/03/22/GiWiFI%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%AE%A4%E8%AF%81%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90%E4%B8%8E%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>GiWiFi是由上海寰创网络科技有限公司基于<a href="http://www.wifidog.org/">wifidog</a>项目开发的一套网关管理系统, 通常被应用于校园网行业.</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210322234723.png" alt="img"></p><h1 id="认证机制"><a href="#认证机制" class="headerlink" title="认证机制"></a>认证机制</h1><p>由于GiWiFi是基于wifidog项目的, 所以大致流程也差不多</p><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><h3 id="用户上线"><a href="#用户上线" class="headerlink" title="用户上线"></a>用户上线</h3><ol><li>用户访问网络，通过iptables将未认证的用户dnat到wifidog进程，wifidog通过307报文将用户重定向到认证服务器</li><li>用户打开认证服务器登录页面，输入用户名密码，发送认证请求</li><li>认证成功的话服务器会发送302报文，携带token信息重定向到wifidog页面。认证失败的话会返回失败页面</li><li>用户携带token信息向wifidog发起认证请求，wifidog再向认证服务器发起请求，认证成功后授权，并将用户重定向到成功页面</li></ol><h3 id="保活和下线"><a href="#保活和下线" class="headerlink" title="保活和下线"></a>保活和下线</h3><ol><li>wifidog会定时向认证服务器发送保活消息(相当于<strong>心跳</strong>)</li><li>当用户主动请求下线后，wifidog此时并没有下线</li><li>当wifidog再次发起保活请求时，认证服务器会告诉它用户已下线，此时wifidog会将用户下线</li></ol><h1 id="网页登录"><a href="#网页登录" class="headerlink" title="网页登录"></a>网页登录</h1><p>客户端引导下载页对于不同的设备和系统使用了UA进行区分，经过测试，提供的客户端有Windows、macOS、iOS以及Android版本（果然Linux又被忽视了，显示的是Android版的下载按钮🌝）</p><p>由于对此类认证客户端的排斥和心理洁癖，我便开始寻找使用网页认证，甚至是使用脚本模拟认证的方法，果不其然，经过一番分析与搜寻，我找到了一些东西</p><h4 id="你藏得好深啊，登录框"><a href="#你藏得好深啊，登录框" class="headerlink" title="你藏得好深啊，登录框"></a>你藏得好深啊，登录框</h4><p>此前网页的认证过程为</p><ol><li>打开任意http页面后被劫持至<code>172.17.1.1:8062/redirect</code></li><li>返回307跳转至认证页</li><li>在认证页里输入账号密码登录认证</li><li>关闭认证页，一段时间内即可正常上网</li></ol><p>而现在跳转后仅显示客户端的下载按钮，直觉意识到这是一个专用于客户端引导下载的页面，真正的认证页仍另藏他处</p><p>事实正是如此，对比历史记录，现在的跳转页面的域名是<code>172.17.1.1</code>(校园网网关IP)，此前的认证页则是<code>http://login.gwifi.com.cn/cmps/admin.php/api/login/</code></p><h2 id="修改UA"><a href="#修改UA" class="headerlink" title="修改UA"></a>修改UA</h2><p>先修改UA为ipad（使用UA浏览器插件即可，或者浏览器里的自定义UA）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Mozilla</span>/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (iPad; CPU OS <span class="hljs-number">6</span>_<span class="hljs-number">0</span> like Mac OS X) AppleWebKit/<span class="hljs-number">536</span>.<span class="hljs-number">26</span> (KHTML, like Gecko) Version/<span class="hljs-number">6</span>.<span class="hljs-number">0</span> Mobile/<span class="hljs-number">10</span>A<span class="hljs-number">5376</span>e Safari/<span class="hljs-number">8536</span>.<span class="hljs-number">25</span><br></code></pre></td></tr></table></figure><p>将客户端引导下载页的URL参数粘贴到认证页的URL后并打开，就能看到之前的认证页了（单纯打开首页会显示It works! ，不加任何参数打开的话则是跳转至新浪首页，阿巴阿巴~）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>login.gwifi.com.cn<span class="hljs-regexp">/cmps/</span>admin.php<span class="hljs-regexp">/api/</span>login/?gw_address=<span class="hljs-number">172.17</span>.<span class="hljs-number">1.1</span>&amp;gw_port=<span class="hljs-number">8060</span>&amp;gw_id=GWIFI-zhongbeixinshang01&amp;ip=<span class="hljs-number">10.16</span>.<span class="hljs-number">100.174</span>&amp;mac=你的MAC地址<br></code></pre></td></tr></table></figure><p>认证页打开之后仍是一个大大的客户端下载按钮，但不要慌。打开审查元素就会发现，所有的登录框、重设密码框、注册框等都在，只是被隐藏掉了</p><p>去掉隐藏样式，正常输入账号密码登录即可，和之前的操作一模一样（登录后会跳转至百度首页，看来这两个页面是同一位鬼才写的🌝）</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210322234856.png" alt="image-20210322234856216"></p><h2 id="登录接口及参数分析"><a href="#登录接口及参数分析" class="headerlink" title="登录接口及参数分析"></a>登录接口及参数分析</h2><p>找到了登录框之后，就可以开始分析接口和参数了</p><p>直接看页面代码吧，写的挺乱的，好在未经过混淆，关键部分：</p><h3 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> loginAction  = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">params</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> btn = $(<span class="hljs-string">&quot;#first_button&quot;</span>);<br>    <span class="hljs-keyword">var</span> round = <span class="hljs-built_in">Math</span>.round(<span class="hljs-built_in">Math</span>.random()*<span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">var</span> form = $(<span class="hljs-string">&quot;#frmLogin&quot;</span>);<br>    $.ajax(&#123;<br>        url: <span class="hljs-string">&quot;/cmps/admin.php/api/loginaction?round=&quot;</span>+round,<br>        data: form.serialize(),<br>        type: <span class="hljs-string">&quot;post&quot;</span>,<br>        <span class="hljs-keyword">async</span>: <span class="hljs-literal">false</span>,<br>        dataType: <span class="hljs-string">&quot;json&quot;</span>,<br>        success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (data.status === <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">if</span>(data.data.reasoncode == <span class="hljs-string">&quot;44&quot;</span>)&#123;<br>                    params = getWechatParams(data);<br>                    <span class="hljs-comment">//showSelectMessage(params);</span><br>                    wechatAuth(params.okParams);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-built_in">window</span>.location.href = data.info;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                btn.removeAttr(<span class="hljs-string">&#x27;disabled&#x27;</span>);<br>                doFailedLogin(data,<span class="hljs-string">&quot;frmLogin&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到接口为<code>/cmps/admin.php/api/loginaction</code>，参数都在登录表单里：</p><p><em>关键部分已手动打码</em></p><table><thead><tr><th>参数名</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>access_type</td><td>2</td><td>作用未知</td></tr><tr><td>acsign</td><td>***</td><td>登录状态接口中的sign字段</td></tr><tr><td>btype</td><td>pc</td><td>猜测为平台类型</td></tr><tr><td>client_mac</td><td>***</td><td>客户端MAC</td></tr><tr><td>contact_phone</td><td>400-038-5858</td><td>服务电话</td></tr><tr><td>devicemode</td><td></td><td>默认空值，作用未知</td></tr><tr><td>gw_address</td><td>172.17.1.1</td><td>网关地址</td></tr><tr><td>gw_id</td><td>***</td><td>AP的SSID</td></tr><tr><td>gw_port</td><td>8060</td><td>网关端口</td></tr><tr><td>lastaccessurl</td><td></td><td>默认空值，作用未知</td></tr><tr><td>logout_reason</td><td>0</td><td>作用未知</td></tr><tr><td>mac</td><td>***</td><td>同client_mac</td></tr><tr><td>name</td><td>***</td><td>账号</td></tr><tr><td>online_time</td><td>0</td><td>猜测为在线时间，作用未知</td></tr><tr><td>page_time</td><td>1535509645</td><td>登录页时间戳</td></tr><tr><td>password</td><td>***</td><td>密码</td></tr><tr><td>sign</td><td>***</td><td>签名，可从登录表单中获取</td></tr><tr><td>station_cloud</td><td>login.gwifi.com.cn</td><td>作用未知</td></tr><tr><td>station_sn</td><td>***</td><td>猜测为基站ID</td></tr><tr><td>suggest_phone</td><td>400-038-5858</td><td>同contact_phone</td></tr><tr><td>url</td><td><a href="http://www.baidu.com/">http://www.baidu.com</a></td><td>登录成功后跳转的网站</td></tr><tr><td>user_agent</td><td></td><td>默认空值，作用未知</td></tr></tbody></table><p>观察后发现登录所需的大部分参数在认证页的URL参数里已经有了，剩下的有一部分已经在登录表单里填好了，另一部分需要从下文的登录状态接口中取到，将其组合起来后发送POST请求</p><p>登录成功后返回JSON数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;status&quot;</span>:<span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;info&quot;</span>:<span class="hljs-string">&quot;http://172.17.1.1:8060/wifidog/auth?token=***&amp;info=***&quot;</span>,<br>    <span class="hljs-attr">&quot;data&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;auth_verify&quot;</span>:<span class="hljs-number">1</span>,<br>        <span class="hljs-attr">&quot;reasoncode&quot;</span>:<span class="hljs-number">0</span>,<br>        <span class="hljs-attr">&quot;remain_time&quot;</span>:<span class="hljs-number">1053640</span>,<br>        <span class="hljs-attr">&quot;limit_time&quot;</span>:<span class="hljs-literal">null</span>,<br>        <span class="hljs-attr">&quot;cost_type&quot;</span>:<span class="hljs-number">4</span>,<br>        <span class="hljs-attr">&quot;serviceplan_id&quot;</span>:<span class="hljs-string">&quot;1357&quot;</span>,<br>        <span class="hljs-attr">&quot;is_share&quot;</span>:<span class="hljs-string">&quot;2&quot;</span>,<br>        <span class="hljs-attr">&quot;wechat_enable&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<br>        <span class="hljs-attr">&quot;bw_up&quot;</span>:<span class="hljs-string">&quot;2048&quot;</span>,<br>        <span class="hljs-attr">&quot;bw_down&quot;</span>:<span class="hljs-string">&quot;10240&quot;</span>,<br>        <span class="hljs-attr">&quot;ontrial&quot;</span>:<span class="hljs-number">0</span>,<br>        <span class="hljs-attr">&quot;need_complete_data&quot;</span>:<span class="hljs-literal">null</span>,<br>        <span class="hljs-attr">&quot;complete_data_url&quot;</span>:<span class="hljs-literal">null</span>,<br>        <span class="hljs-attr">&quot;permit_intranet&quot;</span>:<span class="hljs-number">2</span>,<br>        <span class="hljs-attr">&quot;permit_internet&quot;</span>:<span class="hljs-number">2</span>,<br>        <span class="hljs-attr">&quot;carrier_operator&quot;</span>:<span class="hljs-string">&quot;3&quot;</span>,<br>        <span class="hljs-attr">&quot;network_type&quot;</span>:<span class="hljs-string">&quot;2&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中的<code>info</code>字段的URL用作登录验证，使用GET请求就可以完成整个认证登录的流程了</p><p>登录失败的话<code>info</code>字段则会返回百度首页的URL，再次吐槽一下🌝</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;status&quot;</span>:<span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;info&quot;</span>:<span class="hljs-string">&quot;http:\/\/www.baidu.com&quot;</span>,<br>    <span class="hljs-attr">&quot;data&quot;</span>:<span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="登录状态接口"><a href="#登录状态接口" class="headerlink" title="登录状态接口"></a>登录状态接口</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">initData</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//获取终端信息</span><br>    $.ajax(&#123;<br>        url: <span class="hljs-string">&quot;http://172.17.1.1:8060/wifidog/get_auth_state?ip=***&amp;mac=***&amp;sign=***&amp;callback=***&quot;</span>,<br>        dataType:<span class="hljs-string">&#x27;jsonp&#x27;</span>,<br>        success: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;<br>            c = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;(&#x27;</span> + data.data + <span class="hljs-string">&#x27;)&#x27;</span>);<br>            <span class="hljs-keyword">if</span>(data.resultCode == <span class="hljs-number">0</span>)&#123;<br>                fixData(c);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">window</span>.top.location.href = <span class="hljs-string">&quot;http://www.baidu.com&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;,<br>        error:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;,<br>        cache: <span class="hljs-literal">false</span><br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>同样可以看到接口为<code>/wifidog/get_auth_state</code>，参数为IP、MAC、签名和回调函数名，其中的签名可以直接在页面表单里取到</p><p>返回结果为JSONP数据，提取为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;resultCode&quot;</span>:<span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;data&quot;</span>:<span class="hljs-string">&quot;&#123;&quot;</span>auth_state<span class="hljs-string">&quot;:2,&quot;</span>gw_id<span class="hljs-string">&quot;:&quot;</span>***<span class="hljs-string">&quot;,&quot;</span>access_type<span class="hljs-string">&quot;:&quot;</span><span class="hljs-number">2</span><span class="hljs-string">&quot;,&quot;</span>authStaType<span class="hljs-string">&quot;:&quot;</span><span class="hljs-number">0</span><span class="hljs-string">&quot;,&quot;</span>station_sn<span class="hljs-string">&quot;:&quot;</span>***<span class="hljs-string">&quot;,&quot;</span>client_mac<span class="hljs-string">&quot;:&quot;</span>***<span class="hljs-string">&quot;,&quot;</span>online_time<span class="hljs-string">&quot;:11,&quot;</span>logout_reason<span class="hljs-string">&quot;:7,&quot;</span>contact_phone<span class="hljs-string">&quot;:&quot;</span><span class="hljs-number">400</span><span class="hljs-number">-038</span><span class="hljs-number">-5858</span><span class="hljs-string">&quot;,&quot;</span>suggest_phone<span class="hljs-string">&quot;:&quot;</span><span class="hljs-number">400</span><span class="hljs-number">-038</span><span class="hljs-number">-5858</span><span class="hljs-string">&quot;,&quot;</span>station_cloud<span class="hljs-string">&quot;:&quot;</span>login.gwifi.com.cn<span class="hljs-string">&quot;,&quot;</span>orgId<span class="hljs-string">&quot;:&quot;</span><span class="hljs-number">899</span><span class="hljs-string">&quot;,&quot;</span>sign<span class="hljs-string">&quot;:&quot;</span>***<span class="hljs-string">&quot;&#125;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中的<code>auth_state</code>字段值为<code>2</code>时为正常登录状态</p><p>观察登录成功后执行的操作，是替换了部分表单数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fixData</span>(<span class="hljs-params">data</span>) </span>&#123;<br>    $(<span class="hljs-string">&quot;.gw_id&quot;</span>).val(data.gw_id);<br>    $(<span class="hljs-string">&quot;.access_type&quot;</span>).val(data.access_type);<br>    $(<span class="hljs-string">&quot;.station_sn&quot;</span>).val(data.station_sn);<br>    $(<span class="hljs-string">&quot;.client_mac&quot;</span>).val(data.client_mac);<br>    $(<span class="hljs-string">&quot;.online_time&quot;</span>).val(data.online_time);<br>    $(<span class="hljs-string">&quot;.logout_reason&quot;</span>).val(data.logout_reason);<br>    $(<span class="hljs-string">&quot;.contact_phone&quot;</span>).val(data.contact_phone);<br>    $(<span class="hljs-string">&quot;.suggest_phone&quot;</span>).val(data.suggest_phone);<br>    $(<span class="hljs-string">&quot;.station_cloud&quot;</span>).val(data.station_cloud);<br>    $(<span class="hljs-string">&quot;.acsign&quot;</span>).val(data.sign);<br>&#125;<br></code></pre></td></tr></table></figure><p>进行模拟登录时也应一一替换</p><p><em>需要注意的是参数<code>callback</code>是必需的，不然将不会返回<code>sign</code>字段值</em></p><h3 id="登出接口"><a href="#登出接口" class="headerlink" title="登出接口"></a>登出接口</h3><p>登出功能在客户端引导下载页上，接口及参数为<code>http://172.17.1.1/getApp.htm?action=logout</code></p><p>返回数据为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;resultCode&quot;</span>:<span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;data&quot;</span>:[]<br>&#125;<br></code></pre></td></tr></table></figure><p>其中<code>resultCode</code>字段值为<code>0</code>时登出成功</p><h2 id="模拟登录脚本"><a href="#模拟登录脚本" class="headerlink" title="模拟登录脚本"></a>模拟登录脚本</h2><p>现在登录相关接口和所需参数已经了解，可以开始写模拟登录了</p><p>这里使用Python来实现，理论上对所有GiWiFi系统通用</p><p>这里需要事先安装好Python以及requests、netifaces库</p><p>你可能会用到<a href="https://huangenet.lanzous.com/iMFn0n7nnvc">Visualcppbuildtools</a>（安装C++插件）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> netifaces<br><span class="hljs-keyword">from</span> getpass <span class="hljs-keyword">import</span> getpass<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse, parse_qs<br><br>SCRIPT_VERSION = <span class="hljs-string">&quot;1.0.3.2&quot;</span><br><br>HEADERS = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (iPad; CPU OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5376e Safari/8536.25&#x27;</span>,<br>    <span class="hljs-string">&#x27;accept-encoding&#x27;</span>: <span class="hljs-string">&#x27;gzip, deflate, br&#x27;</span>,<br>    <span class="hljs-string">&#x27;accept-language&#x27;</span>: <span class="hljs-string">&#x27;zh-CN,zh-TW;q=0.8,zh;q=0.6,en;q=0.4,ja;q=0.2&#x27;</span>,<br>    <span class="hljs-string">&#x27;cache-control&#x27;</span>: <span class="hljs-string">&#x27;max-age=0&#x27;</span><br>&#125;<br><br>PARSER = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, <br>    description=<span class="hljs-string">&#x27;GiWiFi认证登录脚本&#x27;</span>, <br>    epilog=<span class="hljs-string">&#x27;(c) 2018 journey.ad&#x27;</span>)<br>PARSER.add_argument(<span class="hljs-string">&#x27;-g&#x27;</span>, <span class="hljs-string">&#x27;--gateway&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;网关IP&#x27;</span>)<br>PARSER.add_argument(<span class="hljs-string">&#x27;-u&#x27;</span>, <span class="hljs-string">&#x27;--username&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;用户名&#x27;</span>)<br>PARSER.add_argument(<span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;--password&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;密码&#x27;</span>)<br>PARSER.add_argument(<span class="hljs-string">&#x27;-q&#x27;</span>, <span class="hljs-string">&#x27;--quit&#x27;</span>, action=<span class="hljs-string">&#x27;store_true&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;登出&#x27;</span>)<br>PARSER.add_argument(<span class="hljs-string">&#x27;-d&#x27;</span>, <span class="hljs-string">&#x27;--daemon&#x27;</span>, action=<span class="hljs-string">&#x27;store_true&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;在后台守护运行&#x27;</span>)<br>PARSER.add_argument(<span class="hljs-string">&#x27;-v&#x27;</span>, <span class="hljs-string">&#x27;--verbose&#x27;</span>, action=<span class="hljs-string">&#x27;store_true&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;额外输出一些技术性信息&#x27;</span>)<br>PARSER.add_argument(<span class="hljs-string">&#x27;-V&#x27;</span>, <span class="hljs-string">&#x27;--version&#x27;</span>, action=<span class="hljs-string">&#x27;version&#x27;</span>, <br>        version=<span class="hljs-string">&#x27;giwifi-auth-helper &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(SCRIPT_VERSION))<br><br>CONFIG = PARSER.parse_args()<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> CONFIG.quit:<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> CONFIG.gateway:<br>        CONFIG.gateway = netifaces.gateways()[<span class="hljs-string">&#x27;default&#x27;</span>][netifaces.AF_INET][<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> CONFIG.password:<br>            CONFIG.gateway = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入网关地址(%s):&#x27;</span> % (CONFIG.gateway)) <span class="hljs-keyword">or</span> CONFIG.gateway<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> CONFIG.username:<br>        CONFIG.username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入上网账号:&#x27;</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> CONFIG.password:<br>        CONFIG.password = getpass(<span class="hljs-string">&#x27;请输入账号密码:&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> CONFIG.gateway:<br>        CONFIG.gateway = netifaces.gateways()[<span class="hljs-string">&#x27;default&#x27;</span>][netifaces.AF_INET][<span class="hljs-number">0</span>]<br>        CONFIG.gateway = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入网关地址(%s):&#x27;</span> % (CONFIG.gateway)) <span class="hljs-keyword">or</span> CONFIG.gateway<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    logcat(<span class="hljs-string">&#x27;正在获取网关信息…&#x27;</span>)<br><br>    <span class="hljs-keyword">try</span>:<br>        authUrl = requests.get(<span class="hljs-string">&#x27;http://%s:8062/redirect&#x27;</span> % (CONFIG.gateway), timeout=<span class="hljs-number">5</span>).url<br>        authParmas = &#123;k: v[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> parse_qs(urlparse(authUrl).query).items()&#125;<br><br>        loginPage = requests.get(<span class="hljs-string">&#x27;http://login.gwifi.com.cn/cmps/admin.php/api/login/?&#x27;</span> + urlparse(authUrl).query, headers=HEADERS, timeout=<span class="hljs-number">5</span>).text<br><br>        pagetime = re.search(<span class="hljs-string">r&#x27;name=&quot;page_time&quot; value=&quot;(.*?)&quot;&#x27;</span>, loginPage).group(<span class="hljs-number">1</span>)<br>        sign = re.search(<span class="hljs-string">r&#x27;name=&quot;sign&quot; value=&quot;(.*?)&quot;&#x27;</span>, loginPage).group(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">except</span> requests.exceptions.ConnectionError:<br>        logcat(<span class="hljs-string">&#x27;连接失败，请检查网关地址是否正确&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-keyword">except</span> requests.exceptions.Timeout:<br>        logcat(<span class="hljs-string">&#x27;连接超时，可能已超出上网区间&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-keyword">except</span> AttributeError:<br>        logcat(<span class="hljs-string">&#x27;解析失败，可能网关设备重启或系统已更新&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    authState = getAuthState(authParmas, sign)<br><br>    <span class="hljs-keyword">if</span> CONFIG.quit:<br>        logout(authParmas)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> authState:<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> authState[<span class="hljs-string">&#x27;auth_state&#x27;</span>] == <span class="hljs-number">2</span>:<br>            printStatus(authParmas, authState)<br>            logcat(<span class="hljs-string">&#x27;你已登录，无需再次登录&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            data = &#123;<br>                <span class="hljs-string">&#x27;access_type&#x27;</span>: authState[<span class="hljs-string">&#x27;access_type&#x27;</span>],<br>                <span class="hljs-string">&#x27;acsign&#x27;</span>: authState[<span class="hljs-string">&#x27;sign&#x27;</span>],<br>                <span class="hljs-string">&#x27;btype&#x27;</span>: <span class="hljs-string">&#x27;pc&#x27;</span>,<br>                <span class="hljs-string">&#x27;client_mac&#x27;</span>: authState[<span class="hljs-string">&#x27;client_mac&#x27;</span>],<br>                <span class="hljs-string">&#x27;contact_phone&#x27;</span>: <span class="hljs-string">&#x27;400-038-5858&#x27;</span>,<br>                <span class="hljs-string">&#x27;devicemode&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>                <span class="hljs-string">&#x27;gw_address&#x27;</span>: authParmas[<span class="hljs-string">&#x27;gw_address&#x27;</span>],<br>                <span class="hljs-string">&#x27;gw_id&#x27;</span>: authParmas[<span class="hljs-string">&#x27;gw_id&#x27;</span>],<br>                <span class="hljs-string">&#x27;gw_port&#x27;</span>: authParmas[<span class="hljs-string">&#x27;gw_port&#x27;</span>],<br>                <span class="hljs-string">&#x27;lastaccessurl&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>                <span class="hljs-string">&#x27;logout_reason&#x27;</span>: authState[<span class="hljs-string">&#x27;logout_reason&#x27;</span>],<br>                <span class="hljs-string">&#x27;mac&#x27;</span>: authParmas[<span class="hljs-string">&#x27;mac&#x27;</span>],<br>                <span class="hljs-string">&#x27;name&#x27;</span>: CONFIG.username,<br>                <span class="hljs-string">&#x27;online_time&#x27;</span>: authState[<span class="hljs-string">&#x27;online_time&#x27;</span>],<br>                <span class="hljs-string">&#x27;page_time&#x27;</span>: pagetime,<br>                <span class="hljs-string">&#x27;password&#x27;</span>: CONFIG.password,<br>                <span class="hljs-string">&#x27;sign&#x27;</span>: sign,<br>                <span class="hljs-string">&#x27;station_cloud&#x27;</span>: <span class="hljs-string">&#x27;login.gwifi.com.cn&#x27;</span>,<br>                <span class="hljs-string">&#x27;station_sn&#x27;</span>: authState[<span class="hljs-string">&#x27;station_sn&#x27;</span>],<br>                <span class="hljs-string">&#x27;suggest_phone&#x27;</span>: <span class="hljs-string">&#x27;400-038-5858&#x27;</span>,<br>                <span class="hljs-string">&#x27;url&#x27;</span>: <span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span>,<br>                <span class="hljs-string">&#x27;user_agent&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> CONFIG.verbose:<br>                logcat(data)<br><br>            result = login(data)<br>            <span class="hljs-keyword">if</span> result[<span class="hljs-string">&#x27;status&#x27;</span>]:<br>                authState = getAuthState(authParmas, sign)<br>                printStatus(authParmas, authState)<br><br>                <span class="hljs-keyword">if</span> authState[<span class="hljs-string">&#x27;auth_state&#x27;</span>] == <span class="hljs-number">2</span>:<br>                    logcat(<span class="hljs-string">&#x27;认证成功&#x27;</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    logcat(<span class="hljs-string">&#x27;认证失败&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                logcat(<span class="hljs-string">&#x27;认证失败，提示信息：%s&#x27;</span> % (result[<span class="hljs-string">&#x27;info&#x27;</span>]))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span>(<span class="hljs-params">data</span>):</span><br>    logcat(<span class="hljs-string">&#x27;正在尝试认证…&#x27;</span>)<br><br>    <span class="hljs-keyword">try</span>:<br>        resp = json.loads(requests.post(<span class="hljs-string">&#x27;http://login.gwifi.com.cn/cmps/admin.php/api/loginaction&#x27;</span>, data=data, timeout=<span class="hljs-number">5</span>).text)<br>        result = &#123;<br>            <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-literal">False</span>,<br>            <span class="hljs-string">&#x27;info&#x27;</span>: <span class="hljs-literal">None</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> CONFIG.verbose:<br>            logcat(resp)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;wifidog/auth&#x27;</span> <span class="hljs-keyword">in</span> resp[<span class="hljs-string">&#x27;info&#x27;</span>]:<br>            requests.get(resp[<span class="hljs-string">&#x27;info&#x27;</span>])<br>            result[<span class="hljs-string">&#x27;status&#x27;</span>] = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            result[<span class="hljs-string">&#x27;info&#x27;</span>] = resp[<span class="hljs-string">&#x27;info&#x27;</span>]<br><br>    <span class="hljs-keyword">except</span> requests.exceptions.Timeout:<br>        logcat(<span class="hljs-string">&#x27;连接超时，可能已超出上网区间&#x27;</span>)<br>        <br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-keyword">return</span> result<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">logout</span>(<span class="hljs-params">authParmas</span>):</span><br>    <span class="hljs-keyword">try</span>:<br>        resp = json.loads(requests.get(<span class="hljs-string">&#x27;http://%s/getApp.htm?action=logout&#x27;</span> % (authParmas[<span class="hljs-string">&#x27;gw_address&#x27;</span>])).text)<br>        <br>    <span class="hljs-keyword">except</span> requests.exceptions.Timeout:<br>        logcat(<span class="hljs-string">&#x27;连接超时，可能已超出上网区间&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-keyword">if</span> resp[<span class="hljs-string">&#x27;resultCode&#x27;</span>] == <span class="hljs-number">0</span>:<br>        logcat(<span class="hljs-string">&#x27;下线成功&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        logcat(<span class="hljs-string">&#x27;下线失败&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getAuthState</span>(<span class="hljs-params">authParmas, sign</span>):</span><br>    <span class="hljs-keyword">try</span>:<br>        params = &#123;<br>            <span class="hljs-string">&#x27;ip&#x27;</span>: authParmas[<span class="hljs-string">&#x27;ip&#x27;</span>],<br>            <span class="hljs-string">&#x27;mac&#x27;</span>: authParmas[<span class="hljs-string">&#x27;mac&#x27;</span>],<br>            <span class="hljs-string">&#x27;sign&#x27;</span>: sign,<br>            <span class="hljs-string">&#x27;callback&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;<br>    <br>        resp = json.loads(requests.get(<span class="hljs-string">&#x27;http://%s:%s/wifidog/get_auth_state&#x27;</span> % (authParmas[<span class="hljs-string">&#x27;gw_address&#x27;</span>], authParmas[<span class="hljs-string">&#x27;gw_port&#x27;</span>]), params=params, timeout=<span class="hljs-number">5</span>).text[<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>])<br>            <br>    <span class="hljs-keyword">except</span> KeyError:<br>        logcat(<span class="hljs-string">&#x27;所需参数不存在&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">except</span> requests.exceptions.Timeout:<br>        logcat(<span class="hljs-string">&#x27;连接超时，可能已超出上网区间&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">if</span> CONFIG.verbose:<br>        logcat(resp)<br><br>    <span class="hljs-keyword">if</span> resp[<span class="hljs-string">&#x27;resultCode&#x27;</span>] == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> json.loads(resp[<span class="hljs-string">&#x27;data&#x27;</span>])<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printStatus</span>(<span class="hljs-params">authParmas, authState</span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> CONFIG.verbose:<br>        clear()<br><br>    print(<br><span class="hljs-string">&#x27;&#x27;&#x27;--------------------------------------------</span><br><span class="hljs-string">SSID:             %s</span><br><span class="hljs-string">AP MAC:           %s</span><br><span class="hljs-string">GateWay:          %s</span><br><span class="hljs-string">IP:               %s</span><br><span class="hljs-string">MAC:              %s</span><br><span class="hljs-string">Station SN:       %s</span><br><span class="hljs-string">Logged:           %s</span><br><span class="hljs-string">--------------------------------------------&#x27;&#x27;&#x27;</span><br>    % (<br>            authParmas[<span class="hljs-string">&#x27;gw_id&#x27;</span>],<br>            authParmas[<span class="hljs-string">&#x27;apmac&#x27;</span>],<br>            authParmas[<span class="hljs-string">&#x27;gw_address&#x27;</span>],<br>            authParmas[<span class="hljs-string">&#x27;ip&#x27;</span>],<br>            authParmas[<span class="hljs-string">&#x27;mac&#x27;</span>],<br>            authState[<span class="hljs-string">&#x27;station_sn&#x27;</span>],<br>            <span class="hljs-string">&#x27;yes&#x27;</span> <span class="hljs-keyword">if</span>(authState[<span class="hljs-string">&#x27;auth_state&#x27;</span>] == <span class="hljs-number">2</span>) <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;no&#x27;</span><br>        )<br>    )<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clear</span>():</span><br>    os.system(<span class="hljs-string">&#x27;cls&#x27;</span> <span class="hljs-keyword">if</span> os.name == <span class="hljs-string">&#x27;nt&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;clear&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">logcat</span>(<span class="hljs-params">msg, level=<span class="hljs-string">&#x27;I&#x27;</span></span>):</span><br>    print(<span class="hljs-string">&#x27;%s %s: %s&#x27;</span> % (time.ctime().split(<span class="hljs-string">&#x27; &#x27;</span>)[-<span class="hljs-number">2</span>], level, msg))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">if</span> CONFIG.daemon:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            main()<br>            time.sleep(<span class="hljs-number">30</span>)<br>    <span class="hljs-keyword">else</span>:<br>        main()<br>        <span class="hljs-built_in">input</span>()<br></code></pre></td></tr></table></figure><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210322234221.png" alt="image-20210322234221276"></p><p>本文参考：</p><p>1.<a href="https://nocilol.me/archives/lab/giwifi-auth-process-analysis-and-simulation-login/">https://nocilol.me/archives/lab/giwifi-auth-process-analysis-and-simulation-login/</a></p><p>2.<a href="https://github.com/icepie/giwifi-gear/wiki/GiWiFi-%E5%88%86%E6%9E%90">https://github.com/icepie/giwifi-gear/wiki/GiWiFi-%E5%88%86%E6%9E%90</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Giwifi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShadowsocksR一键安装脚本</title>
      <link href="2021/03/13/ShadowsocksR%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/"/>
      <url>2021/03/13/ShadowsocksR%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>目前逗比网站逗比根据地（doub.io）已经关站无法打开，其它类似名称网站均为山寨版本。但是 doubi 的一键安装脚本仍然可以正常使用。<br>目前网上的各个 ShadowsocksR 脚本基本都是只有 安装/启动/重启 等基础功能，对于小白来说还是不够简单方便，既然是一键脚本，那么就要尽可能地简单</p><h3 id="逗比的SSR脚本特点"><a href="#逗比的SSR脚本特点" class="headerlink" title="逗比的SSR脚本特点"></a>逗比的SSR脚本特点</h3><ul><li>支持 限制 用户速度</li><li>支持 限制 端口设备数</li><li>支持 显示 当前连接IP</li><li>支持 显示 SS/SSR连接 二维码</li><li>支持 切换管理 单/多端口</li><li>支持 一键安装 锐速</li><li>支持 一键安装 BBR</li><li>支持 一键封禁 垃圾邮件(SMAP)/BT/PT</li></ul><h3 id="安装环境要求"><a href="#安装环境要求" class="headerlink" title="安装环境要求"></a>安装环境要求</h3><p>支持架构：Openvz、KVM、Xen<br>系统支持: CentOS6+ / Debian6+ / Ubuntu14+</p><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>我一般使用 <code>aes-256-ctr + auth_aes128_md5 + tls1.2_ticket_fastauth</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -N --no-check-certificate https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/ToyoDAdoubi/</span>doubi<span class="hljs-regexp">/master/</span>ssr.sh &amp;&amp; chmod x ssr.sh &amp;&amp; bash ssr.sh<br></code></pre></td></tr></table></figure><h3 id="安装锐速及BBR"><a href="#安装锐速及BBR" class="headerlink" title="安装锐速及BBR"></a>安装锐速及BBR</h3><p>如果你的VPS服务器 <code>不是OpenVZ虚拟</code>，而是 KVM/Xen，那么可以在 SSR 安装完毕后，接着安装 锐速/BBR 对网络进行加速。<br>重新运行一键安装脚本 <code>bash ssr.sh</code>，根据提示选项即可</p><h3 id="各平台客户端下载"><a href="#各平台客户端下载" class="headerlink" title="各平台客户端下载"></a>各平台客户端下载</h3><ol><li>Windows客户端下载地址：<br><a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases">https://github.com/shadowsocksrr/shadowsocksr-csharp/releases</a></li><li>Mac客户端下载地址：<br><a href="https://github.com/qinyuhang/ShadowsocksX-NG-R/releases">https://github.com/qinyuhang/ShadowsocksX-NG-R/releases</a></li><li>Linux客户端下载地址：<br><a href="https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation">https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation</a></li><li>Android/安卓客户端下载地址：<br><a href="https://github.com/shadowsocksrr/shadowsocksr-android/releases">https://github.com/shadowsocksrr/shadowsocksr-android/releases</a></li><li>iOS/iPad/苹果客户端可使用 Wingy &amp; Shadowrocket 或者 Potatso Lite</li></ol><h3 id="免费SSR订阅地址"><a href="#免费SSR订阅地址" class="headerlink" title="免费SSR订阅地址"></a>免费SSR订阅地址</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/ssrsub/</span>ssr<span class="hljs-regexp">/master/</span>ssrsub<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>ssr.hgnet.workers.dev/<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ShadowsocksR </tag>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java开发环境的搭建</title>
      <link href="2021/03/11/Java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
      <url>2021/03/11/Java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>开发Java应用需要部署Java的开发环境，就像做饭需要厨房这个环境，Java的jdk就相当于做饭的工具。</p><h2 id="1-平台"><a href="#1-平台" class="headerlink" title="1.平台"></a>1.平台</h2><p>Java SE  ：Java标准版</p><p>Java EE ：Java企业版</p><p>Java ME：为机顶盒、移动电话和PDA之类嵌入式消费电子设备提供的Java语言平台</p><h2 id="2-安装Java-SE平台"><a href="#2-安装Java-SE平台" class="headerlink" title="2.安装Java SE平台"></a>2.安装Java SE平台</h2><p>下载地址：</p><p><a href="https://www.oracle.com/java/technologies/javase-downloads.html">https://www.oracle.com/java/technologies/javase-downloads.html</a></p><p>选择适合你的JDK，我这里下载的是Windows x64版本（如果你是Linux或者Mac系统下载对应版本即可）</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210311194940.png" alt="image-20210311194940249"></p><p>下载完毕，开始安装….</p><p>点击“安装包”，选择“<strong>下一步</strong>”</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210311194738.png" alt="image-20210311194738316"></p><p>这里我们更改一下安装位置（方便后面配置系统变量）</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210311195118.png" alt="image-20210311195118348"></p><p>比如我这里修改成D盘的位置</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210311195222.png" alt="image-20210311195222259"></p><p>然后点击“<strong>下一步</strong>”，就开始安装了</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210311195330.png" alt="image-20210311195330732"></p><p>这样软件就安装好了</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210311195406.png" alt="image-20210311195405994"></p><h4 id="配置系统变量"><a href="#配置系统变量" class="headerlink" title="配置系统变量"></a>配置系统变量</h4><p>在<strong>此电脑</strong>那里右键选择“<strong>属性</strong>”</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210311195948.png" alt="image-20210311195948038"></p><p>在右边那里选择“<strong>高级系统设置</strong>”，然后选择“<strong>环境变量</strong>”</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210311195848.png" alt="image-20210311195848228"></p><h3 id="1-设置系统变量JAVA-HOME"><a href="#1-设置系统变量JAVA-HOME" class="headerlink" title="1.设置系统变量JAVA_HOME"></a>1.设置系统变量JAVA_HOME</h3><p>在“<strong>系统变量</strong>”那里点击“<strong>新建</strong>”</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210311200148.png" alt="image-20210311200148258"></p><p>变量名填</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">JAV<span class="hljs-built_in">A_HOME</span><br></code></pre></td></tr></table></figure><p>变量值填写你的JDK安装位置</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210311200450.png" alt="image-20210311200450935"></p><h3 id="2-设置系统环境Path的设置"><a href="#2-设置系统环境Path的设置" class="headerlink" title="2.设置系统环境Path的设置"></a>2.设置系统环境Path的设置</h3><p>选中变量“<strong>Path</strong>”，点击“<strong>编辑</strong>”</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210311200845.png" alt="image-20210311200845227"></p><p>在弹出来的对话框中选择“<strong>新建</strong>”，填入</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-meta">%</span>JAVA_HOME<span class="hljs-meta">%</span>/bi<span class="hljs-symbol">n</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210311201103.png" alt="image-20210311201103059"></p><h3 id="3-设置系统环境classpath变量"><a href="#3-设置系统环境classpath变量" class="headerlink" title="3.设置系统环境classpath变量"></a>3.设置系统环境classpath变量</h3><p>新建系统变量</p><p>变量名填</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">CLASSPATH</span><br></code></pre></td></tr></table></figure><p>变量值填</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">.;%JAVA_HOME%<span class="hljs-regexp">/lib/</span>dt.jar;%JAVA_HOME%<span class="hljs-regexp">/lib/</span>tools.jar<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210311201923.png" alt="image-20210311201923848"></p><h2 id="3-测试是否安装成功"><a href="#3-测试是否安装成功" class="headerlink" title="3.测试是否安装成功"></a>3.测试是否安装成功</h2><p>1.点击“<strong>Win+R</strong>”，输入“<strong>CMD</strong>”</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210311202724.png" alt="image-20210311202724748"></p><p>然后输入“<strong>javac</strong>”,会出现下面的一大堆东西，即是安装成功</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210311202827.png" alt="image-20210311202826947"></p><p>如果出现“<strong>javac不是内部或外部命令，也不是可运行的程序</strong><br><strong>或批处理文件。</strong>”你就需要重新安装或者重新设置环境变量</p><p>2.写一个<strong>HelloWord</strong>程序</p><p>我这里是使用<strong>VsCode</strong>，你可以使用notepad++或其他编辑器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mian</span><span class="hljs-params">(String args[])</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello，World！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后保存为“<strong>Hello.java</strong>”</p><p>然后使用CMD 进入“<strong>Hello.java</strong>”所在路径（你可以在.Java文件那里右键选择属性查看）</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210311203705.png" alt="image-20210311203705352"></p><p>使用“cd 文件路径”命令进入</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210311203804.png" alt="image-20210311203804581"></p><p><strong>编译.java文件</strong></p><p>在CMD输入</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">javac <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Hello</span>.</span></span>java<br></code></pre></td></tr></table></figure><p>如果提示“<strong>错误: 编码 GBK 的不可映射字符</strong>”，则输入</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">javac -encoding UTF-<span class="hljs-number">8</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Hello</span>.</span></span>java<br></code></pre></td></tr></table></figure><p>编译成功就会多一个名为“<strong>Hello.class</strong>”的文件</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210311204822.png" alt="image-20210311204822848"></p><p><strong>运行</strong></p><p>在CMD输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">java Hello</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210311205345.png" alt="image-20210311205345018"></p><p>如果提示</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">错误: 在类 Hello 中找不到 <span class="hljs-selector-tag">main</span> 方法, 请将 <span class="hljs-selector-tag">main</span> 方法定义为:<br>   public static void <span class="hljs-selector-tag">main</span>(String<span class="hljs-selector-attr">[]</span> args)<br>否则 JavaFX 应用程序类必须扩展javafx<span class="hljs-selector-class">.application</span>.Application<br></code></pre></td></tr></table></figure><p>则修改.java文件为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello，World！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重新编译并运行即可</p><p>是不是很简单呢？嘿嘿~</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 开发环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Cloudflare设置网站301重定向</title>
      <link href="2021/03/01/%E4%BD%BF%E7%94%A8Cloudflare%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%AB%99301%E9%87%8D%E5%AE%9A%E5%90%91/"/>
      <url>2021/03/01/%E4%BD%BF%E7%94%A8Cloudflare%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%AB%99301%E9%87%8D%E5%AE%9A%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>301 是 HTTP 协议中的一个状态码，表示该网页已经永久迁移到新位置。</p><p>我们经常在更换域名时，使用 301 重定向来把旧域名永久转移到新域名上去，它可以同时把我们旧域名的流量和权重同时转移到新域名上去，对搜索引擎比较友好，避免了更换域名所带来的流量丢失。</p><h2 id="适用情况"><a href="#适用情况" class="headerlink" title="适用情况"></a>适用情况</h2><ul><li>更换域名，将旧域名指向新域名；</li><li>网址规范化，将a.com、<a href="http://www.a.com、blog.a.com等访问地址全部指向a.com一个地址,集中流量和权重;/">www.a.com、blog.a.com等访问地址全部指向a.com一个地址，集中流量和权重；</a></li><li>将指向过期、无效网页的链接重定向至正确地址；</li><li>http重定向到https；</li><li>中文域名指向英文域名。</li></ul><h2 id="使用-Cloudflare-进行重定向-下面介绍下如何使用-Cloudflare-的页面规则对网站进行-301-重定向。"><a href="#使用-Cloudflare-进行重定向-下面介绍下如何使用-Cloudflare-的页面规则对网站进行-301-重定向。" class="headerlink" title="使用 Cloudflare 进行重定向 下面介绍下如何使用 Cloudflare 的页面规则对网站进行 301 重定向。"></a><strong>使用 Cloudflare 进行重定向 下面介绍下如何使用 Cloudflare 的页面规则对网站进行 301 重定向。</strong></h2><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p>登录 <a href="https://www.cloudflare.com/">Cloudflare</a> 的控制面板，进入 “Page Rules” 页面，创建一条页面规则。</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210301124114.png"></p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>添加规则 “Forwarding URL”，类型 “301 – Permanent Redirect”</p><p>1.统一跳转，将<code>abc.com</code>的所有页面都无差别的重定向至<code>newsite.com</code>首页。</p><p><strong>写法：</strong><code>abc.com/*</code> 301 <code>newsite.com</code></p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210301124147.png"></p><p>2.对应跳转，即 <code>abc.com/b.html</code> 重定向至 <code>newsite.com/b.html</code>，<code>abc.com/about.html </code>重定向至 <code>newsite.com/about.html</code>，保持原网址结构。</p><p><strong>写法：</strong><code>abc.com/*</code> 301 <code>newsite.com/$1</code></p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210301124224.png"></p><p>3.HTTP 重定向至 HTTPS</p><p>Cloudflare 提供了 HTTPS 重定向选项，直接选择 “Always Use HTTPS” 即可。</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210301124248.png"></p><p>官方文档：<a href="https://support.cloudflare.com/hc/en-us/articles/218411427#redirects">Forwarding (URL Redirection)</a></p><h2 id="301重定向检测"><a href="#301重定向检测" class="headerlink" title="301重定向检测"></a>301重定向检测</h2><p><strong>设置好我们可以通过检测工具查看重定向结果。</strong></p><ul><li><a href="https://httpstatus.io/">Bulk URL HTTP Status Code, Header &amp; Redirect Checker</a></li><li><a href="http://tool.chinaz.com/pagestatus/">HTTP状态查询 – 站长工具</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210301124321.png"></p><h2 id="301-和-302-的区别"><a href="#301-和-302-的区别" class="headerlink" title="301 和 302 的区别"></a>301 和 302 的区别</h2><p><strong>重定向选项中除了 301 还有一个 302 重定向，但是不建议使用。</strong></p><p><strong>301：永久重定向（推荐）</strong></p><ul><li>永久转移地址，不会恢复原地址；</li><li>对搜素引擎友好，可以转移流量和权重。</li></ul><p><strong>302：临时重定向（不推荐）</strong></p><ul><li>临时性转移，会恢复原地址；</li><li>影响搜索引擎优化。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>当然，进行301重定向还可以通过更改 .htaccess 文件等方法，也很方便。如果正好在使用 Cloudflare 的话，可以通过本文的方法进行重定向，使用 Cloudflare 提供好的选项直接设置，不涉及任何代码。</p><p>via.<a href="https://go2think.com/301-redirect-by-cloudflare/">https://go2think.com/301-redirect-by-cloudflare/</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 301 </tag>
            
            <tag> Cloudflare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用DockerHub仓库搭建无限容量不限速的网盘</title>
      <link href="2021/02/26/%E5%88%A9%E7%94%A8DockerHub%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA%E6%97%A0%E9%99%90%E5%AE%B9%E9%87%8F%E4%B8%8D%E9%99%90%E9%80%9F%E7%9A%84%E7%BD%91%E7%9B%98/"/>
      <url>2021/02/26/%E5%88%A9%E7%94%A8DockerHub%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA%E6%97%A0%E9%99%90%E5%AE%B9%E9%87%8F%E4%B8%8D%E9%99%90%E9%80%9F%E7%9A%84%E7%BD%91%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<p>很多服务商都提供了免费的Docker容器镜像服务，国内的也有一些，比如，阿里云，华为云等。今天要介绍的就是利用免费的Docker容器镜像搭建一个无限容量不限速的网盘。</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210226111300.png"></p><p><strong>友情提示：本文演示阿里云容器镜像服务搭建，请大家不要乱用资源！造成任何后果与本博无关！谢谢大家理解！</strong></p><h4 id="1、项目介绍"><a href="#1、项目介绍" class="headerlink" title="1、项目介绍"></a>1、项目介绍</h4><p>1）<a href="https://github.com/xausky/DockerRegisterCloud">https://github.com/xausky/DockerRegisterCloud</a></p><p>2）客户端：<a href="https://github.com/xausky/DockerRegisterCloud/releases">https://github.com/xausky/DockerRegisterCloud/releases</a></p><p>3）基本功能</p><ul><li>命令行工具基本功能，登录，文件列表，上传文件，下载文件</li><li>直接下载，在支持的仓库服务中可以直接在浏览器中实现下载而无需客户端</li><li>命令行功能优化，重命名文件以及删除文件</li><li>GUI 客户端，预计包括 Linux, Windows, Mac OS, Android, iOS，本项目使用 Dart 编写，GUI 客户端将使用 Flutter，期待热心小伙伴的帮助。</li><li>直接下载支持到仓库可以用 Web 版客户端复制永久直链，可用于图床等</li></ul><p>4）支持仓库</p><table><thead><tr><th align="center">服务提供商</th><th align="center">无需成本</th><th align="center">直接下载支持</th></tr></thead><tbody><tr><td align="center">Docker Register</td><td align="center">✖️</td><td align="center">✖️</td></tr><tr><td align="center">Docker Hub</td><td align="center">✔️</td><td align="center">✔️</td></tr><tr><td align="center">百度智能云</td><td align="center">✔️</td><td align="center">✖️</td></tr><tr><td align="center">阿里云</td><td align="center">✔️</td><td align="center">✔️</td></tr><tr><td align="center">华为云</td><td align="center">✔️</td><td align="center">✔️</td></tr></tbody></table><p>本项目编写仅基于 Docker Registry HTTP API V2 未曾尝试破解或者逆向任何公司服务，用户存储的内容以及隐私性和安全性由用户自己负责以及仓库服务提供商保证，本项目未曾也没有能力负责和保证。</p><h4 id="2、准备工作"><a href="#2、准备工作" class="headerlink" title="2、准备工作"></a>2、准备工作</h4><p>1）阿里云账号</p><p>2）本地需要下载客户端</p><h4 id="3、部署"><a href="#3、部署" class="headerlink" title="3、部署"></a>3、部署</h4><p>本文以阿里云作为演示~~~~</p><p>1）容器镜像服务</p><p>网址：<a href="https://cr.console.aliyun.com/">https://cr.console.aliyun.com</a></p><p>2）开通阿里云免费的Docker存储</p><p>3）首先要设置登陆密码！这个密码后面会使用到！</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210226111444.png"></p><p>4）按照提示注册一个命名空间！(选择公开)</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210226111532.png"></p><p>5）新建仓库选择我们新建的命名空间！（选择公开）代码源选择本地仓库！</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210226111610.png"></p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210226111809.png"></p><p>6）新建成功后，点击管理，进入后，复制公网地址，后面我们要使用！</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210226111854.png"></p><p>7）运行软件，仓库地址粘贴上面复制的公网地址，然后输入用户名 和密码！</p><p>特别提醒：这里的密码不是阿里云的密码，是在第一步设置的密码，请注意！</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210226112613.png"></p><p>8）然后就可以愉快的使用啦！</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210226112710.png"></p><h4 id="4-其他说明"><a href="#4-其他说明" class="headerlink" title="4.其他说明"></a>4.其他说明</h4><p>目前阿里云下载的文件名称都是data，需要自己手动修改文件名以及后缀！</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210226112821.png"></p><h4 id="演示下载"><a href="#演示下载" class="headerlink" title="演示下载"></a>演示下载</h4><p>【<a href="http://aliregistry.oss-cn-hangzhou.aliyuncs.com/docker/registry/v2/blobs/sha256/ea/eac60399d17ecc55a23d63acc46a99027b507ef6d1b45069270cde8721d3d862/data?Expires=1614312803&OSSAccessKeyId=LTAI4FsQYu7kG56rtBsQAHfw&Signature=ZAaq+swhuxHrc3b6UG1URFIOkg8=&x-oss-traffic-limit=139056131">点击下载</a>】</p><h4 id="5、最后"><a href="#5、最后" class="headerlink" title="5、最后"></a>5、最后</h4><p>1）客户端上传文件后，复制链接后，就可以共享链接地址，让他人方便的在浏览器里点击链接地址，直接下载了。这样你就有了一个不限速，不限容量的Docker网盘！</p><p><strong>注意</strong>：阿里云下载的文件名称都是data，需要自己手动修改文件名以及后缀！</p><p>2）免费仓库</p><p><strong>国内</strong></p><ul><li>阿里云：<a href="https://cr.console.aliyun.com/">https://cr.console.aliyun.com</a></li><li>华为云：<a href="https://console.huaweicloud.com/swr">https://console.huaweicloud.com/swr</a></li></ul><p><strong>国外</strong></p><ul><li>Docker Hub：<a href="https://hub.docker.com/">https://hub.docker.com/</a></li></ul><p><strong>消息来源</strong></p><ul><li>本文消息来自**<a href="https://www.52pojie.cn/thread-1287146-1-1.html">吾爱破解</a>**</li></ul><p>友情提醒：<strong>白嫖虽好，不要过分！！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 网盘 </tag>
            
            <tag> 白嫖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一键配置VScode的C语言开发环境</title>
      <link href="2021/02/24/%E4%B8%80%E9%94%AE%E9%85%8D%E7%BD%AEVScode%E7%9A%84C%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>2021/02/24/%E4%B8%80%E9%94%AE%E9%85%8D%E7%BD%AEVScode%E7%9A%84C%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>最近因为学习需要，得整一个C语言的开发平台。打开百度一顿搜。嗯，推荐使用宇宙第一IDE——VS Code！随便敲一段代码，按下F5本来以为会跳出“Hello World”，结果。。。乖乖，我这程序运行出来个json文件！666!<br>再定睛仔细以看，原来如此，还是要配置C语言开发环境的嘛。 </p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210224110119.png"></p><p>这不看不知道，一看得吓尿。<br>啥是编译器？？？啥是环境变量？？？我写C语言还要用编译器？？？<br>这个MinGW和GCC有什么关系啊？这个tasks和launch是干啥事的呀？这给我还推荐插件装了咋也没用呢？<br>好嘛，我就想写个C语言，本以为装个编辑器就完事了，咋还整出这么多乱七八糟的玩意。告辞！<br>就这样，VS code劝退了诸多萌新，让他们与全宇宙数一数二好用的工具擦肩而过。</p><p>那有没有办法一键配置开发环境呢？<br>答案肯定是：<strong>有！</strong></p><p>B站UP主<a href="https://space.bilibili.com/12263994">SDchao</a>，就开发了一款一键配置C语言开发环境的工具。</p><p>下载链接：<a href="https://github.com/SDchao/AutoVsCEnv_WPF">点我直达</a></p><p>压缩包下载好了，<strong>先解压！右键，以管理员权限</strong>运行那个<strong>又粗又大的exe文件</strong>，你将获得至高无上的快乐。</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210224110250.png"></p><p>咳咳，你还是得选择一下<strong>项目文件夹</strong>。说人话就是你以后写的c或者cpp文件都要放在这个文件夹和它的子文件夹里面。</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210224110312.png"></p><p>点击确认，配置文件、编译器、环境变量、编辑器插件……全部给你一一整好！完事了还帮你开了VS code。<br>新建文件，写下代码，F5，完美运行。（如果不行的话关掉重启下VS code）</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210224110334.png"></p><p>那一刻，泪流了下来 ~</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VsCode </tag>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode配置Python开发环境</title>
      <link href="2021/02/24/VSCode%E9%85%8D%E7%BD%AEPython%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>2021/02/24/VSCode%E9%85%8D%E7%BD%AEPython%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>VSCode 是一个相当优秀的编辑器，具备开源、跨平台、模块化、插件丰富、启动时间快、颜值高、可高度定制等等优秀的特质，不愧是微软爸爸的私生子。不管是用来写 css,php,c/c++ 都是不错的选择，用 VSCode 来编写 Python，也是相当的好用的。<br>所以，今天我们就来讲讲，怎么在 VScode 上配置 Python 开发环境。</p><h2 id="程序准备"><a href="#程序准备" class="headerlink" title="程序准备"></a>程序准备</h2><p>首先，我们必须先下载好 Python 的安装包和 VSCode 的安装包。<br>我之前 VS2019 已经自动安装好了 Python3，这里就不再进行安装了。<br>下载地址如下：</p><p><a href="https://www.python.org/downloads/">Python下载</a></p><p><a href="https://code.visualstudio.com/">VsCode下载</a></p><p>大家选择适合自己的版本下载即可。<br>我是 Windows10 64 位的操作系统，所以我 Python 下的是 64 位的最新版，VSCode 下载的是 64 位的最新版。</p><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="安装-Python"><a href="#安装-Python" class="headerlink" title="安装 Python"></a>安装 Python</h3><p>首先，我们安装 Python 到自己的电脑里。切记，一定要记得勾选<strong>添加环境变量</strong>。<br>安装过程如下：</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210224105522.gif"></p><p>然后，我们需要检查下 python 是否安装成功。<br>检查方法如下：</p><ol><li>打开 cmd，输入 <code>python</code>，点击回车。</li><li>输入 <code>import this</code>，欣赏下 python 之禅。</li><li>退出，输入 <code>pip list</code>，检查第三方的包正确不。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210224105602.gif"></p><h3 id="安装第三方包"><a href="#安装第三方包" class="headerlink" title="安装第三方包"></a>安装第三方包</h3><p>通过 python 自带的 pip 工具，安装两个一会儿配置 VScode 需要的包。<br>flake8 和 yapf<br>flake8 会检查编写代码时的不规范的地方和语法错误。<br>yapf 是一个代码格式化工具，可以一键美化代码。<br>安装过程如下：</p><ol><li>在 cmd 输入 <code>pip list</code> 检查是否已存在需要的包。</li><li>输入 <code>pip install flake8</code> 下载安装 flake8。</li><li>输入 <code>pip install yapf</code> 下载安装 yapf（检测代码规范性）。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210224105637.gif"></p><h2 id="配置-VSCode"><a href="#配置-VSCode" class="headerlink" title="配置 VSCode"></a>配置 VSCode</h2><h3 id="安装-Python-插件"><a href="#安装-Python-插件" class="headerlink" title="安装 Python 插件"></a>安装 Python 插件</h3><ol><li>打开 VScode，按下快捷键 Ctrl+Shift+X，进入插件管理页面。</li><li>在搜索栏输入 python。</li><li>选择插件，点击安装。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210224105713.gif"></p><h3 id="创建项目，配置工作区域"><a href="#创建项目，配置工作区域" class="headerlink" title="创建项目，配置工作区域"></a>创建项目，配置工作区域</h3><ol><li>创建一个本地文件夹，作为项目文件。</li><li>在项目文件中，新建文件夹<code>vscode</code>，新建文件 <code>settings.json</code>。</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;files.defaultLanguage&quot;</span>: <span class="hljs-string">&quot;python&quot;</span>,<br>    <span class="hljs-attr">&quot;python.linting.flake8Enabled&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">&quot;python.formatting.provider&quot;</span>: <span class="hljs-string">&quot;yapf&quot;</span>,<br>    <span class="hljs-attr">&quot;python.linting.flake8Args&quot;</span>: [<br>        <span class="hljs-string">&quot;--max-line-length=248&quot;</span><br>    ],<br>    <span class="hljs-attr">&quot;python.linting.pylintEnabled&quot;</span>: <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>点击 VSCode 侧边栏中的<code>Run</code>，选择添加<code>launch.json</code>，选择<code>Python File</code>。</p><ol><li>写个 Hello World 测试，按 F5 进行调试。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">print(<span class="hljs-string">&quot;Hello VScode&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="配置完成"><a href="#配置完成" class="headerlink" title="配置完成"></a>配置完成</h2><p>到这里，整个 VSCode 编写 Python 的开发环境就已经全部配置完成了。</p><p>代码格式化工具 yapf：<br>在 VSCode 中按下快捷键<code>Alt+Shift+F</code>即可自动格式化代码。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VsCode </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为博客添加访问提醒</title>
      <link href="2021/02/24/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E6%8F%90%E9%86%92/"/>
      <url>2021/02/24/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E6%8F%90%E9%86%92/</url>
      
        <content type="html"><![CDATA[<p>在网页底部自定义中添加 如果你网站开启了pjax,可能还会有点小bug,问题不大</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- 客户端信息 --&gt;<br>    &lt;div id=<span class="hljs-string">&quot;fps&quot;</span> style=<span class="hljs-string">&quot;z-index:5;position:fixed;bottom:3px;left:3px;color:#2196F3;font-size:10px;&quot;</span>&gt;&lt;/div&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/kaliisra/myblogstatic/kehuduan-js/fetch.min.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script src=<span class="hljs-string">&quot;https://cdn.gmit.vip/layer/3.1.1/layer.js&quot;</span> type=<span class="hljs-string">&quot;text/javascript&quot;</span> charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>    <span class="hljs-comment">/*网站打开提醒代码开始*/</span><br>    $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-comment">/*getCookie(&#x27;msg&#x27;) !=*/</span> <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">var</span> t = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;a&quot;</span>);<br>            t.href = <span class="hljs-built_in">document</span>.referrer;<br>            <span class="hljs-keyword">var</span> msgTitle = t.hostname;<br>            <span class="hljs-keyword">var</span> name = t.hostname.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;&quot;</span> !== <span class="hljs-built_in">document</span>.referrer)&#123;<br>                <span class="hljs-keyword">switch</span> (name) &#123;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;bing&#x27;</span>:<br>                        msgTitle = <span class="hljs-string">&#x27;必应搜索&#x27;</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;baidu&#x27;</span>:<br>                        msgTitle = <span class="hljs-string">&#x27;百度搜索&#x27;</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;so&#x27;</span>:<br>                        msgTitle = <span class="hljs-string">&#x27;360搜索&#x27;</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;google&#x27;</span>:<br>                        msgTitle = <span class="hljs-string">&#x27;谷歌搜索&#x27;</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;sm&#x27;</span>:<br>                        msgTitle = <span class="hljs-string">&#x27;神马搜索&#x27;</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;sogou&#x27;</span>:<br>                        msgTitle = <span class="hljs-string">&#x27;搜狗搜索&#x27;</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">default</span>:<br>                        msgTitle =  t.hostname;<br>                &#125;;<br>            &#125;;<br>            <span class="hljs-keyword">var</span> time = (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>).getHours();<br>            <span class="hljs-keyword">var</span> msg = <span class="hljs-string">&#x27;&#x27;</span>;<br>            <span class="hljs-number">23</span> &lt; time || time &lt;= <span class="hljs-number">5</span> ? msg = <span class="hljs-string">&quot;你是夜猫子呀？这么晚还不睡觉，明天起的来嘛？&quot;</span>:<br>            <span class="hljs-number">5</span>&lt; time &amp;&amp; time &lt;= <span class="hljs-number">7</span> ? msg = <span class="hljs-string">&quot;早上好！一日之计在于晨，美好的一天就要开始了！&quot;</span>:<br>            <span class="hljs-number">7</span>&lt; time &amp;&amp; time &lt;= <span class="hljs-number">11</span> ? msg = <span class="hljs-string">&quot;上午好！工作顺利嘛，不要久坐，多起来走动走动哦！&quot;</span>:<br>            <span class="hljs-number">11</span>&lt; time &amp;&amp; time &lt;= <span class="hljs-number">14</span> ? msg = <span class="hljs-string">&quot;中午了，工作了一个上午，现在是午餐时间！&quot;</span>:<br>            <span class="hljs-number">14</span>&lt; time &amp;&amp; time &lt;= <span class="hljs-number">17</span> ? msg = <span class="hljs-string">&quot;午后很容易犯困呢，今天的运动目标完成了吗？&quot;</span>:<br>            <span class="hljs-number">17</span>&lt; time &amp;&amp; time &lt;= <span class="hljs-number">19</span> ? msg = <span class="hljs-string">&quot;傍晚了！窗外夕阳的景色很美丽呢，最美不过夕阳红~&quot;</span>:<br>            <span class="hljs-number">19</span>&lt; time &amp;&amp; time &lt;= <span class="hljs-number">21</span> ? msg = <span class="hljs-string">&quot;晚上好，今天过得怎么样？&quot;</span>:<br>            <span class="hljs-number">21</span>&lt; time &amp;&amp; time &lt;= <span class="hljs-number">23</span> &amp;&amp; (msg = <span class="hljs-string">&quot;已经这么晚了呀，早点休息吧，晚安~&quot;</span>);<br>            $.ajax(&#123;<br>                type:<span class="hljs-string">&quot;get&quot;</span>,<br>                url:<span class="hljs-string">&quot;https://open.gmit.vip/web/api/UserInfo/&quot;</span>,<br>                <span class="hljs-keyword">async</span>:<span class="hljs-literal">true</span>,<br>                success:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>                    <span class="hljs-built_in">window</span>.info = data;<br>                    layer.msg(<span class="hljs-string">&quot;Hi~ 来自&quot;</span>+ data.data.location + <span class="hljs-string">&#x27;~&lt;br/&gt;通过 &#x27;</span>+msgTitle+<span class="hljs-string">&#x27; 进来的朋友！&lt;br/&gt;使用 &#x27;</span>+ data.data.os +<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>+ data.data.browser +<span class="hljs-string">&#x27; 访问本站！&#x27;</span> + <span class="hljs-string">&#x27;&lt;br/&gt;&#x27;</span> + msg);<br>                    <span class="hljs-keyword">var</span> showFPS = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                        <span class="hljs-keyword">var</span> requestAnimationFrame =<br>                            <span class="hljs-built_in">window</span>.requestAnimationFrame ||<br>                            <span class="hljs-built_in">window</span>.webkitRequestAnimationFrame ||<br>                            <span class="hljs-built_in">window</span>.mozRequestAnimationFrame ||<br>                            <span class="hljs-built_in">window</span>.oRequestAnimationFrame ||<br>                            <span class="hljs-built_in">window</span>.msRequestAnimationFrame ||<br>                            <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">callback</span>) </span>&#123;<br>                                <span class="hljs-built_in">window</span>.setTimeout(callback, <span class="hljs-number">1000</span>/<span class="hljs-number">60</span>);<br>                            &#125;;<br>                        <span class="hljs-keyword">var</span> e,pe,pid,fps,last,offset,step,appendFps;<br> <br>                        fps = <span class="hljs-number">0</span>;<br>                        last = <span class="hljs-built_in">Date</span>.now();<br>                        step = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                            offset = <span class="hljs-built_in">Date</span>.now() - last;<br>                            fps += <span class="hljs-number">1</span>;<br>                            <span class="hljs-keyword">if</span>( offset &gt;= <span class="hljs-number">1000</span> )&#123;<br>                            last += offset;<br>                            appendFps(fps);<br>                            fps = <span class="hljs-number">0</span>;<br>                            &#125;;<br>                            requestAnimationFrame( step );<br>                        &#125;;<br>                        appendFps = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">fps</span>)</span>&#123;<br>                            <span class="hljs-keyword">var</span> settings = &#123;<br>                                timeout: <span class="hljs-number">5000</span>,<br>                                logError: <span class="hljs-literal">true</span><br>                            &#125;;<br>                            $(<span class="hljs-string">&#x27;#fps&#x27;</span>).html(<span class="hljs-string">&#x27;&lt;span style=&quot;float:left;&quot;&gt;&#x27;</span>+fps+<span class="hljs-string">&#x27;FPS&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot;float:left&quot;&gt;&#x27;</span>+<span class="hljs-built_in">window</span>.info.data.os+<span class="hljs-string">&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot;float:left;margin-top:1px;&quot;&gt;&#x27;</span>+<span class="hljs-built_in">window</span>.info.data.browser+<span class="hljs-string">&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot;float:left;margin-top:1px;&quot;&gt;&#x27;</span>+<span class="hljs-built_in">window</span>.info.data.location+<span class="hljs-string">&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot;float:left;margin-top:1px;&quot;&gt;&lt;/span&gt;&#x27;</span>);<br>                        &#125;;<br>                        step();<br>                    &#125;)();<br>                &#125;<br>            &#125;);<br>        &#125;;<br>    &#125;);<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure><p>如果不显示，在头部或者脚部添加以下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Armbian-N1手动安装omv</title>
      <link href="2021/02/23/Armbian-N1%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85omv/"/>
      <url>2021/02/23/Armbian-N1%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85omv/</url>
      
        <content type="html"><![CDATA[<p>本来是想用 <code>armbian-config</code> 来自动安装 <code>OpenMediaVault</code> 的，但是安装的时候总是自动退出，无奈，只能手动安装了。</p><h3 id="1-添加-OMV-软件源"><a href="#1-添加-OMV-软件源" class="headerlink" title="1. 添加 OMV 软件源"></a>1. 添加 OMV 软件源</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;deb http://packages.openmediavault.org/public arrakis main&quot;</span> &gt; /etc/apt/sources.<span class="hljs-keyword">list</span>.d/openmediavault.<span class="hljs-keyword">list</span>  <br>apt-key adv --recv-keys --keyserver keyserver.ubuntu.com <span class="hljs-number">7E7</span>A6C592EF35D13 <span class="hljs-number">24863</span>F0C716B980B<br>apt update<br></code></pre></td></tr></table></figure><h3 id="2-设置环境变量"><a href="#2-设置环境变量" class="headerlink" title="2. 设置环境变量"></a>2. 设置环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> LANG=C <br><span class="hljs-built_in">export</span> DEBIAN_FRONTEND=noninteractive <br><span class="hljs-built_in">export</span> APT_LISTCHANGES_FRONTEND=none<br></code></pre></td></tr></table></figure><h3 id="3-安装-OMV"><a href="#3-安装-OMV" class="headerlink" title="3. 安装 OMV"></a>3. 安装 OMV</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift">apt install openmediavault<span class="hljs-operator">-</span>keyring <span class="hljs-keyword">postfix</span> <br>apt install openmediavault<br></code></pre></td></tr></table></figure><h3 id="4-初始化：快完成时有确认提示，如下："><a href="#4-初始化：快完成时有确认提示，如下：" class="headerlink" title="4. 初始化：快完成时有确认提示，如下："></a>4. 初始化：快完成时有确认提示，如下：</h3><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210223125241.png"></p><p>确认后，<code>omv-initsystem</code> 进行初始化</p><h3 id="5-安装完成后，输入http-ip打开登陆页面，默认账号密码如下，"><a href="#5-安装完成后，输入http-ip打开登陆页面，默认账号密码如下，" class="headerlink" title="5. 安装完成后，输入http://ip打开登陆页面，默认账号密码如下，"></a>5. 安装完成后，输入<code>http://ip</code>打开登陆页面，默认账号密码如下，</h3><ul><li>账号：<code>admin</code></li><li>密码：<code>openmediavault</code></li></ul><h3 id="6-安装扩展插件"><a href="#6-安装扩展插件" class="headerlink" title="6. 安装扩展插件"></a>6. 安装扩展插件</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp">wget http:<span class="hljs-comment">//omv-extras.org/openmediavault-omvextrasorg_latest_all4.deb</span><br>dpkg -i openmediavault-omvextrasorg_latest_all4.deb<br>apt-<span class="hljs-keyword">get</span> update<br></code></pre></td></tr></table></figure><p>这样就安装完成了！</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> N1 </tag>
            
            <tag> Armbian </tag>
            
            <tag> OpenMediaVault </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>钉钉内网穿透，免费高速的内网穿透工具</title>
      <link href="2021/02/21/%E9%92%89%E9%92%89%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%EF%BC%8C%E5%85%8D%E8%B4%B9%E9%AB%98%E9%80%9F%E7%9A%84%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/"/>
      <url>2021/02/21/%E9%92%89%E9%92%89%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%EF%BC%8C%E5%85%8D%E8%B4%B9%E9%AB%98%E9%80%9F%E7%9A%84%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是内网穿透？"><a href="#什么是内网穿透？" class="headerlink" title="什么是内网穿透？"></a>什么是内网穿透？</h4><p>就是让你个人电脑内建立的网站，在外网可以访问，例如你的手机，其他电脑等。</p><p>例如你在电脑部署了一个web服务器，你在浏览器访问127.0.0.1可以打开这个网站，但是你用手机访问127.0.0.1却打不开。那是因为你这个ip地址不是公网ip，只能在你的电脑访问，你需要将127.0.0.1暴露出去，即需要有一个公网ip，别人访问公网ip即可访问网站。</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210221185812.png"></p><p>假设你的电脑是A，你的手机是B，你有一台拥有公网ip的服务器C，显然B想知道A里面有什么，是有一堵墙阻挡住了，这是防火墙。我们的目的就是绕过防火墙，即需要C来协助。</p><p>A可以和C进行信息交换，因为C是公网的，大家可以访问C，所以B也可以和C进行信息交换，如果B想和A联系，B先和C联系，C再和A联系，那么B就可以间接联系到A了，即C作为A和B的中介，也称为代理。</p><h4 id="如何实现内网穿透？"><a href="#如何实现内网穿透？" class="headerlink" title="如何实现内网穿透？"></a>如何实现内网穿透？</h4><p>市面上的内网穿透软件、工具很多，收费的有花生壳、向日葵、免费的有frp、ngrok，其中frp、ngrok是需要一些搭建基础的，对小白不友好啊，但是钉钉把ngrok进行了封装，小白也可以上手，下面给大家介绍钉钉这款内网穿透工具如何使用</p><h4 id="内网穿透之HTTP穿透"><a href="#内网穿透之HTTP穿透" class="headerlink" title="内网穿透之HTTP穿透"></a>内网穿透之HTTP穿透</h4><p>鉴于很多开发者在临时体验开发时往往没有公网域名或者公网IP，本工具提供了一个公网代理服务，目的是方便开发测试。</p><p>本工具不保证稳定性，仅适用于开发测试阶段，禁止当作公网域名使用。如线上应用使用本工具造成稳定性问题，后果由自己承担。如使用本工具传播违法不良信息，钉钉将追究法律责任。</p><h4 id="内网穿透示意图"><a href="#内网穿透示意图" class="headerlink" title="内网穿透示意图"></a>内网穿透示意图</h4><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210221190114.png"></p><h4 id="场景介绍"><a href="#场景介绍" class="headerlink" title="场景介绍"></a>场景介绍</h4><p>案例一：ISV三方企业小程序的回调地址必须是公网域名或IP，对于大部分开发者来说，开发者无法在本地调试远程代码，对于回调URL校验不通过之类的问题无法追踪，只能不断远程部署查看log日志来调试修改。</p><p>案例二：企业通讯录同步过程中需要注册一个公网域名(或IP)的回调地址，用来接收钉钉上的企业通讯录信息变更。</p><p>内网穿透工具可以实现将一个公网域名映射到本地的localhost域名</p><p>github地址：<a href="https://github.com/open-dingtalk/pierced">https://github.com/open-dingtalk/pierced</a></p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><h6 id="一、下载程序"><a href="#一、下载程序" class="headerlink" title="一、下载程序"></a>一、下载程序</h6><p>从上面github地址里下载程序，或者直接用<code>git clone</code></p><p>这里以Linux系统为例</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/open-dingtalk/</span>pierced.git<br>cd pierced<span class="hljs-regexp">/linux/</span><br></code></pre></td></tr></table></figure><h6 id="二、启动程序"><a href="#二、启动程序" class="headerlink" title="二、启动程序"></a>二、启动程序</h6><p>Linux、Mac下用系统终端，Windows下要用CMD，Powershell不知为何运行不了。</p><p>执行<code>./ding -config=./ding.cfg -subdomain=域名前缀 端口</code>，这里以Linux系统为例</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">chmod +x ./ding<br>./ding <span class="hljs-attribute">-config</span>=./ding.cfg <span class="hljs-attribute">-subdomain</span>=huange 8080<br></code></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-config</td><td>内网穿透的配置文件，按命令照示例固定为钉钉提供的./ding.cfg，无需修改</td></tr><tr><td>-subdomain</td><td>您需要使用的域名前缀，该前缀将会匹配到“vaiwan.com”前面，例如你的subdomain是abcde，启动工具后会将abcde.vaiwan.com映射到本地。</td></tr><tr><td>端口</td><td>您需要代理的本地服务http-server端口，例如你本地端口为8080等</td></tr></tbody></table><h6 id="三、启动成功"><a href="#三、启动成功" class="headerlink" title="三、启动成功"></a>三、启动成功</h6><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210221190645.png"></p><p>启动完客户端后，你访问<a href="http://abcde.vaiwan.com/xxxxx%E9%83%BD%E4%BC%9A%E6%98%A0%E5%B0%84%E5%88%B0">http://abcde.vaiwan.com/xxxxx都会映射到</a> <a href="http://127.0.0.1:8080/xxxxx%E3%80%82">http://127.0.0.1:8080/xxxxx。</a></p><h6 id="四、注意事项"><a href="#四、注意事项" class="headerlink" title="四、注意事项"></a>四、注意事项</h6><ul><li>需要访问的域名是<a href="http://abcde.vaiwan.com/xxxxx">http://abcde.vaiwan.com/xxxxx</a> 而不是<a href="http://abcde.vaiwan.com:8080/xxxxx">http://abcde.vaiwan.com:8080/xxxxx</a></li><li>启动命令的subdomain参数有可能被别人占用，尽量不要用常用字符，可以用自己公司名的拼音，例如：alibaba、dingding等</li><li>可以在本地起个http-server服务，放置一个index.html文件，然后访问<a href="http://abcde.vaiwan.com/index.html%E6%B5%8B%E8%AF%95%E4%B8%80%E4%B8%8B">http://abcde.vaiwan.com/index.html测试一下</a></li></ul><p>官方文档：<a href="https://developers.dingtalk.com/document/resourcedownload/http-intranet-penetration?pnamespace=app">点击进入</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网穿透 </tag>
            
            <tag> 免费 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用服务器24小时不间断直播电影电视剧</title>
      <link href="2021/02/21/%E4%BD%BF%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A824%E5%B0%8F%E6%97%B6%E4%B8%8D%E9%97%B4%E6%96%AD%E7%9B%B4%E6%92%AD%E7%94%B5%E5%BD%B1%E7%94%B5%E8%A7%86%E5%89%A7/"/>
      <url>2021/02/21/%E4%BD%BF%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A824%E5%B0%8F%E6%97%B6%E4%B8%8D%E9%97%B4%E6%96%AD%E7%9B%B4%E6%92%AD%E7%94%B5%E5%BD%B1%E7%94%B5%E8%A7%86%E5%89%A7/</url>
      
        <content type="html"><![CDATA[<p>在现在主流的平台上面有很多直播电影，电视剧的房间。很多直播平台也有这方面影视的版权。大部分新人还是使用obs+potplayer来直播。这显然不符合技术宅的解决方法，需要开机个windows主机？技术宅：NO。<br>利用我闲置的vps，云服务器。在b站，虎牙，斗鱼上面24小时不间断直播比obs方便太多<br>下面是我的直播方案，我选用的是白嫖的华为云centos系统的云服务器，cpu内存都不高，网络选用的是1M小水管。</p><p>准备工作：<br>下载直播推流工具: wget <a href="http://download.bytelang.cn/kplayer-latest-linux_amd64.tar.gz">http://download.bytelang.cn/kplayer-latest-linux_amd64.tar.gz</a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 解压压缩包</span><br><span class="hljs-attribute">tar</span> zxvf kplayer-latest-linux_amd<span class="hljs-number">64</span>.tar.gz<br></code></pre></td></tr></table></figure><p>得到可执行文件</p><p>媒体资源准备:<br>自行下载想要直播的视频资源，我直播的是蜡笔小新。用迅雷下载完成蜡笔小新的全集后，上传到服务器中任意目录</p><p>开始直播：<br>编辑kplayer.yaml的配置文件(可查看官方文档)，在playlist里面添加进下载的媒体资源</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">version:</span> <span class="hljs-string">&quot;1.0&quot;</span><br><span class="hljs-symbol">player:</span><br><span class="hljs-symbol">  media:</span><br><span class="hljs-symbol">    list:</span><br>      - <span class="hljs-string">&quot;/root/lbxx/蜡笔小新1.mp4&quot;</span><br>      - <span class="hljs-string">&quot;/root/lbxx/蜡笔小新2.mp4&quot;</span><br><br><span class="hljs-symbol">  output:</span><br><span class="hljs-symbol">    type:</span> rtmp<br><span class="hljs-symbol">   path:</span> <span class="hljs-string">&quot;rtmp://*****&quot;</span><br></code></pre></td></tr></table></figure><p>下面的output path一般是直播平台提供的推流地址，工具将我们的媒体资源推送到直播服务器上面就开始正式直播了。</p><p>但是kplayer没有提供后台运行的功能，我借助的是tmux工具来进行后台运行的。如果有嫌麻烦的小伙伴可以 nohup 命令来进行后台推流.</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">nohup <span class="hljs-string">./kplayer</span><br></code></pre></td></tr></table></figure><p>打开直播间，就能完整看到蜡笔小新正在播放了</p><p>配置文件：<br>官方网站上面有很详细的配置文件说明，提供了插件。缓存，多个直播平台推流的功能。还是挺全面的，赞一个。这是网站地址 <a href="https://kplayer.bytelang.cn/">https://kplayer.bytelang.cn/</a></p><p>有空可以去看看我的直播间<a href="https://live.bilibili.com/21577989?visit_id=riw92t7hwzk">https://live.bilibili.com/21577989</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP空间虚拟主机不支持子目录的情况下借助.htaccess实现多个域名重定向到子目录实现单空间多站点</title>
      <link href="2021/02/20/PHP%E7%A9%BA%E9%97%B4%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E4%B8%8D%E6%94%AF%E6%8C%81%E5%AD%90%E7%9B%AE%E5%BD%95%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E5%80%9F%E5%8A%A9-htaccess%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%B8%AA%E5%9F%9F%E5%90%8D%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0%E5%AD%90%E7%9B%AE%E5%BD%95%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%A9%BA%E9%97%B4%E5%A4%9A%E7%AB%99%E7%82%B9/"/>
      <url>2021/02/20/PHP%E7%A9%BA%E9%97%B4%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E4%B8%8D%E6%94%AF%E6%8C%81%E5%AD%90%E7%9B%AE%E5%BD%95%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E5%80%9F%E5%8A%A9-htaccess%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%B8%AA%E5%9F%9F%E5%90%8D%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0%E5%AD%90%E7%9B%AE%E5%BD%95%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%A9%BA%E9%97%B4%E5%A4%9A%E7%AB%99%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>举例：<br>有多个域名：<code>site1.abc.com</code>，<code>site2.abc.com</code>，<code>site3.abc.com</code><br>分别在二级目录<code>site1.abc.com/</code>，<code>site2.abc.com/</code>，<code>site3.abc.com/</code></p><p>.htaccess的代码如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteEngine</span></span> <span class="hljs-literal">On</span><br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;HTTP_HOST&#125;</span> ^site<span class="hljs-number">1</span>.abc.com$<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;REQUEST_URI&#125;</span> !^/site<span class="hljs-number">1</span>.abc.com/<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;REQUEST_FILENAME&#125;</span> !-f<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;REQUEST_FILENAME&#125;</span> !-d<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteRule</span></span> ^(.*)$ /site<span class="hljs-number">1</span>.abc.com/$<span class="hljs-number">1</span><br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;HTTP_HOST&#125;</span> ^site<span class="hljs-number">1</span>.abc.com$<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteRule</span></span> ^(/)?$ site<span class="hljs-number">1</span>.abc.com/index.php<span class="hljs-meta"> [L]</span><br><br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;HTTP_HOST&#125;</span> ^site<span class="hljs-number">2</span>.abc.com$<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;REQUEST_URI&#125;</span> !^/site<span class="hljs-number">2</span>.abc.com/<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;REQUEST_FILENAME&#125;</span> !-f<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;REQUEST_FILENAME&#125;</span> !-d<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteRule</span></span> ^(.*)$ /site<span class="hljs-number">2</span>.abc.com/$<span class="hljs-number">1</span><br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;HTTP_HOST&#125;</span> ^site<span class="hljs-number">2</span>.abc.com$<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteRule</span></span> ^(/)?$ site<span class="hljs-number">2</span>.abc.com/index.php<span class="hljs-meta"> [L]</span><br><br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;HTTP_HOST&#125;</span> ^site<span class="hljs-number">3</span>.abc.com$<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;REQUEST_URI&#125;</span> !^/site<span class="hljs-number">3</span>.abc.com/<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;REQUEST_FILENAME&#125;</span> !-f<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;REQUEST_FILENAME&#125;</span> !-d<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteRule</span></span> ^(.*)$ /site<span class="hljs-number">3</span>.abc.com/$<span class="hljs-number">1</span><br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%&#123;HTTP_HOST&#125;</span> ^site<span class="hljs-number">3</span>.abc.com$<br><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteRule</span></span> ^(/)?$ site<span class="hljs-number">3</span>.abc.com/index.php<span class="hljs-meta"> [L]</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟主机 </tag>
            
            <tag> 虚拟空间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客的备份与恢复</title>
      <link href="2021/02/20/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
      <url>2021/02/20/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<p>可能有的小伙伴认为备份不就创建一个仓库多简单；或者说我将Hexo博客源文件拷贝到U盘不就可以了吗，可是你写一篇文章或者更新一次配置就要拷贝一次不是很麻烦吗？</p><p><strong>备份博客源文件的好处：</strong></p><ul><li>如果电脑突然罢工，我们的源文件也不会丢失。</li><li>有时候不方便需要更换电脑写作，我们直接clone仓库就可以了。</li></ul><h2 id="前提、机制"><a href="#前提、机制" class="headerlink" title="前提、机制"></a>前提、机制</h2><p>前提是你已经初始化好了自己想要备份的那个博客。GIT、GitHub/Gitee环境已经准备好了。</p><p>机制是这样的，由于hexo d上传部署到github的其实是hexo编译后的文件，是用来生成网页的，不包含源文件。</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/image-20210220111936510.png" alt="image-20210220111936510"></p><p>也就是上传的是在本地目录里自动生成的.deploy_git里面。</p><p>其他文件 ，包括我们写在source 里面的文章，和配置文件，主题文件，都没有上传到github</p><h2 id="备份博客"><a href="#备份博客" class="headerlink" title="备份博客"></a>备份博客</h2><p>我是用的gitee，因为Github有时候速度慢上不去。</p><h3 id="⑴Git配置多个SSH-Key"><a href="#⑴Git配置多个SSH-Key" class="headerlink" title="⑴Git配置多个SSH-Key"></a>⑴Git配置多个SSH-Key</h3><p>我用Github部署博客，用Gitee备份博客，所以需要两个SSH-Key，现在已经有了Github的，所以再新建一个Gitee的就欧克了</p><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p>1.生成一个Gitee用的SSH-Key</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">ssh-keygen -t rsa -C <span class="hljs-string">&#x27;xxxxx@qq.com&#x27;</span> -f ~<span class="hljs-regexp">/.ssh/gi</span>tee_id_rsa<br></code></pre></td></tr></table></figure><p>2.输入命令，无脑下一步即可，会生成密钥文件</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/image-20210220112600271.png" alt="image-20210220112600271"></p><p>3.将gitee_id_rsa.pub用记事本打开，把里面的密钥填到Gitee</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/image-20210220112712320.png" alt="image-20210220112712320"></p><p>4.在 ~/.ssh 目录下新建一个config文件，添加如下内容（其中Host和HostName填写git服务器的域名，IdentityFile指定私钥的路径）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># gitee</span><br>Host gitee.com<br>HostName gitee.com<br>PreferredAuthentications publickey<br>IdentityFile ~<span class="hljs-regexp">/.ssh/gi</span>tee_id_rsa<br></code></pre></td></tr></table></figure><p>4.用ssh命令测试</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ssh -T <span class="hljs-symbol">git@</span>gitee.com<br></code></pre></td></tr></table></figure><p>成功的话会返回下图内容</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210220112938.png"></p><h3 id="⑵新建仓库"><a href="#⑵新建仓库" class="headerlink" title="⑵新建仓库"></a>⑵新建仓库</h3><p>新建一个仓库，自己命名，勾选README</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/image-20210220113141285.png" alt="image-20210220113141285"></p><h3 id="⑶获取-git文件夹"><a href="#⑶获取-git文件夹" class="headerlink" title="⑶获取 .git文件夹"></a>⑶获取 .git文件夹</h3><p>原始的博客文件夹只有.deploy_git，是没有.git文件夹的，于是我们先去桌面或者哪里随便一个地方，把刚刚的hexo分支给clone下来。然后剪切出里面的.git文件夹，复制到现在的博客文件夹中。</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/image-20210220113455792.png" alt="image-20210220113455792"></p><p>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@gitee.com:muzihuaner/hexo.git<br>//git@gitee.com:muzihuaner/hexo.git 改为你自己的<br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/image-20210220113609444.png" alt="image-20210220113609444"></p><h3 id="⑷创建-gitignore"><a href="#⑷创建-gitignore" class="headerlink" title="⑷创建.gitignore"></a>⑷创建.gitignore</h3><p>用来在上传时候忽略一些文件，即不上传<code>.gitignore</code>中忽略的文件。有就不用管了，没有的话自己手动添加。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.DS_Store</span><br>Thumbs<span class="hljs-number">.</span><span class="hljs-built_in">db</span><br><span class="hljs-built_in">db</span><span class="hljs-number">.</span>json<br>*.log<br>node_modules/<br><span class="hljs-meta">public</span>/<br><span class="hljs-meta">.deploy</span>*/<br><span class="hljs-number">1234567</span><br></code></pre></td></tr></table></figure><p><strong>注意，如果你之前克隆过theme中的主题文件，那么应该把主题文件中的.git文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。</strong></p><h3 id="⑸备份"><a href="#⑸备份" class="headerlink" title="⑸备份"></a>⑸备份</h3><p>通过如下命令将本地文件备份到Gitee上。<br>在hexo博客的根目录下执行</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">git add .<br>git commit  -m  &quot;backup&quot;  （注：“backup”里面换成你需要，如“first commit”）<br>git push -u origin master   （注：此操作目的是把本地仓库push到gitee上面，如果没有使用密钥此步骤需要你输入帐号和密码）<br></code></pre></td></tr></table></figure><p>这样就备份完博客了且在Gitee上能看到</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/image-20210220113951870.png" alt="image-20210220113951870"></p><p>其中<code>node_modules、public、db.json</code>已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要<strong>重新输入命令安装</strong> 。</p><h2 id="个人备份习惯"><a href="#个人备份习惯" class="headerlink" title="个人备份习惯"></a>个人备份习惯</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo c<br>git add .<br>git commit -m <span class="hljs-string">&quot;Backup&quot;</span><br>git push<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><h2 id="恢复博客"><a href="#恢复博客" class="headerlink" title="恢复博客"></a>恢复博客</h2><p>目前假设本地Hexo博客基础环境已经搭好：比如安装git<br>、nodejs、hexo安装…</p><h3 id="克隆项目到本地"><a href="#克隆项目到本地" class="headerlink" title="克隆项目到本地"></a>克隆项目到本地</h3><p>输入下列命令克隆博客必须文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://gitee.com/muzihuaner/hexo.git<br>//https://gitee.com/muzihuaner/hexo.git换成你的<br></code></pre></td></tr></table></figure><h3 id="恢复博客-1"><a href="#恢复博客-1" class="headerlink" title="恢复博客"></a>恢复博客</h3><p>在clone下来的那个文件夹里面执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli<br>npm install<br>npm install hexo-deployer-git<br></code></pre></td></tr></table></figure><p><strong>在此不需要执行hexo init这条指令，因为不是从零搭建起新博客。</strong></p><p>然后就完成了，你如果想也可以</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>是不是很简单呢？</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快链-友链接力</title>
      <link href="2021/02/20/%E5%BF%AB%E9%93%BE-%E5%8F%8B%E9%93%BE%E6%8E%A5%E5%8A%9B/"/>
      <url>2021/02/20/%E5%BF%AB%E9%93%BE-%E5%8F%8B%E9%93%BE%E6%8E%A5%E5%8A%9B/</url>
      
        <content type="html"><![CDATA[<p>开箱即用的网站友链交换解决方案。</p><p><a href="https://camo.githubusercontent.com/ca6324f77de99b5c4d7c1f739fd67c1023babcee6a9cac2564672b4eac52f260/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f6d757a696875616e65722f517569636b4c696e6b73406d61696e2f6173736574732f517569636b4c696e6b732e676966"><img src="https://camo.githubusercontent.com/ca6324f77de99b5c4d7c1f739fd67c1023babcee6a9cac2564672b4eac52f260/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f6d757a696875616e65722f517569636b4c696e6b73406d61696e2f6173736574732f517569636b4c696e6b732e676966" alt="example"></a></p><ul><li>预览：<a href="https://quickso.cn/">https://quickso.cn</a></li><li>首页：<a href="https://myquicklinks.vercel.app/">https://myquicklinks.vercel.app</a></li></ul><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>快链是一个开箱即用的友链接力项目，您只需要将“快链”的徽标或者链接放入您的网页，提交审核，审核通过，就可以使用。</p><p>可以用来增加网页流量和交个朋友（李姐万岁~）</p><h6 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h6><p>每当有用户访问加入快链的网页时，点击快链后会**<strong>随机跳转**</strong>到另一个加入快链的网页。加入快链的网页越多，友链接力的规模越大，分享流量的规模也越大。</p><p>“ 网页A → 快链 → 网页B → 快链 → 网页C → 快链 → 网页D → 快链 → 网页E → 快链 → 网页F … ”</p><p>示例：</p><h2 id=""><a href="#" class="headerlink" title=""></a><a href="https://camo.githubusercontent.com/ae9d20fc7e04d77916d04c0b704f384ccaac6459c315f1c8edd193c8c8c5bc08/68747470733a2f2f67697465652e636f6d2f6d757a696875616e65722f6875616e6765696d616765732f7261772f6d61737465722f696d672f32303231303231373231323731332e706e67"><img src="https://camo.githubusercontent.com/ae9d20fc7e04d77916d04c0b704f384ccaac6459c315f1c8edd193c8c8c5bc08/68747470733a2f2f67697465652e636f6d2f6d757a696875616e65722f6875616e6765696d616765732f7261772f6d61737465722f696d672f32303231303231373231323731332e706e67" alt="img"></a></h2><hr><h2 id="项目仓库"><a href="#项目仓库" class="headerlink" title="项目仓库"></a>项目仓库</h2><p>国际：Github</p><p><a href="https://github.com/muzihuaner/QuickLinks">https://github.com/muzihuaner/QuickLinks</a></p><p>国内：Gitee</p><p><a href="https://gitee.com/muzihuaner/QuickLinks">https://gitee.com/muzihuaner/QuickLinks</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QuickLinks </tag>
            
            <tag> 快链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用CloudFlare Worker 免费部署 JSProxy 服务</title>
      <link href="2021/02/20/%E5%88%A9%E7%94%A8CloudFlare%20Worker%20%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2%20JSProxy%20%E6%9C%8D%E5%8A%A1/"/>
      <url>2021/02/20/%E5%88%A9%E7%94%A8CloudFlare%20Worker%20%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2%20JSProxy%20%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>SProxy 一个基于浏览器端 JS 实现的在线代理，这里不多介绍！</p><p>本文主要介绍一下利用<code>CloudFlare Worker</code> 来搭建一个JSProxy服务。</p><p><code>CloudFlare Worker</code> 是 CloudFlare 的边缘计算服务。开发者可通过 JavaScript 对 CDN 进行编程，从而能灵活处理 HTTP 请求。这使得很多任务可在 CDN 上完成，无需自己的服务器参与。</p><p><code>CloudFlare Worker</code>免费服务，支持每天10 万次免费请求！基本也够用了！</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210220094111.png"></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>1、<a href="https://www.cloudfalre.com/">Cloudflare</a>账号*1；<br>2、<a href="https://github.com/EtherDream/jsproxy">GitHub上一个大佬开源的项目</a>；<br>最终得到：一个可用于应急或者日常使用的的网页端在线代理。</p><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><p>1）打开 <a href="https://51.ruyo.net/go/index.html?u=https://workers.cloudflare.com">https://workers.cloudflare.com</a>，登陆上你的 Cloudflare 账号激活 Workers 服务</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210220094317.png"></p><p>然后创建一个 Workers【Create a Worker】</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210220094512.png"></p><p>2）修改一下子域名，创建出来的域名格式 自定义的内容.Cloudflare用户名.workers.dev</p><p>3）复制<a href="https://github.com/EtherDream/jsproxy/tree/master/cf-worker"> index.js</a> 的内容到左侧代码（Script）区域</p><p>代码备份：<a href="https://github.com/muzihuaner/jsproxy/tree/master/cf-worker">点我进入</a></p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210220094715.png"></p><p>4）先点击【Run】右侧看执行效果，再点击 【Save and deploy】 部署代码</p><p>5）届时你可以访问你的站点<a href="https://xxx.子域名.workers.dev查看效果/">https://xxx.子域名.workers.dev查看效果</a></p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/image-20210220095128535.png" alt="image-20210220095128535"></p><p>进入站点后将线路选择切换为当前站点即可使用</p><p> 特别提示：浏览网站的时候，有时候会提示加载不安全脚本，点击允许即可！</p><p>演示站点：<a href="https://vpn.hgnet.workers.dev/">点击进入</a></p><h2 id="绑定自己的域名（可有可无）"><a href="#绑定自己的域名（可有可无）" class="headerlink" title="绑定自己的域名（可有可无）"></a>绑定自己的域名（可有可无）</h2><p>1、确保自己在Cloudflare下托管的有域名；<br>2、选择Workers选项；<br>3、点击添加路由；</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210220095347.png"></p><p>4、输入信息；<br>5、将部署好的在线代理网站域名（这个是Cloudflare分配给你的）CNAME指向到你自己的域名，即添加DNS记录中的CNAME模式，文本框填Cloudflare分配给你的域名；<br>6、即可访问自己的域名来访问在线代理。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CloudFlare </tag>
            
            <tag> JSProxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo sever端口占用，localhost:4000无响应</title>
      <link href="2021/02/19/Hexo%20sever%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%EF%BC%8Clocalhost-4000%E6%97%A0%E5%93%8D%E5%BA%94/"/>
      <url>2021/02/19/Hexo%20sever%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%EF%BC%8Clocalhost-4000%E6%97%A0%E5%93%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<p>这种情况一般是因为4000端口被占用，使用下面的命令更改端口号为5000<br>然后浏览器输入<a href="http://localhost:5000/">http://localhost:5000/</a></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">$ hexo <span class="hljs-keyword">server</span> -p <span class="hljs-number">5000</span><br></code></pre></td></tr></table></figure><p>可是每次这样设置会很麻烦（如果4000端口被占用）</p><p><strong>解决办法：</strong><br>在站点配置文件加入</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">5000</span><br>  <span class="hljs-attr">compress:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">header:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令</title>
      <link href="2021/02/19/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2021/02/19/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/muzihuaner/huangeimages/raw/master/img/20210219174827.png"></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本篇记录下我使用Git常用的命令</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>使用Git的第一件事就是将其配置好，其中需要配置“用户名”、“邮箱”、“创建SSH”</p><p>首先在Git的安装目录中打开”git-bash.exe“</p><p><strong>1.配置用户名及邮箱</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> <span class="hljs-string">&quot;Your Name&quot;</span><br>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> <span class="hljs-string">&quot;your_email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>为了记住用户名和邮箱我们还需要执行下面这个命令</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">git config --<span class="hljs-keyword">global</span> credential.helper <span class="hljs-keyword">store</span><br></code></pre></td></tr></table></figure><p><strong>2.创建SSH</strong></p><p>在命令行中输入这个命令，之后一直回车即可</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh-keygen -t rsa</span><br></code></pre></td></tr></table></figure><p><strong>3.配置SSH</strong></p><p>由于博主使用Coding的代码托管，因此讲一下Coding的SSH配置，其他请自行百度查找教程</p><p>首先打开“C:\Users\用户名.ssh”文件夹，右击“id_rsa.pub”文件，选择用记事本打开，复制里面的所有内容</p><p>然后登录Coding，在右上角头像处选择<strong>“个人设置”</strong>，然后选择<strong>“SSH公钥”</strong>。单击<strong>“新增公钥”</strong>，在<strong>“公钥内容”</strong>中粘贴刚刚复制的内容，<strong>”公钥名称“</strong>可不填，勾选<strong>”永久有效“</strong>，单击<strong>”添加“</strong>就可以。</p><p>至此，SSH就配置好了</p><hr><h3 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 在当前目录新建一个Git代码库</span><br>git init<br><br><span class="hljs-comment"># 新建一个目录，将其初始化为Git代码库</span><br>git init [project-name]<br><br><span class="hljs-comment"># 下载一个项目和它的整个代码历史</span><br>git <span class="hljs-keyword">clone</span> <span class="hljs-title">[url</span>]<br></code></pre></td></tr></table></figure><hr><h3 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 添加指定文件到暂存区</span><br>git <span class="hljs-builtin-name">add</span> [file1] [file2] <span class="hljs-built_in">..</span>.<br><br><span class="hljs-comment"># 添加指定目录到暂存区，包括子目录</span><br>git <span class="hljs-builtin-name">add</span> [dir]<br><br><span class="hljs-comment"># 添加当前目录的所有文件到暂存区</span><br>git <span class="hljs-builtin-name">add</span> .<br><br><span class="hljs-comment"># 添加每个变化前，都会要求确认</span><br><span class="hljs-comment"># 对于同一个文件的多处变化，可以实现分次提交</span><br>git <span class="hljs-builtin-name">add</span> -p<br><br><span class="hljs-comment"># 删除工作区文件，并且将这次删除放入暂存区</span><br>git rm [file1] [file2] <span class="hljs-built_in">..</span>.<br><br><span class="hljs-comment"># 停止追踪指定文件，但该文件会保留在工作区</span><br>git rm --cached [file]<br><br><span class="hljs-comment"># 改名文件，并且将这个改名放入暂存区</span><br>git mv [file-original] [file-renamed]<br></code></pre></td></tr></table></figure><p>我一般就是直接添加所有文件到暂存区,代码如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-builtin-name">add</span> -A<br></code></pre></td></tr></table></figure><hr><h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 提交暂存区到仓库区（常用）</span><br>git commit -m [message]<br><br><span class="hljs-meta"># 提交暂存区的指定文件到仓库区</span><br>git commit [file1] [file2] ... -m [message]<br><br><span class="hljs-meta"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br>git commit -a<br><br><span class="hljs-meta"># 提交时显示所有diff信息</span><br>git commit -v<br><br><span class="hljs-meta"># 使用一次新的commit，替代上一次提交</span><br><span class="hljs-meta"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br>git commit --amend -m [message]<br><br><span class="hljs-meta"># 重做上一次commit，并包括指定文件的新变化</span><br>git commit --amend [file1] [file2] ...<br></code></pre></td></tr></table></figure><hr><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 列出所有本地分支</span><br>git branch<br><br><span class="hljs-meta"># 列出所有远程分支</span><br>git branch -r<br><br><span class="hljs-meta"># 列出所有本地分支和远程分支</span><br>git branch -a<br><br><span class="hljs-meta"># 新建一个分支，但依然停留在当前分支</span><br>git branch [branch-name]<br><br><span class="hljs-meta"># 新建一个分支，并切换到该分支</span><br>git checkout -b [branch]<br><br><span class="hljs-meta"># 新建一个分支，指向指定commit</span><br>git branch [branch] [commit]<br><br><span class="hljs-meta"># 新建一个分支，与指定的远程分支建立追踪关系</span><br>git branch --track [branch] [remote-branch]<br><br><span class="hljs-meta"># 切换到指定分支，并更新工作区</span><br>git checkout [branch-name]<br><br><span class="hljs-meta"># 切换到上一个分支</span><br>git checkout -<br><br><span class="hljs-meta"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br>git branch --<span class="hljs-keyword">set</span>-upstream [branch] [remote-branch]<br><br><span class="hljs-meta"># 合并指定分支到当前分支</span><br>git merge [branch]<br><br><span class="hljs-meta"># 选择一个commit，合并进当前分支</span><br>git cherry-pick [commit]<br><br><span class="hljs-meta"># 删除分支</span><br>git branch -d [branch-name]<br><br><span class="hljs-meta"># 删除远程分支</span><br>git push origin --delete [branch-name]<br>git branch -dr [remote/branch]<br><br><span class="hljs-meta"># 本地存在一个分支，名称叫：develop_chen，但远程没有怎么办？</span><br>git push origin develop_chen<br><br>这样就在远程建立一个和本地一样的分支 <br><br>git branch --<span class="hljs-keyword">set</span>-upstream-to=origin/develop  develop  本地分支和远程分支建立跟踪关系<br></code></pre></td></tr></table></figure><hr><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 列出所有tag</span><br>git <span class="hljs-keyword">tag</span><br><br><span class="hljs-comment"># 新建一个tag在当前commit</span><br>git <span class="hljs-keyword">tag</span> <span class="hljs-title">[tag</span>]<br><br><span class="hljs-comment"># 新建一个tag在指定commit</span><br>git <span class="hljs-keyword">tag</span> <span class="hljs-title">[tag</span>] [commit]<br><br><span class="hljs-comment"># 删除本地tag</span><br>git <span class="hljs-keyword">tag</span> <span class="hljs-title">-d</span> [<span class="hljs-keyword">tag</span>]<br><br><span class="hljs-comment"># 删除远程tag</span><br>git push origin :refs/tags/[tagName]<br><br><span class="hljs-comment"># 查看tag信息</span><br>git show [<span class="hljs-keyword">tag</span>]<br><br><span class="hljs-comment"># 提交指定tag</span><br>git push [remote] [<span class="hljs-keyword">tag</span>]<br><br><span class="hljs-comment"># 提交所有tag</span><br>git push [remote] --tags<br><br><span class="hljs-comment"># 新建一个分支，指向某个tag</span><br>git checkout -b [branch] [<span class="hljs-keyword">tag</span>]<br></code></pre></td></tr></table></figure><hr><h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># 显示有变更的文件</span><br>git status<br><br><span class="hljs-comment"># 显示当前分支的版本历史</span><br>git <span class="hljs-built_in">log</span><br><br><span class="hljs-comment"># 显示commit历史，以及每次commit发生变更的文件</span><br>git <span class="hljs-built_in">log</span> <span class="hljs-comment">--stat</span><br><br><span class="hljs-comment"># 搜索提交历史，根据关键词</span><br>git <span class="hljs-built_in">log</span> -S [keyword]<br><br><span class="hljs-comment"># 显示某个commit之后的所有变动，每个commit占据一行</span><br>git <span class="hljs-built_in">log</span> [tag] HEAD <span class="hljs-comment">--pretty=format:%s</span><br><br><span class="hljs-comment"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br>git <span class="hljs-built_in">log</span> [tag] HEAD <span class="hljs-comment">--grep feature</span><br><br><span class="hljs-comment"># 显示某个文件的版本历史，包括文件改名</span><br>git <span class="hljs-built_in">log</span> <span class="hljs-comment">--follow [file]</span><br>git whatchanged [<span class="hljs-built_in">file</span>]<br><br><span class="hljs-comment"># 显示指定文件相关的每一次diff</span><br>git <span class="hljs-built_in">log</span> -p [<span class="hljs-built_in">file</span>]<br><br><span class="hljs-comment"># 显示过去5次提交</span><br>git <span class="hljs-built_in">log</span> <span class="hljs-number">-5</span> <span class="hljs-comment">--pretty --oneline</span><br><br><span class="hljs-comment"># 显示所有提交过的用户，按提交次数排序</span><br>git shortlog -sn<br><br><span class="hljs-comment"># 显示指定文件是什么人在什么时间修改过</span><br>git blame [<span class="hljs-built_in">file</span>]<br><br><span class="hljs-comment"># 显示暂存区和工作区的代码差异</span><br>git diff<br><br><span class="hljs-comment"># 显示暂存区和上一个commit的差异</span><br>git diff <span class="hljs-comment">--cached [file]</span><br><br><span class="hljs-comment"># 显示工作区与当前分支最新commit之间的差异</span><br>git diff HEAD<br><br><span class="hljs-comment"># 显示两次提交之间的差异</span><br>git diff [<span class="hljs-keyword">first</span>-branch]...[<span class="hljs-keyword">second</span>-branch]<br><br><span class="hljs-comment"># 显示今天你写了多少行代码</span><br>git diff <span class="hljs-comment">--shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><br><span class="hljs-comment"># 显示某次提交的元数据和内容变化</span><br>git show [commit]<br><br><span class="hljs-comment"># 显示某次提交发生变化的文件</span><br>git show <span class="hljs-comment">--name-only [commit]</span><br><br><span class="hljs-comment"># 显示某次提交时，某个文件的内容</span><br>git show [commit]:[filename]<br><br><span class="hljs-comment"># 显示当前分支的最近几次提交</span><br>git reflog<span class="hljs-comment"># 从本地master拉取代码更新当前分支：branch 一般为master</span><br>git rebase [branch]<br></code></pre></td></tr></table></figure><hr><h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vala">git remote update  --更新远程仓储<br><span class="hljs-meta"># 下载远程仓库的所有变动</span><br>git fetch [remote]<br><br><span class="hljs-meta"># 显示所有远程仓库</span><br>git remote -v<br><br><span class="hljs-meta"># 显示某个远程仓库的信息</span><br>git remote show [remote]<br><br><span class="hljs-meta"># 增加一个新的远程仓库，并命名</span><br>git remote add [shortname] [url]<br><br><span class="hljs-meta"># 取回远程仓库的变化，并与本地分支合并</span><br>git pull [remote] [branch]<br><br><span class="hljs-meta"># 上传本地指定分支到远程仓库</span><br>git push [remote] [branch]<br><br><span class="hljs-meta"># 强行推送当前分支到远程仓库，即使有冲突</span><br>git push [remote] --force<br><br><span class="hljs-meta"># 推送所有分支到远程仓库</span><br>git push [remote] --all<br></code></pre></td></tr></table></figure><hr><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 恢复暂存区的指定文件到工作区</span><br>git checkout [file]<br><br><span class="hljs-meta"># 恢复某个commit的指定文件到暂存区和工作区</span><br>git checkout [commit] [file]<br><br><span class="hljs-meta"># 恢复暂存区的所有文件到工作区</span><br>git checkout .<br><br><span class="hljs-meta"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br>git reset [file]<br><br><span class="hljs-meta"># 重置暂存区与工作区，与上一次commit保持一致</span><br>git reset --hard<br><br><span class="hljs-meta"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br>git reset [commit]<br><br><span class="hljs-meta"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br>git reset --hard [commit]<br><br><span class="hljs-meta"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br>git reset --keep [commit]<br><br><span class="hljs-meta"># 新建一个commit，用来撤销指定commit</span><br><span class="hljs-meta"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br>git revert [commit]<br><br><span class="hljs-meta"># 暂时将未提交的变化移除，稍后再移入</span><br>git stash<br>git stash pop<br></code></pre></td></tr></table></figure><hr><h3 id="其他（合并两个分支：Merge）"><a href="#其他（合并两个分支：Merge）" class="headerlink" title="其他（合并两个分支：Merge）"></a>其他（合并两个分支：Merge）</h3><p>1，将开发分支代码合入到master中</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git checkout dev           <span class="hljs-comment">#切换到dev开发分支</span><br>git pull<br>git checkout <span class="hljs-literal">master</span><br>git merge dev              <span class="hljs-comment">#合并dev分支到master上</span><br>git push origin <span class="hljs-keyword">master</span>     <span class="hljs-title">#将代码推到master</span>上<br></code></pre></td></tr></table></figure><p>　2，将master的代码同步更新到开发分支中</p><p>　　merge方法：保证主干提交线干净(可以安全回溯)</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git checkout <span class="hljs-literal">master</span><br>git pull<br>git checkout dev<br>git merge <span class="hljs-literal">master</span><br>git pull origin dev<br>COPY<span class="hljs-comment"># 生成一个可供发布的压缩包</span><br>git archive<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建与部署</title>
      <link href="2021/02/19/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%83%A8%E7%BD%B2/"/>
      <url>2021/02/19/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>Hexo是一款基于Node.js的静态博客框架，使用Markdown（或其他渲染引擎）解析文章，依赖少易于安装，可在几秒内利用现有主题生成静态网页。框架提供了很详细的中文文档，大家可以进入<a href="https://hexo.io/zh-cn/">Hexo官网</a>查看。</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20210219191752.png"></p><h2 id="搭建环境准备"><a href="#搭建环境准备" class="headerlink" title="搭建环境准备"></a>搭建环境准备</h2><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>Git是一个先进的分布式版本控制工具，可以有效处理不同规模的项目版本管理。这里用于管理你的Hexo文章，将本地的博客上传至Github。到Git官网选择合适的版本<a href="https://gitforwindows.org/">下载</a>，安装后会有一个Git Bash的命令行工具，之后用该工具操作Git。</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn@main/img/20210219191936.png"></p><p>检查是否安装成功：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><p>正常显示版本号，无报错即为安装成功。</p><p>另外，Windows环境下在Git安装完成后，可以使用Git Bash来进行后续命令行操作。</p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>Hexo基于Node.js，所以需要安装Node.js及npm工具。可进入Node.js中文网<a href="http://nodejs.cn/download/">下载</a>，选择LTS（长期支持版本）即可。</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210219192314.png"></p><p>检查是否安装成功：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br>npm -v<br></code></pre></td></tr></table></figure><p>正常显示版本号，无报错即为安装成功。</p><h2 id="博客本地搭建"><a href="#博客本地搭建" class="headerlink" title="博客本地搭建"></a>博客本地搭建</h2><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>右键打开Git Bash，输入命令：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>检查是否安装成功：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo -v</span><br></code></pre></td></tr></table></figure><h3 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h3><p>在电脑上新建一个文件夹作为博客的目录，例如这里我将博客目录设置为myblog，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init myblog<br><span class="hljs-built_in">cd</span> myblog<br>npm install<br></code></pre></td></tr></table></figure><h3 id="博客目录介绍"><a href="#博客目录介绍" class="headerlink" title="博客目录介绍"></a>博客目录介绍</h3><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sqf">.<br>├── <span class="hljs-variable">_config</span>.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── <span class="hljs-variable">_drafts</span><br>|   └── <span class="hljs-variable">_posts</span><br>└── themes<br><span class="hljs-variable">_config</span>.yml<br></code></pre></td></tr></table></figure><p>网站的配置信息，可以在此配置大部分的参数。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">package</span>.json<br></code></pre></td></tr></table></figure><p>应用程序的信息，新添加的插件内容也会显示在这里，可以不做修改。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">scaffolds</span><br></code></pre></td></tr></table></figure><p>模板文件夹，新建文章时，Hexo会根据scaffolds来建立文件。</p><p>Hexo的模板是指在新建的Markdown文件中默认填充的内容，我们可以在模板上添加自定义内容，比如categories，tags等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span><br></code></pre></td></tr></table></figure><p>source文件夹是存放用户资源的地方，也就是我们的博客内容。初始设置两个文件夹，posts（文章）和drafts（草稿）。之后通过命令新建页面后，文件夹数量会增加。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">themes</span><br></code></pre></td></tr></table></figure><p>主题文件夹，用于存放主题文件包，Hexo会根据主题内容生成静态页面，默认主题为landscape，可根据个人喜好进行更改。</p><h3 id="博客本地效果"><a href="#博客本地效果" class="headerlink" title="博客本地效果"></a>博客本地效果</h3><p>Git Bash执行以下命令：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo -g<br>hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>启动hexo服务，访问<a href="http://localhost:4000/">http://localhost:4000</a>即可看到生成的博客页面。使用Ctrl+C可关闭本地服务。</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210219193523.png"></p><h2 id="博客Github部署"><a href="#博客Github部署" class="headerlink" title="博客Github部署"></a>博客Github部署</h2><h3 id="创建个人仓库"><a href="#创建个人仓库" class="headerlink" title="创建个人仓库"></a>创建个人仓库</h3><p>这里需要Github账号，如果没有可以去<a href="https://github.com/join">注册</a>一个。</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202021-02-19%20194601.png"></p><p><a href="https://github.com/login">登录</a>Github，新建一个仓库，命名格式为：用户名.github.io。比如，我的用户名是muzihuaner，我的仓库名为muzihuaner.github.io`。注意这里必须按此格式命名，只有这样，之后部署到GitHub pages的时候，才会被识别。</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210219194943.png"></p><h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><p>打开Git Bash，输入以下命令，生成本地密钥。这里用户名和邮箱仅作演示，用户名为你Github的用户名，邮箱为你Github的邮箱。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.name</span> <span class="hljs-string">&quot;muzihuaner&quot;</span><br>git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> user<span class="hljs-variable">.email</span> <span class="hljs-string">&quot;xxxxxx@qq.com&quot;</span><br></code></pre></td></tr></table></figure><p>输入以下命令，检查输入是否正确：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git config <span class="hljs-keyword">user</span>.name<br>git config <span class="hljs-keyword">user</span>.email<br></code></pre></td></tr></table></figure><p>确认无误后，输入以下命令，创建SSH：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure><p>无脑下一步即可</p><p>此时在用户文件夹下，已经生成了.ssh文件夹，在本地找到这个文件夹。</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210219195310.png"></p><p><code>id_rsa</code>是你这台电脑的私人秘钥，<code>id_rsa.pub</code>是公共秘钥。把公钥放在GitHub上，当你连接自己的Github账号时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过Git上传你的文件到GitHub上。</p><p>在Github的设置中，找到<code>SSH and GPG keys</code>，新建SSH Key，以文本方式打开<code>id_rsa.pub</code>文件，将内容复制到Key，标题随便起，添加Key。</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210219195433.png"></p><h3 id="部署代码到Github"><a href="#部署代码到Github" class="headerlink" title="部署代码到Github"></a>部署代码到Github</h3><p>打开站点配置文件<code>_config.yml</code>，拉到最底部，找到deploy字段，按如下格式修改其内容：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repository:</span> git@github.com:muzihuaner/muzihuaner.github.io.git<br><span class="hljs-symbol">  branch:</span> main<br></code></pre></td></tr></table></figure><p>其中repo字段可在Github获取：</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/image-20210219195740908.png" alt="image-20210219195740908"></p><p>回到Git Bash，安装deploy-git ，用于使用命令部署到Github。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>然后执行：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean<span class="hljs-comment">//可省略</span><br>hexo <span class="hljs-keyword">generate</span><br>hexo deploy<br></code></pre></td></tr></table></figure><p>出现下图所示说明部署成功，此时代码已同步至Github。</p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/image-20210219201138121.png" alt="image-20210219201138121"></p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/image-20210219201209648.png" alt="image-20210219201209648"></p><p>打开网址<a href="http://yourname.github.io/">http://yourname.github.io</a>就可以看到Hexo博客了。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>Hexo文档中命令很多，但你并不需要记住每一个。在博客的使用过程中，主要的命令如下：</p><p><code>init</code>用于新建网站</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">hexo <span class="hljs-function"><span class="hljs-keyword">init</span> &lt;folder&gt;</span><br></code></pre></td></tr></table></figure><p><code>new</code>用于新建文章或页面</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><p><code>generate</code>用于生成静态页面</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo <span class="hljs-keyword">generate</span><br>hexo g<span class="hljs-comment">//简写</span><br></code></pre></td></tr></table></figure><p><code>deploy</code>用于将内容部署到网站</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo deploy</span><br><span class="hljs-attribute">hexo -g</span><br></code></pre></td></tr></table></figure><p><code>publish</code>用于将内容从drafts文件夹移动到posts文件夹</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">hexo publish [layout] <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>server</code>用于启动服务器进行预览，默认情况下，访问入口为<a href="http://localhost:4000/">http://localhost:4000/</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">hexo server<br>hexo s<span class="hljs-regexp">//</span>简写<br></code></pre></td></tr></table></figure><blockquote><p>实际上，除了第一次部署时，需要用到hexo init这个命令，平时写博客的过程中，最常用的就是：</p><p>hexo n 新建文章/页面</p><p>hexo g 生成静态页面</p><p>hexo s 本地查看内容</p><p>hexo d 部署到Github</p><p>如果需要清除之前生成的内容，可以在生成静态页面前执行hexo clean，其他情况只需要以上四条命令即可。</p></blockquote><p>之后你就可以使用各种各样的主题啦！详细使用主题的教程，看主题的文档就可以了哦！</p><h2 id="设置个人域名"><a href="#设置个人域名" class="headerlink" title="设置个人域名"></a>设置个人域名</h2><p>现在你的个人网站的地址是 <code>yourname.github.io</code>，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。推荐在<a href="https://cloud.tencent.com/">良心云</a>上买域名</p><p>因为Github的Page服务处于半墙状态，所以我们这里使用Vercel代理</p><p>打开<a href="https://vercel.com/">Vercel</a>，使用Github账号登录</p><p><img src="https://7bu.top/2020/08/03/cd8b433b83448.png" alt="img"></p><p><img src="https://7bu.top/2020/08/03/ac33590d3d080.png" alt="img"></p><h3 id="新建Project"><a href="#新建Project" class="headerlink" title="新建Project"></a>新建Project</h3><p><img src="https://7bu.top/2020/08/03/6e0ee45f6554e.png" alt="img"></p><p><img src="https://7bu.top/2020/08/03/d567503f63611.png" alt="img"></p><p>填写对应的github仓库https地址，单击<code>Continue</code></p><p><img src="https://7bu.top/2020/08/03/3d27e5c63bd3c.png" alt="img"></p><p>此处直接点击<code>Continue</code></p><p><img src="https://7bu.top/2020/08/03/927171c5d3909.png" alt="img"></p><p>此处可以填写下PROJECT NAME，也可默认，毕竟后面要添加域名。然后点击<code>Deploy</code>，这个Project就建好了</p><h3 id="添加域名解析记录"><a href="#添加域名解析记录" class="headerlink" title="添加域名解析记录"></a>添加域名解析记录</h3><p>在域名控制台添加域名解析记录，如下方所示。</p><table><thead><tr><th>线路类型</th><th>记录值</th></tr></thead><tbody><tr><td>默认</td><td>76.76.21.21</td></tr></tbody></table><h3 id="添加对应的域名"><a href="#添加对应的域名" class="headerlink" title="添加对应的域名"></a>添加对应的域名</h3><p>回到Vercel,点击之前创建的Project的<code>settings</code>打开设置，选择<code>Domains</code></p><p><img src="https://cdn.jsdelivr.net/gh/muzihuaner/huancdn/img/20210219202054.png"></p><p>添加对应的域名即可。</p><p>除此之外你还可以使用<a href="https://coding.net/">Coding</a>来部署博客（教程自行百度）</p><p>好了，基本的安装方法到此结束，尽情折腾吧！</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V2ray部署教程</title>
      <link href="2021/02/19/V2ray%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/"/>
      <url>2021/02/19/V2ray%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>什么是V2ray?</p><p><a href="https://www.v2ray.com/">V2Ray(Project V)</a> 相对于 Shadowsocks，V2Ray 更像全能选手，拥有更多可选择的协议 / 传输载体 (Socks、HTTP、TLS、TCP、mKCP、WebSocket )，还有强大的路由功能，不仅仅于此，它亦包含 Shadowsocks 组件，你只需要安装 V2Ray，你就可以使用所有的 V2Ray 相关的特性包括使用 Shadowsocks，由于 V2Ray 是使用 GO 语言所撰写的，天生的平台部署优势，下载即可使用</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>总结一下此文章的大致流程，此 V2Ray 教程可百分百帮助你搭建 V2Ray 使用。哪怕你只是一个小白。</p><ul><li><ul><li>购买一个 VPS<br>想要搭建 V2Ray，就必须要拥有一台 VPS。</li><li>获取 VPS 信息<br>我们必须要知道 VPS IP 地址，root 用户密码，SSH 端口</li><li>安装 SSH工具<br>要登录 VPS，当然需要 SSH 客户端</li><li>登录 VPS<br>使用 SSH 配置 VPS SSH 信息，然后登录</li><li>安装 V2Ray<br>安装过程你可以随意选择你喜欢的传输协议或者配置 Shadowsocks</li><li>V2Ray 安装完成<br>此时你可以使用客户端配置 V2Ray 使用了</li></ul></li></ul><h2 id="购买一个VPS"><a href="#购买一个VPS" class="headerlink" title="购买一个VPS"></a>购买一个VPS</h2><p>想要搭建 V2Ray， 拥有一个 VPS 是必需的。</p><p>这个嘛…为了避免广告嫌疑，自己看着买</p><p>哪个套餐好？<br>一般来说，推荐购买 香港线路 或 CN2 GIA 线路，或者哪个便宜选择那个，说着当然如果你使用量比较多或者想要分享给同学和朋友一起用的话，选择合适的套餐即可。又或者你土豪的话，选择最贵的也行。</p><p>VPS 速度：香港线路 &gt; CN2 GIA 线路 &gt; CN2 线路 &gt; 普通线路</p><p>香港套餐 VPS 的速度最快。 如果你非常在乎速度的话，建议购买香港线路的 VPS，当然，但价格贵，流量相对其他套餐来说也是比较少的……退一步的选择是 CN2 GIA 线路，这个线路的速度也比较好。</p><p>线路是比较重要的，像香港和 CN2 GIA 线路到晚上一般不会怎么炸，其他的到了晚上可能会出现很慢慢的感觉。</p><p>自己看情况买吧，嘿嘿~</p><h2 id="获取-VPS-信息"><a href="#获取-VPS-信息" class="headerlink" title="获取 VPS 信息"></a>获取 VPS 信息</h2><p>这个一般在后台或者购买时发送给你的邮件里有</p><p><a href="https://camo.githubusercontent.com/e4bba0d88229e833b97ad1a1c199bca9bef64dee0783311be6bc9cb3765d7b7d/68747470733a2f2f696d67323032302e636e626c6f67732e636f6d2f626c6f672f313738333033302f3230323031322f313738333033302d32303230313232323132323934373937322d323036323535373535332e706e67"><img src="https://camo.githubusercontent.com/e4bba0d88229e833b97ad1a1c199bca9bef64dee0783311be6bc9cb3765d7b7d/68747470733a2f2f696d67323032302e636e626c6f67732e636f6d2f626c6f672f313738333033302f3230323031322f313738333033302d32303230313232323132323934373937322d323036323535373535332e706e67" alt="img"></a></p><h2 id="安装-SSH工具"><a href="#安装-SSH工具" class="headerlink" title="安装 SSH工具"></a>安装 SSH工具</h2><p>这个工具是用来连接VPS的</p><p><strong>PC端</strong></p><p><strong>XShell：</strong></p><p><strong><a href="https://www.netsarang.com/zh/xshell/">https://www.netsarang.com/zh/xshell/</a></strong></p><p><strong>FinalShell（我用的这个）</strong></p><p><strong><a href="http://www.hostbuf.com/">http://www.hostbuf.com/</a></strong></p><p><strong>手机端</strong></p><p><strong>安卓：</strong></p><p><strong>JuiceSSH</strong></p><p><strong><a href="https://huangenet.lanzous.com/iguAEjlekmb">https://huangenet.lanzous.com/iguAEjlekmb</a></strong></p><p><strong>iOS：</strong></p><p><strong>Termius</strong></p><p><strong><a href="https://apps.apple.com/cn/app/termius-ssh-client/id549039908">https://apps.apple.com/cn/app/termius-ssh-client/id549039908</a></strong></p><h2 id="登录-VPS"><a href="#登录-VPS" class="headerlink" title="登录 VPS"></a><strong>登录 VPS</strong></h2><p><strong>这里以XShell为例：</strong></p><p>在桌面找到 Xshell ，打开它，新建一个会话。</p><p><strong><a href="https://camo.githubusercontent.com/632f5ea0e0fb486c2640a5b65e8875bee3e5516151161104271d022148e52788/68747470733a2f2f692e6c6f6c692e6e65742f323031382f31322f32372f356332346630633864373866362e6a7067"><img src="https://camo.githubusercontent.com/632f5ea0e0fb486c2640a5b65e8875bee3e5516151161104271d022148e52788/68747470733a2f2f692e6c6f6c692e6e65742f323031382f31322f32372f356332346630633864373866362e6a7067" alt="新建会话"></a></strong></p><p>主机写上你的 VPS IP 地址，端口写上 SSH 端口。</p><p><strong><a href="https://camo.githubusercontent.com/8d885adc232ab1264573f38b5449579c1c7933c71917a25ee30a89588b7a9353/68747470733a2f2f692e6c6f6c692e6e65742f323031382f31312f31382f356266313638343733353737362e706e67"><img src="https://camo.githubusercontent.com/8d885adc232ab1264573f38b5449579c1c7933c71917a25ee30a89588b7a9353/68747470733a2f2f692e6c6f6c692e6e65742f323031382f31312f31382f356266313638343733353737362e706e67" alt="new"></a></strong></p><p>之后点击 用户身份验证，用户名：<code>root</code>，密码：你的 root 密码。然后点击确定</p><p><strong><a href="https://camo.githubusercontent.com/e8caa931333c3eb9fb6c500436390b0aea980d1d4862dffa6be0672977a741e9/68747470733a2f2f692e6c6f6c692e6e65742f323031382f31312f31382f356266313638343733376633632e706e67"><img src="https://camo.githubusercontent.com/e8caa931333c3eb9fb6c500436390b0aea980d1d4862dffa6be0672977a741e9/68747470733a2f2f692e6c6f6c692e6e65742f323031382f31312f31382f356266313638343733376633632e706e67" alt="user-and-passwd"></a></strong></p><p>之后选择连接。</p><p><strong><a href="https://camo.githubusercontent.com/407a5f1979b8d5a373499130d0826aa37b6e46c260ce9beb5ff774235d89e882/68747470733a2f2f692e6c6f6c692e6e65742f323031382f31312f31382f356266313638343733396161622e706e67"><img src="https://camo.githubusercontent.com/407a5f1979b8d5a373499130d0826aa37b6e46c260ce9beb5ff774235d89e882/68747470733a2f2f692e6c6f6c692e6e65742f323031382f31312f31382f356266313638343733396161622e706e67" alt="连接"></a></strong></p><p>然后会提示SSH安全警告，选择，接受并保存。</p><p><strong><a href="https://camo.githubusercontent.com/396df3da4c4b550eb56983bb952e238ec8097fd0b7da194e4e153761c1164ddc/68747470733a2f2f692e6c6f6c692e6e65742f323031382f31312f31382f356266313566346230346337322e706e67"><img src="https://camo.githubusercontent.com/396df3da4c4b550eb56983bb952e238ec8097fd0b7da194e4e153761c1164ddc/68747470733a2f2f692e6c6f6c692e6e65742f323031382f31312f31382f356266313566346230346337322e706e67" alt="SSH 安全警告"></a></strong></p><p>这是登录成功后的界面</p><p><strong><a href="https://camo.githubusercontent.com/fdf386dcf4c7fafbfd511c08ffa700337f813a7021b77b71dd95a8fa874e14f3/68747470733a2f2f692e6c6f6c692e6e65742f323031382f31312f31382f356266313566346230636433332e706e67"><img src="https://camo.githubusercontent.com/fdf386dcf4c7fafbfd511c08ffa700337f813a7021b77b71dd95a8fa874e14f3/68747470733a2f2f692e6c6f6c692e6e65742f323031382f31312f31382f356266313566346230636433332e706e67" alt="登陆成功"></a></strong></p><p> 其他的软件基本差不多的连接步骤</p><h2 id="安装-V2Ray"><a href="#安装-V2Ray" class="headerlink" title="安装 V2Ray"></a>安装 V2Ray</h2><h3 id="一键脚本"><a href="#一键脚本" class="headerlink" title="一键脚本"></a>一键脚本</h3><p>这边推荐三个一键脚本，都是经过本人亲自测试过的，如果你是 CentOS 系统需要**<code>关闭防火墙</code><strong>或者</strong><code>放行相关端口</code>**</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta"># Centos关闭防火墙</span><br>systemctl <span class="hljs-keyword">stop</span> firewalld.service<br>systemctl <span class="hljs-keyword">disable</span> firewalld.service<br></code></pre></td></tr></table></figure><p>如果提示 <code>curl: command not found</code> ，那是因为你的 VPS 没装 <code>curl</code>，安装命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># CentOS：</span><br>yum update -y &amp;&amp; yum install curl -y<br><span class="hljs-comment"># Debian/Ubuntu：</span><br>apt-<span class="hljs-builtin-name">get</span> update -y &amp;&amp; apt-<span class="hljs-builtin-name">get</span> install curl -y<br></code></pre></td></tr></table></figure><h4 id="1-233boy-一键脚本"><a href="#1-233boy-一键脚本" class="headerlink" title="1. 233boy 一键脚本"></a>1. 233boy 一键脚本</h4><p>Github地址：<a href="https://github.com/233boy/v2ray/wiki">https://github.com/233boy/v2ray/wiki</a></p><p>233boy 的 V2Ray 搭建脚本貌似有 BUG 用户无法自定义端口，不过依然能够正常安装使用，支持单用户及多种协议，非常推荐</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># CentOS 7 、Debian 8 、Ubuntu 16 ，Debian 9（推荐）</span><br>bash &lt;(curl -s -L https:<span class="hljs-regexp">//gi</span>t.io/v2ray.sh)<br></code></pre></td></tr></table></figure><p><a href="https://camo.githubusercontent.com/44c52203600f4e0839779806c0d677b98cabd1bb992b426e3bf2504953df723a/68747470733a2f2f696d67323032302e636e626c6f67732e636f6d2f626c6f672f313738333033302f3230323031322f313738333033302d32303230313232323132343734373738372d313233333230343838332e706e67"><img src="https://camo.githubusercontent.com/44c52203600f4e0839779806c0d677b98cabd1bb992b426e3bf2504953df723a/68747470733a2f2f696d67323032302e636e626c6f67732e636f6d2f626c6f672f313738333033302f3230323031322f313738333033302d32303230313232323132343734373738372d313233333230343838332e706e67" alt="img"></a></p><h4 id="2-v2-ui-一键脚本"><a href="#2-v2-ui-一键脚本" class="headerlink" title="2. v2-ui 一键脚本"></a>2. v2-ui 一键脚本</h4><p>GitHub 地址：<a href="https://github.com/sprov065/v2-ui">https://github.com/sprov065/v2-ui</a><br>支持多协议多用户的一键安装脚本，带有 WEB管理面板，详见作者 GitHub</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">bash &lt;(curl -Ls https:<span class="hljs-regexp">//</span>blog.sprov.xyz/v2-ui.sh)<br></code></pre></td></tr></table></figure><h4 id="3-multi-v2ray-一键脚本"><a href="#3-multi-v2ray-一键脚本" class="headerlink" title="3. multi-v2ray 一键脚本"></a>3. multi-v2ray 一键脚本</h4><p>GitHub 地址：<a href="https://github.com/Jrohy/multi-v2ray">https://github.com/Jrohy/multi-v2ray</a><br>这是个脚本作者一直在维护，支持多用户及多种协议（详见作者 GitHub ）和 Docker 部署，不过个人觉得还是 233boy 版的好用</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"># 安装中文版<br><span class="hljs-keyword">source</span> &lt;(curl -sL http<span class="hljs-variable">s:</span>//multi.netlify.<span class="hljs-keyword">com</span>/v2ray.<span class="hljs-keyword">sh</span>) --zh<br></code></pre></td></tr></table></figure><p><a href="https://camo.githubusercontent.com/b057a3fcd5c988acebfdb5b1d417f427b5e6551f3214204d37bcac673e99b8b0/68747470733a2f2f696d67323032302e636e626c6f67732e636f6d2f626c6f672f313738333033302f3230323031322f313738333033302d32303230313232323132353033313431322d313836343836303939362e706e67"><img src="https://camo.githubusercontent.com/b057a3fcd5c988acebfdb5b1d417f427b5e6551f3214204d37bcac673e99b8b0/68747470733a2f2f696d67323032302e636e626c6f67732e636f6d2f626c6f672f313738333033302f3230323031322f313738333033302d32303230313232323132353033313431322d313836343836303939362e706e67" alt="img"></a></p><p> 安装方法看各自的使用说明，基本上都是“傻瓜式”安装</p><h3 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h3><h4 id="V2Ray-时间要求"><a href="#V2Ray-时间要求" class="headerlink" title="V2Ray 时间要求"></a>V2Ray 时间要求</h4><p>VPS 服务器时间与 V2Ray 客户端所在设备时间，两者最好保持一致，不要误差太大。这是 V2Ray 自身要求，与脚本无关。SSH 连接服务器，输入 <code>date</code> 命令，可以查看服务器时间。</p><p>如果时间不对，这样操作</p><p>软件时间： 查看方式 date，是是距离1970.1.1的时间差；</p><p>硬件时间： sudo hwclock -r，硬件时间是BIOS的时间。</p><p>​          -w : 将软件时间写入到硬件时间；</p><p>​          -r  : 读取硬件时间。</p><p>查看并同步软件时间和硬件时间：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">执行命令： sudo hwclock -w; hwclock -r ; <span class="hljs-built_in">date</span><br>或者 sudo hwclock <span class="hljs-comment">--systohc</span><br></code></pre></td></tr></table></figure><h4 id="V2Ray-协议说明"><a href="#V2Ray-协议说明" class="headerlink" title="V2Ray 协议说明"></a>V2Ray 协议说明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">没啥需求就用 TCP<br>追求更加安全就用 WS + TLS<br>ISP 多作怪用动态端口<br>VPS 网络不好就用 mKCP<br></code></pre></td></tr></table></figure><h3 id="v2ray配置成功，客户端连接不上报错context-deadline-exceeded"><a href="#v2ray配置成功，客户端连接不上报错context-deadline-exceeded" class="headerlink" title="v2ray配置成功，客户端连接不上报错context deadline exceeded,"></a>v2ray配置成功，客户端连接不上报错<code>context deadline exceeded</code>,</h3><p>必须关闭防火墙（或者开启对应v2ray端口和ss端口）</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gauss">systemctl status firewalld.service <span class="hljs-meta">#查看防火墙状态</span><br>systemctl <span class="hljs-keyword">stop</span> firewalld.service <span class="hljs-meta">#执行停止运行防火墙命令</span><br>systemctl <span class="hljs-keyword">disable</span> firewalld.service <span class="hljs-meta">#禁止防火墙自启动</span><br>防火墙其他命令<br>systemctl start firewalld.service <span class="hljs-meta">#启动</span><br>systemctl <span class="hljs-keyword">enable</span> firewalld.service <span class="hljs-meta">#开机启动</span><br></code></pre></td></tr></table></figure><h2 id="V2ray客户端的使用"><a href="#V2ray客户端的使用" class="headerlink" title="V2ray客户端的使用"></a>V2ray客户端的使用</h2><ol><li><ol><li><p>Windows客户端下载地址：</p><table><thead><tr><th>客户端</th><th>下载地址</th></tr></thead><tbody><tr><td>V2RayN（荐）</td><td><a href="https://github.com/2dust/v2rayN/releases">https://github.com/2dust/v2rayN/releases</a></td></tr><tr><td>Clash</td><td><a href="https://github.com/Fndroid/clash_for_windows_pkg/releases">https://github.com/Fndroid/clash_for_windows_pkg/releases</a></td></tr><tr><td>Mellow</td><td><a href="https://github.com/mellow-io/mellow/releases">https://github.com/mellow-io/mellow/releases</a></td></tr><tr><td>Qv2ray</td><td><a href="https://github.com/Qv2ray/Qv2ray/releases">https://github.com/Qv2ray/Qv2ray/releases</a></td></tr></tbody></table></li><li><p>Mac客户端下载地址：</p><table><thead><tr><th>客户端</th><th>下载地址</th></tr></thead><tbody><tr><td>V2RayU（荐）</td><td><a href="https://github.com/yanue/V2rayU/releases">https://github.com/yanue/V2rayU/releases</a></td></tr><tr><td>ClashX</td><td><a href="https://github.com/yichengchen/clashX/releases">https://github.com/yichengchen/clashX/releases</a></td></tr><tr><td>Mellow</td><td><a href="https://github.com/mellow-io/mellow/release">https://github.com/mellow-io/mellow/release</a></td></tr><tr><td>Qv2ray</td><td><a href="https://github.com/Qv2ray/Qv2ray/releases">https://github.com/Qv2ray/Qv2ray/releases</a></td></tr></tbody></table></li><li><p>Linux客户端下载地址：</p><table><thead><tr><th>客户端</th><th>下载地址</th></tr></thead><tbody><tr><td>Qv2ray</td><td><a href="https://github.com/Qv2ray/Qv2ray/releases">https://github.com/Qv2ray/Qv2ray/releases</a></td></tr><tr><td>Mellow</td><td><a href="https://github.com/mellow-io/mellow/releases">https://github.com/mellow-io/mellow/releases</a></td></tr><tr><td>V2rayL</td><td><a href="https://github.com/jiangxufeng/v2rayL/releases">https://github.com/jiangxufeng/v2rayL/releases</a></td></tr></tbody></table></li><li><p>安卓客户端下载地址：</p><table><thead><tr><th>客户端</th><th>下载地址</th></tr></thead><tbody><tr><td>V2RayNG（荐）</td><td><a href="https://github.com/2dust/v2rayNG/releases">https://github.com/2dust/v2rayNG/releases</a></td></tr><tr><td>Kitsunebi</td><td><a href="https://apkpure.com/kitsunebi/fun.kitsunebi.kitsunebi4android">https://apkpure.com/kitsunebi/fun.kitsunebi.kitsunebi4android</a></td></tr><tr><td>BifrostV</td><td><a href="https://apkpure.com/bifrostv/com.github.dawndiy.bifrostv">https://apkpure.com/bifrostv/com.github.dawndiy.bifrostv</a></td></tr></tbody></table></li><li><p>iOS客户端客户端下载地址：<br>IOS目前没有发现免费的客户端，付费的有：Shadowrocket、pepi、i2Ray、Kitsunebi 和 Quantumult，需要去美区商店下载。</p></li></ol></li></ol><h3 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h3><h2 id="Windows-客户端"><a href="#Windows-客户端" class="headerlink" title="Windows 客户端"></a>Windows 客户端</h2><h2 id="下载-V2RayN"><a href="#下载-V2RayN" class="headerlink" title="下载 V2RayN"></a>下载 V2RayN</h2><p>下载链接：<a href="https://github.com/2dust/v2rayN/releases/latest"> https://github.com/2dust/v2rayN/releases/latest</a></p><p>然后选择 v2rayN-Core.zip 下载<br>下载好了之后，解压，然后打开解压的文件夹<br>目录结构大概如下图所示</p><p><a href="https://camo.githubusercontent.com/f77e63abafeab06948a137fd26583b8493fa4e343cbec2092d68e7d6f6ce5ab2/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30382f30332f356236343262633136366432392e706e67"><img src="https://camo.githubusercontent.com/f77e63abafeab06948a137fd26583b8493fa4e343cbec2092d68e7d6f6ce5ab2/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30382f30332f356236343262633136366432392e706e67" alt="img"></a></p><h2 id="获取-V2Ray-客户端配置"><a href="#获取-V2Ray-客户端配置" class="headerlink" title="获取 V2Ray 客户端配置"></a>获取 V2Ray 客户端配置</h2><p>SSH 登录你的 VPS （如果你没登录）<br>输入 <code>v2ray url</code></p><p>然后复制 vmess 链接 （将链接全选，然后鼠标右键，再选择复制即可）</p><h2 id="配置-V2RayN"><a href="#配置-V2RayN" class="headerlink" title="配置 V2RayN"></a>配置 V2RayN</h2><p>双击 <code>v2rayN.exe</code> 启动，然后在任务栏托盘找到 V2RayN 图标并双击它<br>添加一个 VMess 服务器</p><p><a href="https://camo.githubusercontent.com/47102e31fa7029b9a8596c925bcd50983d994e069b0f27ad8e2b221bcbb26ce0/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30322f31302f356137656634663432323634632e706e67"><img src="https://camo.githubusercontent.com/47102e31fa7029b9a8596c925bcd50983d994e069b0f27ad8e2b221bcbb26ce0/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30322f31302f356137656634663432323634632e706e67" alt="img"></a></p><p>从剪贴板导入 URL</p><p><a href="https://camo.githubusercontent.com/640a5d559d00a386db8595c4547678747ca066919022546f701ecaad5226e65d/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30322f31302f356137656634663432323331312e706e67"><img src="https://camo.githubusercontent.com/640a5d559d00a386db8595c4547678747ca066919022546f701ecaad5226e65d/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30322f31302f356137656634663432323331312e706e67" alt="img"></a></p><blockquote><p>重要提醒！由于 V2RayN 暂不支持 QUIC 协议，如果是 QUIC 协议，就算导入了，也是不能正常使用的。</p></blockquote><p>设置本地监听端口，此处我将它设置为 2333</p><p><a href="https://camo.githubusercontent.com/4dd61a6487eda028ee5741e66dad7a9633c8bbb9b2dec114af328320b96e6278/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30322f31302f356137656634663432353336372e706e67"><img src="https://camo.githubusercontent.com/4dd61a6487eda028ee5741e66dad7a9633c8bbb9b2dec114af328320b96e6278/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30322f31302f356137656634663432353336372e706e67" alt="img"></a></p><h2 id="启用系统代理"><a href="#启用系统代理" class="headerlink" title="启用系统代理"></a>启用系统代理</h2><p>在任务栏托盘找到 V2RayN 图标并鼠标右键，然后选择 启动系统代理<br>并且设置 系统代理模式 》PAC 模式<br>之后在 V2RayN 主界面，找到 检查更新 》检查更新 PAC</p><h2 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h2><p>在完成上面的步骤的时候，正常来说，你已经处于翻出去的状态了<br>OK，此时你已经自由了，赶紧打开 <a href="https://www.google.com/ncr">Google</a> 找部十八减的大电影喵喵吧。哈哈</p><h2 id="MAC-平台"><a href="#MAC-平台" class="headerlink" title="MAC 平台"></a>MAC 平台</h2><h2 id="下载-V2RayX"><a href="#下载-V2RayX" class="headerlink" title="下载 V2RayX"></a>下载 V2RayX</h2><p>下载链接： <a href="https://github.com/insisttech/v2rayX-copy/releases">https://github.com/insisttech/v2rayX-copy/releases</a><br>选择 V2RayX.app.zip 下载，下载好了之后 ，解压，将 V2RayX.app 复制到 程序 文件夹。</p><h2 id="获取-V2Ray-客户端配置-1"><a href="#获取-V2Ray-客户端配置-1" class="headerlink" title="获取 V2Ray 客户端配置"></a>获取 V2Ray 客户端配置</h2><p>使用终端进行 SSH 登录你的 VPS。<br>输入<code>v2ray info</code> 回车，你会得到 V2Ray 客户端配置</p><h2 id="打开-V2RayX"><a href="#打开-V2RayX" class="headerlink" title="打开 V2RayX"></a>打开 V2RayX</h2><p>第一次打开时会出现需要安全认证的信息，此时你需要点完所有系统弹出的窗口里的<code>是</code>，<code>打开</code>，<code>确认</code>等选项，然后打开<code>系统偏好设置</code>里的<code>安全性与隐私</code>，你就会看见灰色的一条，大概意思为 “V2RayX，未被安全认证，是否打开”，后面有一个<code>仍要打开</code>的选项，点开就好。然后你就会在状态栏看到 V2RayX 图标</p><p>这个时候你点击它就可以看到如下界面：</p><p><a href="https://camo.githubusercontent.com/e9c9747fb78c1d3e9983951c0d1e740534fea76e964a856b1dffd69eae64bc0b/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30322f30392f356137646161616536366337332e706e67"><img src="https://camo.githubusercontent.com/e9c9747fb78c1d3e9983951c0d1e740534fea76e964a856b1dffd69eae64bc0b/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30322f30392f356137646161616536366337332e706e67" alt="img"></a></p><p>然后进行如下操作：</p><p><a href="https://camo.githubusercontent.com/54444e2570c991306d9b8b632105f6d3bacaff3f328171eb5d816f0f87bb8895/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30322f30392f356137646161616536613839612e706e67"><img src="https://camo.githubusercontent.com/54444e2570c991306d9b8b632105f6d3bacaff3f328171eb5d816f0f87bb8895/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30322f30392f356137646161616536613839612e706e67" alt="img"></a></p><p>1.进行相关配置</p><p><a href="https://camo.githubusercontent.com/0492b883bb90febac5fcca01949203bd347438baacdcfb2f29bd4f740c2f2744/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30322f30392f356137646161616536386264612e706e67"><img src="https://camo.githubusercontent.com/0492b883bb90febac5fcca01949203bd347438baacdcfb2f29bd4f740c2f2744/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30322f30392f356137646161616536386264612e706e67" alt="img"></a></p><p>一般的 tcp 只需按照配置在上述界面进行配置，如果有其他需求，点击高级设置选项，再进行配置。</p><p><a href="https://camo.githubusercontent.com/21f59605d042409130e428465f556ac943bde926a5a12e6ed89a809bb6336d1e/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30322f30392f356137646161616535393561382e706e67"><img src="https://camo.githubusercontent.com/21f59605d042409130e428465f556ac943bde926a5a12e6ed89a809bb6336d1e/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30322f30392f356137646161616535393561382e706e67" alt="img"></a></p><p>每一个配置界面都很简单，都是简单的单词。如果你需要 WS + TLS 的话 需要在 WS 和 TLS 界面里的框钩上就行。（有几个钩几个，文本框可以为空，如果你什么都知道的话）配置好后点击 OK 会出现如下界面</p><p><a href="https://camo.githubusercontent.com/f04d74c71d217ce4d95d192d840db73a208a8acf52163d0eaafdeb673ec1e88d/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30322f30392f356137646161616535616235392e706e67"><img src="https://camo.githubusercontent.com/f04d74c71d217ce4d95d192d840db73a208a8acf52163d0eaafdeb673ec1e88d/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30322f30392f356137646161616535616235392e706e67" alt="img"></a></p><p>点击 yes 就好。回到最初的设置界面后也是点击 OK 就完成了配置工作。</p><p>2.选择模式。自带全局和 PAC 。推荐全局配置，如果想自己更改 PAC 规则的话，菜单界面有编辑的选项可以进行更改。</p><p>3.Start V2Ray. 开启你的新世界。开启 V2RayX 后系统也就开启了代理，无需再去配置浏览器之类的。</p><h2 id="登录后自动运行"><a href="#登录后自动运行" class="headerlink" title="登录后自动运行"></a>登录后自动运行</h2><p>如果有需求加入开机自启的话可以进行如下操作：打开 macOS 系统设置 -&gt; 用户与组 -&gt; 登录项，把 V2RayX.app 添加到列表中。</p><h2 id="手动更新内核"><a href="#手动更新内核" class="headerlink" title="手动更新内核"></a>手动更新内核</h2><p>在访达（Finder）的应用程序一栏，找到 V2RayX.app，右键选择<code>显示包内容</code>，去<code>Contents/Resources/v2ray</code> 目录下替换从 <a href="https://github.com/v2ray/v2ray-core/releases/latest">v2ray-core repo</a> 下载的对应版本的内核内容。但不保证应用的兼容性。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>在使用过程中如果有问题，是软件使用的问题，要去 V2RayX 的 <a href="https://github.com/Cenmrev/V2RayX/issues">Github</a> 上提<code>issues</code>。<br>目前版本在 TLS 的使用上有一小点问题，但不影响使用。本软件开发者不是计算机专业也不是软件工程师，目前还在忙于研究生课程中，所以在更新和修改方面可能会有些慢。所以不要抱怨这个软件功能较少，基本功能可以用就好。:)</p><h2 id="安卓"><a href="#安卓" class="headerlink" title="安卓"></a>安卓</h2><h2 id="下载-V2RayNG"><a href="#下载-V2RayNG" class="headerlink" title="下载 V2RayNG"></a>下载 V2RayNG</h2><p>在 Google Play 下载： <a href="https://play.google.com/store/apps/details?id=com.v2ray.ang">V2RayNG</a> 并安装<br>或者在 Github 下载 ：<a href="https://github.com/2dust/v2rayNG/releases"> V2RayNG</a> 并安装，备注，选择 app-universal-release.apk 下载</p><h2 id="获取-V2Ray-客户端配置-2"><a href="#获取-V2Ray-客户端配置-2" class="headerlink" title="获取 V2Ray 客户端配置"></a>获取 V2Ray 客户端配置</h2><p>SSH 登录你的 VPS （如果你没登录）<br>输入 <code>v2ray qr</code> 便会得到一个链接，然后打开链接</p><h2 id="配置-V2RayNG"><a href="#配置-V2RayNG" class="headerlink" title="配置 V2RayNG"></a>配置 V2RayNG</h2><p>打开 V2RayNG<br>如果有出现一个默认的配置，先将默认的配置删除掉，点击右边的编辑图标，然后在弹出的配置窗口，再点击右上角的删除图标，将它删除。<br>回到主界面，点击右上角的 “+” 加号，选择 扫描二维码，(哪里有二维码扫描？我擦，在上面的 [获取 V2Ray 客户端配置] 那里不是叫你打开一个链接了吗)<br>OK，扫描成功<br>点击右上角的菜单 (就是那三个点啊)，选择 设置，将 路由 修改为 绕过大陆地址，之后返回主界面<br>点击右下角的小灰机图标，然后会有一个提示，确定它。<br>Okay，搞定。此时你可以翻墙了，就是那么简单。<br>此时你已经自由了，赶紧打开 <a href="https://www.google.com/ncr">Google</a> 找部十八减的大电影喵喵吧。哈哈</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>其实写这个教程有点多余啦，软件之类的都那么简单明了，是个正常人都会配置<br>在 V2RayNG 设置里面还有一个 分应用代理，这个东东就是说，想要说指定相关的程序走代理，如果不设置这个，默认情况下就是所有的程序都走代理<br>那个 MUX 多路复用，一般情况下不建议打开<br>在安卓上，还有一个可能比较好用的 V2Ray 的客户端叫 <a href="https://play.google.com/store/apps/details?id=com.github.dawndiy.bifrostv">BifrostV</a> ，如果你觉得 V2RayNG 用着不顺手的话，可以试试看用它的</p><h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><h2 id="kitsunebi"><a href="#kitsunebi" class="headerlink" title="kitsunebi"></a>kitsunebi</h2><p>目前对 V2Ray 支持最完全的应用，支持所有 vmess 链接使用方案，国区有售，支持 TestFlight。<br>kitsunebi 的 testflight 自动申请页面：<a href="https://docs.google.com/forms/d/1-1ZuYA1qkyDfAn6qzUzNEV3YVZbgr__7b6aFBiKeNHc/closedform">https://docs.google.com/forms/d/1-1ZuYA1qkyDfAn6qzUzNEV3YVZbgr__7b6aFBiKeNHc/closedform</a></p><p><strong>备注一下：kitsunebi 如果搜索不到，请使用 Kitsunebi Lite</strong><br>如何使用<br>1，扫码导入服务器配置 ( 推荐 )，在小鸡上输入 <code>v2ray qr</code> 将会得到扫码链接，打开扫码即可。</p><p><a href="https://camo.githubusercontent.com/d491c0e85c062c05a566fac2c1c304bb643a217b5c062c58cda2ca998f6e4da0/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30332f31302f356161336532393462323736662e6a7067"><img src="https://camo.githubusercontent.com/d491c0e85c062c05a566fac2c1c304bb643a217b5c062c58cda2ca998f6e4da0/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30332f31302f356161336532393462323736662e6a7067" alt="kitsunebi"></a></p><p>支持自动导入一键脚本以及由 V2rayN 生成的二维码，<strong>需手动输入 AlterId</strong>。</p><p>2，手动填写服务器配置<br>点击右上 “+” 号导入新服务器，根据服务端配置填写。</p><p><a href="https://camo.githubusercontent.com/e288f292b8ba5420f7594ad68a39ca8e7ab2aa06f6accd983ec90d1b75c161cc/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30332f31302f356161336532393462343065342e706e67"><img src="https://camo.githubusercontent.com/e288f292b8ba5420f7594ad68a39ca8e7ab2aa06f6accd983ec90d1b75c161cc/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30332f31302f356161336532393462343065342e706e67" alt="kitsunebi"></a></p><p>备注：如果你使用 WS+TLS 方式，记得要配置好路径。</p><h2 id="Shadowrocket"><a href="#Shadowrocket" class="headerlink" title="Shadowrocket"></a>Shadowrocket</h2><p>泛用性极高的代理软件，俗称小火箭。除 vmess 外也支持 ss、ssR、socks5、HTTP、Lua 等类型。缺点是不支持 Vmess KCP，<strong>国区无售</strong>。</p><p>如何使用：<br>1，手动填写服务器配置 ( 推荐 )<br>shadowrocket 不支持扫入一键脚 本或 V2rayN 生成的二维码。如何填写以及注意事项见以下。<br><strong>如果你是使用 TCP 协议的，混淆记得选择 none</strong></p><p><a href="https://camo.githubusercontent.com/a45dcabb33646d7e4846105159b61188ad0c5b4fa98a3450534384f480891813/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30332f31342f356161383762326631313631392e6a7067"><img src="https://camo.githubusercontent.com/a45dcabb33646d7e4846105159b61188ad0c5b4fa98a3450534384f480891813/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30332f31342f356161383762326631313631392e6a7067" alt="Shadowrocket"></a></p><p>备注：如果你使用 WS+TLS 方式，记得要配置好 WS 的路径。</p><p>2，扫码导入服务器配置 ( 不推荐 )<br>正如之前所说，shadowrocket 不支持扫入一键脚本或 V2rayN 生成的二维码，只能扫入 shadowrocket 导出的 vmess 服务器设置，所以这种导入方式没有泛用性。</p><h2 id="Pepi-原-ShadowRay"><a href="#Pepi-原-ShadowRay" class="headerlink" title="Pepi ( 原 ShadowRay )"></a>Pepi ( 原 ShadowRay )</h2><p>由 shadowrocket 同作者开发的针对 vmess 的应用。缺点是只能从状态球的颜色判断服务器状态，同样不支持 Vmess KCP，<strong>国区无售</strong>，设置类 shadowrocket，如果已经拥有了小火箭，不建议重复购买。</p><p>如何使用：<br>手动填写服务器配置<br>进入 Servers 页面，点击右上 “+” 号导入新服务器，根据服务端配置填写。</p><p><a href="https://camo.githubusercontent.com/0a30c68a4c5bc21d807806a4e5675f26cf20b46fcbdae928bd3e9e707b3204a6/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30332f31302f356161336532393462623930622e706e67"><img src="https://camo.githubusercontent.com/0a30c68a4c5bc21d807806a4e5675f26cf20b46fcbdae928bd3e9e707b3204a6/68747470733a2f2f692e6c6f6c692e6e65742f323031382f30332f31302f356161336532393462623930622e706e67" alt="Pepi"></a></p><h2 id="结束-1"><a href="#结束-1" class="headerlink" title="结束"></a>结束</h2><p>iOS 上的 V2Ray 客户端相的配置对来说会比较麻烦一些，其实自己注意一下一些选项就行。</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>能耍 Linux 的都是大佬了，我懒得写。</p><p>好了就这些</p><h1 id="请勿违反国家法律法规，否则后果自负！-低调低调低调。"><a href="#请勿违反国家法律法规，否则后果自负！-低调低调低调。" class="headerlink" title="请勿违反国家法律法规，否则后果自负！ 低调低调低调。"></a>请勿违反国家法律法规，否则后果自负！ 低调低调低调。</h1><h1 id="文章参考："><a href="#文章参考：" class="headerlink" title="文章参考："></a>文章参考：</h1><p><strong>centos搭建v2ray</strong></p><p><strong><a href="https://blog.ziyiu.com/2020/06/05/Centos%E6%9C%8D%E5%8A%A1%E5%99%A8/centos%E6%90%AD%E5%BB%BAv2ray/">https://blog.ziyiu.com/2020/06/05/Centos%E6%9C%8D%E5%8A%A1%E5%99%A8/centos%E6%90%AD%E5%BB%BAv2ray/</a></strong></p><p><strong>V2Ray搭建详细图文教程</strong></p><p><strong><a href="https://github.com/233boy/v2ray/wiki/V2Ray%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B">https://github.com/233boy/v2ray/wiki/V2Ray%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B</a></strong></p><p><strong>V2Ray一键安装脚本 支持多用户管理以及多种协议</strong></p><p><strong><a href="https://m1314.cn/341.html">https://m1314.cn/341.html</a></strong></p><p><strong>V2Ray 各平台客户端使用教程 - V2Ray 教程</strong></p><p><strong><a href="https://233v2.com/post/4/">https://233v2.com/post/4/</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> V2ray </tag>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VPS服务器性能测试脚本</title>
      <link href="2021/02/19/VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/"/>
      <url>2021/02/19/VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/muzihuaner/huangeimages/raw/master/img/20210219091623.png"></p><p><a href="https://res.iowen.cn/wp-content/uploads/2019/04/SSHIJJB.png"></a>本脚本雨落大佬写的，将秋水的<code>Bench.sh</code>和<code>Oldking</code>的<code>SuperBench</code>结合了，然后加入<code>Ping</code>以及路由测试功能，可以详细的测试出服务器系统信息，下载速度，到国内的带宽，<code>Ping</code>值等等，还可以生成<code>html</code>网页进行查看，很不错。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><strong>Github地址：</strong><a href="https://www.iowen.cn/go/?url=aHR0cHM6Ly9naXRodWIuY29tL0Z1bmN0aW9uQ2x1Yi9aQmVuY2g=">https://github.com/FunctionClub/ZBench</a></p><p>如果中文版出现乱码等情况，请换成英文版。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#中文版：</span><br>wget -N --no-check-certificate https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/FunctionClub/</span>ZBench<span class="hljs-regexp">/master/</span>ZBench-CN.sh &amp;&amp; bash ZBench-CN.sh<br><br><span class="hljs-comment">#英文版：</span><br>wget -N --no-check-certificate https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/FunctionClub/</span>ZBench<span class="hljs-regexp">/master/</span>ZBench.sh &amp;&amp; bash ZBench<br></code></pre></td></tr></table></figure><h3 id="截图演示"><a href="#截图演示" class="headerlink" title="截图演示"></a>截图演示</h3><p><img src="https://gitee.com/muzihuaner/huangeimages/raw/master/img/20210219091717.png"></p>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vps </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一款带Web面板的轻量级、高性能内网穿透工具：nps使用教程</title>
      <link href="2021/02/19/%E4%B8%80%E6%AC%BE%E5%B8%A6Web%E9%9D%A2%E6%9D%BF%E7%9A%84%E8%BD%BB%E9%87%8F%E7%BA%A7%E3%80%81%E9%AB%98%E6%80%A7%E8%83%BD%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7%EF%BC%9Anps%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>2021/02/19/%E4%B8%80%E6%AC%BE%E5%B8%A6Web%E9%9D%A2%E6%9D%BF%E7%9A%84%E8%BD%BB%E9%87%8F%E7%BA%A7%E3%80%81%E9%AB%98%E6%80%A7%E8%83%BD%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7%EF%BC%9Anps%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/muzihuaner/huangeimages/raw/master/img/20210219090820.png"></p><p><a href="https://www.iowen.cn/tag/neiwangchuantou/">内网穿透</a>工具有不少了，比如Frp、lanproxy、Holer等，现在再介绍个带Web面板的穿透工具nps，之前叫easyProxy，只是改名了而已，该工具是一款使用go语言编写的轻量级、功能强大的内网穿透服务器。支持tcp、udp流量转发，支持内网http、socks5代理，同时支持snappy压缩(节省带宽和流量)、站点保护、加密传输、多路复用、header修改等。同时还支持web图形化管理。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Github地址：<a href="https://github.com/cnlh/nps">https://github.com/cnlh/nps</a></p><p>通常内网穿透工具都有服务端和客户端，安装要求如下：</p><p>服务端：需要安装在一个有公网IP的服务器上，系统为Linux/<a href="https://www.iowen.cn/tag/windows/">Windows</a>/Mac均可。<br>客户端：一般安装在一个内网的VPS服务器或Windows/Mac电脑上使用。</p><h4 id="1、编译安装"><a href="#1、编译安装" class="headerlink" title="1、编译安装"></a>1、编译安装</h4><p>提示：编译安装主要讲的Linux系统，其它系统(Win/Mac，也包括Linux)建议直接使用作者编译好的文件即可。<br>安装Go语言：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go">#Debian/Ubuntu系统<br>apt-get -y install golang<br>#创建目录并定义GOPATH环境变量指向该目录<br>mkdir ~/workspace<br>echo <span class="hljs-string">&#x27;export GOPATH=&quot;$HOME/workspace&quot;&#x27;</span> &gt;&gt; ~/.bashrc<br>source ~/.bashrc<br><br>#CentOS/RHEL系统<br>yum -y install golang<br>#创建目录并定义GOPATH环境变量指向该目录。<br>mkdir ~/workspace<br>echo <span class="hljs-string">&#x27;export GOPATH=&quot;$HOME/workspace&quot;&#x27;</span> &gt;&gt; ~/.bashrc<br>source ~/.bashrc<br></code></pre></td></tr></table></figure><p>安装git：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#Debian/Ubuntu系统</span><br>apt-<span class="hljs-keyword">get</span> -y install git<br><br><span class="hljs-meta">#CentOS/RHEL系统</span><br>yum -y install git<br></code></pre></td></tr></table></figure><p>安装源码：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span> github.<span class="hljs-keyword">com</span>/cnlh/nps<br></code></pre></td></tr></table></figure><p>编译服务端和客户端：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#进入指定目录</span><br>cd ~<span class="hljs-regexp">/workspace/</span>src<span class="hljs-regexp">/github.com/</span>cnlh/nps<br><span class="hljs-comment">#编译服务端</span><br>go build cmd<span class="hljs-regexp">/nps/</span>nps.go<br><span class="hljs-comment">#编译客户端</span><br>go build cmd<span class="hljs-regexp">/npc/</span>npc.go<br></code></pre></td></tr></table></figure><p>编译好了后，就会在当前目录生成npc或nps二进制文件了，就可以直接拿来用了。</p><p>编译的时候可能出现的问题解决方法：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle">#只拿一种常见的错误做例子，有时候可能会出现很多种这样的提示<br>lib<span class="hljs-regexp">/kcp/</span>crypt.go:<span class="hljs-number">14</span>:<span class="hljs-number">2</span>: cannot <span class="hljs-keyword">find</span> <span class="hljs-keyword">package</span> <span class="hljs-string">&quot;golang.org/x/crypto/pbkdf2&quot;</span> in <span class="hljs-keyword">any</span> of:<br>    <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/go-1.7/</span>src<span class="hljs-regexp">/golang.org/</span>x<span class="hljs-regexp">/crypto/</span>pbkdf2 (<span class="hljs-keyword">from</span> $GOROOT)<br>    <span class="hljs-regexp">/root/</span>workspace<span class="hljs-regexp">/src/g</span>olang.org<span class="hljs-regexp">/x/</span>crypto/pbkdf2 (<span class="hljs-keyword">from</span> $GOPATH)<br><br>#意思是缺少这种包，然后记住提示的地址，比如上面的golang.org<span class="hljs-regexp">/x/</span>crypto/pbkdf2，有时候也会提示的github地址。<br><br>然后再使用命令go get golang.org<span class="hljs-regexp">/x/</span>crypto/pbkdf2命令安装一下就行了。<br></code></pre></td></tr></table></figure><h4 id="2、直接安装"><a href="#2、直接安装" class="headerlink" title="2、直接安装"></a>2、直接安装</h4><p>除了自己编译外，作者也直接提供了编译好的文件给你使用，文件下载地址：点击进去，然后再根据自己的系统架构下载对应的最新版服务端和客户端。</p><p>如果对于Linux服务器还是不知道怎么选择的，这里拿Vultr、搬瓦工大多数VPS为例。先使用命令getconf LONG_BIT获取系统版本，32位就选386，64就选amd64，具体还是以实际情况为准。</p><h3 id="服务端使用"><a href="#服务端使用" class="headerlink" title="服务端使用"></a>服务端使用</h3><p>这里博主使用的是Vultr Linux x64服务器，直接使用命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#记得复制前先将下面链接替换成当前最新版地址</span><br>cd ~<br><span class="hljs-comment">#下载并解压服务端</span><br>wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/cnlh/</span>nps<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v0.0.14/</span>linux_amd64_server.tar.gz &amp;&amp; tar zxvf linux_amd64_server.tar.gz<br><span class="hljs-comment">#编辑配置文件</span><br>cd nps<br>nano conf/nps.conf<br></code></pre></td></tr></table></figure><p>配置文件参数如下：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#web管理端口</span><br>httpport<br><span class="hljs-meta">#web界面管理密码</span><br>password<br><span class="hljs-meta">#服务端客户端通信端口</span><br>bridePort<br><span class="hljs-meta">#ssl certFile绝对路径</span><br>pemPath<br><span class="hljs-meta">#ssl keyFile绝对路径</span><br>keyPath<br><span class="hljs-meta">#域名代理https代理监听端口</span><br>httpsProxyPort<br><span class="hljs-meta">#域名代理http代理监听端口</span><br>httpProxyPort<br><span class="hljs-meta">#web api免验证IP地址</span><br>authip<br><span class="hljs-meta">#客户端与服务端连接方式kcp或tcp</span><br>bridgeType<br></code></pre></td></tr></table></figure><p>然后启动服务端：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">./nps <span class="hljs-literal">start</span><br><br><span class="hljs-comment">#重启/停止服务端</span><br>./nps <span class="hljs-literal">stop</span>|restart<br></code></pre></td></tr></table></figure><p>然后打开地址<a href="http://ip:8080访问管理界面，具体端口以自己修改的为准，再使用密码登录进去，默认为123。">http://ip:8080访问管理界面，具体端口以自己修改的为准，再使用密码登录进去，默认为123。</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#如果打不开Web界面，就需要开启防火墙，一般CentOS系统出现情况最多</span><br><span class="hljs-comment">#Centos 6系统</span><br>iptables -I INPUT -p tcp --dport 8080 -j ACCEPT<br>service iptables save<br>service iptables restart<br><br><span class="hljs-comment">#CentOS 7系统</span><br>firewall-cmd <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=8080/tcp --permanent <br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><p>对于有些服务器，比如阿里云，谷歌云等，还需要在服务器管理面板上开放Web端口才行。</p><h3 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h3><h4 id="1、Linux系统"><a href="#1、Linux系统" class="headerlink" title="1、Linux系统"></a>1、Linux系统</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#比如下载的客户端文件在根目录，先进入根目录</span><br>cd ~<br><span class="hljs-comment">#启动客户端，比如服务端公网IP为1.1.1.1，服务端配置文件中tcpport为8284</span><br>./npc <span class="hljs-attribute">-server</span>=1.1.1.1:8284 <span class="hljs-attribute">-vkey</span>=客户端的密钥<br></code></pre></td></tr></table></figure><h4 id="2、Windows系统"><a href="#2、Windows系统" class="headerlink" title="2、Windows系统"></a>2、Windows系统</h4><p>首先按住Win+R，输入cmd进入命令窗口，然后使用命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#比如下载的客户端文件在D盘，先进入到D盘</span><br>cd /d d:<br><span class="hljs-comment">#启动客户端，比如服务端公网IP为1.1.1.1，服务端配置文件中tcpport为8284</span><br>npc.exe <span class="hljs-attribute">-server</span>=1.1.1.1:8284 <span class="hljs-attribute">-vkey</span>=客户端的密钥<br></code></pre></td></tr></table></figure><p>至于Mac系统启动参考上面就行。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>关于使用场景，Github文档写的很清楚了，这里大概的说下</p><h4 id="1、tcp隧道模式"><a href="#1、tcp隧道模式" class="headerlink" title="1、tcp隧道模式"></a>1、tcp隧道模式</h4><p>适用：想在外网通过ssh连接内网的机器，做云服务器到内网服务器端口的映射，或者做微信公众号开发、小程序开发等。</p><h4 id="2、udp隧道模式"><a href="#2、udp隧道模式" class="headerlink" title="2、udp隧道模式"></a>2、udp隧道模式</h4><p>适用：在非内网环境下使用内网dns，或者需要通过udp访问内网机器等。</p><h4 id="3、http代理模式"><a href="#3、http代理模式" class="headerlink" title="3、http代理模式"></a>3、http代理模式</h4><p>适用：在外网使用HTTP代理访问内网站点。</p><h4 id="4、socks5代理模式"><a href="#4、socks5代理模式" class="headerlink" title="4、socks5代理模式"></a>4、socks5代理模式</h4><p>适用：搭建一个内网穿透55，在外网如同使用内网v皮n一样访问内网资源或者设备。</p><h3 id="相关功能"><a href="#相关功能" class="headerlink" title="相关功能"></a>相关功能</h3><h4 id="1、数据压缩支持"><a href="#1、数据压缩支持" class="headerlink" title="1、数据压缩支持"></a>1、数据压缩支持</h4><p>由于是内网穿透，内网客户端与服务端之间的隧道存在大量的数据交换，为节省流量，加快传输速度，由此本程序支持SNNAPY形式的压缩。</p><p>所有模式均支持数据压缩，可以与加密同时使用<br>开启此功能会增加cpu和内存消耗<br>在server端加上参数-compress=snappy(或在web管理中设置)</p><h4 id="2、加密传输"><a href="#2、加密传输" class="headerlink" title="2、加密传输"></a>2、加密传输</h4><p>如果公司内网防火墙对外网访问进行了流量识别与屏蔽，例如禁止了ssh协议等，通过设置配置文件，将服务端与客户端之间的通信内容加密传输，将会有效防止流量被拦截。</p><p>开启此功能会增加cpu和内存消耗<br>在server端加上参数-crypt=true(或在web管理中设置)</p><h4 id="3、站点保护"><a href="#3、站点保护" class="headerlink" title="3、站点保护"></a>3、站点保护</h4><p>域名代理模式所有客户端共用一个http服务端口，在知道域名后任何人都可访问，一些开发或者测试环境需要保密，所以可以设置用户名和密码，nps将通过Http Basic Auth来保护，访问时需要输入正确的用户名和密码。</p><p>web管理中可配置</p><h4 id="4、host修改"><a href="#4、host修改" class="headerlink" title="4、host修改"></a>4、host修改</h4><p>由于内网站点需要的host可能与公网域名不一致，域名代理支持host修改功能，即修改request的header中的host字段。</p><p>在web管理中设置</p><h4 id="5、自定义header"><a href="#5、自定义header" class="headerlink" title="5、自定义header"></a>5、自定义header</h4><p>支持对header进行新增或者修改，以配合服务的需要。</p><h4 id="6、404页面配置"><a href="#6、404页面配置" class="headerlink" title="6、404页面配置"></a>6、404页面配置</h4><p>支持域名解析模式的自定义404页面，修改/web/static/page/error.html中内容即可，暂不支持静态文件等内容。</p><h4 id="7、流量限制"><a href="#7、流量限制" class="headerlink" title="7、流量限制"></a>7、流量限制</h4><p>支持客户端级流量限制，当该客户端入口流量与出口流量达到设定的总量后会拒绝服务，域名代理会返回404页面，其他会拒绝连接。</p><h4 id="8、带宽限制"><a href="#8、带宽限制" class="headerlink" title="8、带宽限制"></a>8、带宽限制</h4><p>支持客户端级带宽限制，带宽计算方式为入口和出口总和，权重均衡。</p><h4 id="9、负载均衡"><a href="#9、负载均衡" class="headerlink" title="9、负载均衡"></a>9、负载均衡</h4><p>本代理支持域名解析模式的负载均衡，在web域名添加或者编辑中内网目标分行填写多个目标即可实现轮训级别的负载均衡。</p><h4 id="10、守护进程"><a href="#10、守护进程" class="headerlink" title="10、守护进程"></a>10、守护进程</h4><p>本代理支持守护进程，使用示例如下，服务端客户端所有模式通用，支持linux、darwin、windows。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coq">./(nps|<span class="hljs-type">npc</span>) start|<span class="hljs-type">stop</span>|<span class="hljs-type">restart</span>|<span class="hljs-type">status</span> 若有其他参数可加其他参数<br>(nps|<span class="hljs-type">npc</span>).exe start|<span class="hljs-type">stop</span>|<span class="hljs-type">restart</span>|<span class="hljs-type">status</span> 若有其他参数可加其他参数<br></code></pre></td></tr></table></figure><h4 id="11、KCP协议支持"><a href="#11、KCP协议支持" class="headerlink" title="11、KCP协议支持"></a>11、KCP协议支持</h4><p>KCP是一个快速可靠协议，能以比TCP浪费10%-20%的带宽的代价，换取平均延迟降低30%-40%，在弱网环境下对性能能有一定的提升。可在app.conf中修改bridgeType为kcp。</p><p>当服务端为kcp时，客户端连接时也需要加上参数-type=kcp。</p><p>该工具很强大，更多的使用可以自行研究</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown简单用法</title>
      <link href="2021/02/18/MarkDown%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/"/>
      <url>2021/02/18/MarkDown%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/muzihuaner/huangeimages/raw/master/img/wuoPxS.png" alt="封面图"></p><p>Markdown 是一种轻量级标记语言，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。</p><h2 id="1-常用语法"><a href="#1-常用语法" class="headerlink" title="1.常用语法"></a>1.常用语法</h2><ul><li><p>标题<br>1~4个<code>#</code>加上空格，代表4个字号的标题</p></li><li><p>高亮强调：<br><code>就是两个反引号把内容括起来</code> ``</p></li><li><p>引用符号： <code>&gt;</code></p><blockquote><p>用来突出内容</p></blockquote></li><li><p><strong>字体加粗</strong> ：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**字体加粗**</span> <br></code></pre></td></tr></table></figure></li><li><p><em>字体斜体</em>：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">*字体斜体*</span>：<br></code></pre></td></tr></table></figure></li><li><p>菜单：<br>菜单用-、+、*加空格都可以</p></li><li><p>链接：</p><ul><li><p>格式：[标签名字]（链接地址）</p></li><li><p>百度</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-attr">[百度]</span>(<span class="hljs-attribute">https</span>:<span class="hljs-comment">//www.baidu.com)</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>网址：</p><ul><li><p>常规样式：<a href="https://www.jianshu.com/u/97ee21e3f77f">https://www.jianshu.com/u/97ee21e3f77f</a></p></li><li><p>超链接样式：</p><p><a href="https://www.jianshu.com/u/97ee21e3f77f">https://www.jianshu.com/u/97ee21e3f77f</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">&lt;https:<span class="hljs-regexp">//</span>www.jianshu.com<span class="hljs-regexp">/u/</span><span class="hljs-number">97</span>ee21e3f77f&gt;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>插入图片</p><ul><li><p>例：<img src="https://i.loli.net/2020/01/09/n9bcw14OXN82lMD.png" alt="test.png"></p></li><li><p>代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">![描述](图片地址)<br><span class="hljs-meta">#</span><span class="bash">例如： ![blog头像图片](../images/blog.jpg)</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>分割线：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 就是<span class="hljs-number">3</span>个星号<br>***<br></code></pre></td></tr></table></figure><p>或者用html标签<code>&lt;hr&gt;</code></p><hr></li><li><p>视频：</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;video&quot;</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">preload</span>=<span class="hljs-string">&quot;none&quot;</span> <span class="hljs-attr">poster</span>=<span class="hljs-string">&quot;https://i.loli.net/2020/01/09/n9bcw14OXN82lMD.png&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mp4&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://video.pearvideo.com/mp4/third/20200109/cont-1640431-10042874-102056-hd.mp4&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/mp4&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>音频：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;audio&quot;</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">preload</span>=<span class="hljs-string">&quot;none&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mp3&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://qiniu.cloud.fandong.me/Music_iP%E8%B5%B5%E9%9C%B2%20-%20%E7%A6%BB%E6%AD%8C%20%28Live%29.mp3&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-代码块"><a href="#2-代码块" class="headerlink" title="2.代码块"></a>2.代码块</h2><p>以Python为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 示例 ```python</span><br><span class="hljs-keyword">import</span> os<br>print(<span class="hljs-string">&#x27;python 代码块？&#x27;</span>)<br><span class="hljs-comment"># OC和html同理：ObjectiveC、html</span><br></code></pre></td></tr></table></figure><h2 id="3-表格"><a href="#3-表格" class="headerlink" title="3.表格:"></a>3.表格:</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> 左对齐 </span>|<span class="hljs-string"> 居中  </span>|<span class="hljs-string"> 右对齐 </span>|<br>|<span class="hljs-string"> ------ </span>|<span class="hljs-string"> :---: </span>|<span class="hljs-string"> -----: </span>|<br>|<span class="hljs-string"> 香蕉   </span>|<span class="hljs-string">  $1   </span>|<span class="hljs-string">      5 </span>|<br>|<span class="hljs-string"> 苹果   </span>|<span class="hljs-string">  $1   </span>|<span class="hljs-string">      6 </span>|<br>|<span class="hljs-string"> 草莓   </span>|<span class="hljs-string">  $1   </span>|<span class="hljs-string">      7 </span>|<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">左对齐</th><th align="center">居中</th><th align="right">右对齐</th></tr></thead><tbody><tr><td align="left">香蕉</td><td align="center">$1</td><td align="right">5</td></tr><tr><td align="left">苹果</td><td align="center">$1</td><td align="right">6</td></tr><tr><td align="left">草莓</td><td align="center">$1</td><td align="right">7</td></tr></tbody></table><h2 id="4-锚点"><a href="#4-锚点" class="headerlink" title="4.锚点"></a>4.锚点</h2><p>可以利用html的a标签，进行锚点跳转，例：A、B互跳</p><p><a href="https://daning.netlify.app/post/markdown-note/#sssss">锚点A</a></p><p><a href="https://daning.netlify.app/post/markdown-note/#text">锚点B</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#sssss&quot;</span>&gt;</span>锚点A<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sssss&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#text&quot;</span>&gt;</span>锚点B<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-快捷键"><a href="#4-快捷键" class="headerlink" title="4.快捷键"></a>4.快捷键</h2><ul><li><strong>字体加粗</strong> ：conmmond + b</li><li><em>字体斜体</em>：conmmond + i</li><li>标题VSCode快捷键<br>变大： shift + ctrl + [<br>缩小： shift + ctrl + ]</li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github-jsDelivr-PicGo的图床方案</title>
      <link href="2021/02/18/Github-jsDelivr-PicGo%E7%9A%84%E5%9B%BE%E5%BA%8A%E6%96%B9%E6%A1%88/"/>
      <url>2021/02/18/Github-jsDelivr-PicGo%E7%9A%84%E5%9B%BE%E5%BA%8A%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Github-jsDelivr-PicGo的图床方案"><a href="#使用Github-jsDelivr-PicGo的图床方案" class="headerlink" title="使用Github+jsDelivr+PicGo的图床方案"></a>使用Github+jsDelivr+PicGo的图床方案</h1><p>最近一直在寻找好用的图床，SM.MS的速度越来越堪忧，其他的就怕跑路，所以就看上了Github，但由于G站在国内一直处于半墙的状态，所以就用CDN加速，再通过PicGO一键上传，且GitHub的空间完全够个人博客的使用。<br>CDN:<em>内容分发网络（英语：Content Delivery Network或Content Distribution Network，缩写：CDN）是指一种透过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、视频、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。</em></p><h2 id="新建一个仓库"><a href="#新建一个仓库" class="headerlink" title="新建一个仓库"></a>新建一个仓库</h2><p>注意要勾选Public，进行公开</p><p><a href="https://cdn.jsdelivr.net/gh/Braqr/photo_bed/%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93.png"><img src="https://cdn.jsdelivr.net/gh/Braqr/photo_bed/%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93.png" alt="新建一个仓库"></a></p><h2 id="获取Token"><a href="#获取Token" class="headerlink" title="获取Token"></a>获取Token</h2><p><a href="https://github.com/settings/tokens/new">生成Token</a></p><p><a href="https://cdn.jsdelivr.net/gh/Braqr/photo_bed/tk.png"><img src="https://cdn.jsdelivr.net/gh/Braqr/photo_bed/tk.png" alt="TK"></a><br><a href="https://cdn.jsdelivr.net/gh/Braqr/photo_bed/tk1.png"><img src="https://cdn.jsdelivr.net/gh/Braqr/photo_bed/tk1.png" alt="2"></a></p><p>在主页选择Settings-Developer settings-Personal access tokens-Generate new token，填写好描述，勾选repo，然后点击Generate token生成Token，复制好，待会需要填入PicGo。</p><h2 id="下载PicGo"><a href="#下载PicGo" class="headerlink" title="下载PicGo"></a>下载PicGo</h2><p><a href="https://github.com/Molunerfinn/PicGo">PicGo项目地址</a></p><h2 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h2><p><img src="https://gitee.com/muzihuaner/huangeimages/raw/master/img/20210218202337.png"></p><ul><li>第一项：填写好自己的仓库名</li><li>第二项：填写默认master</li><li>第三项：填写刚刚生成过的token</li><li>第四项：填写你想储存的路径，不填则是根目录</li><li>第五项：<a href="https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E5%9B%BE%E5%BA%8A%E4%BB%93%E5%BA%93%E5%90%8D/%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84">https://cdn.jsdelivr.net/gh/用户名/图床仓库名/图片路径</a> 来加速图片</li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>可以直接通过拖拽图片进行上传啦</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> jsDelivr </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
