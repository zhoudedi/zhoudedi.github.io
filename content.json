{"meta":{"title":"点滴记忆","subtitle":"你知道的越多，你不知道的越多。","description":"点滴记忆：你知道的越多，你不知道的越多。","author":"木子欢儿","url":"https://blog.quickso.cn","root":"/"},"pages":[{"title":"about","date":"2020-02-23T11:20:33.000Z","updated":"2021-02-21T07:17:50.486Z","comments":false,"path":"about/index.html","permalink":"https://blog.quickso.cn/about/index.html","excerpt":"","text":"简介男，00后大学生。国内某不知名三本院校 智能科学与技术专业 大二 职业：学生&amp;极客 常用昵称：木子欢儿、欢哥 爱好 敲代码 电子产品，包括软件和硬件，例如 树莓派 摄影：没事拍拍 单机小游戏：GTA5… 音乐：流行音乐… … 喜欢的话“Stay hungry, Stay foolish”——乔布斯在斯坦福大学毕业典礼的演讲 联系方式：QQ：2209514944 Wechat：Purehuaner Mail：&#x6d;&#x75;&#122;&#x69;&#104;&#x75;&#x61;&#110;&#x65;&#x72;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#x6d;"}],"posts":[{"title":"Nexus9刷机全纪录","slug":"Nexus9刷机全纪录","date":"2021-06-29T06:35:05.000Z","updated":"2021-06-29T07:52:10.051Z","comments":true,"path":"2021/06/29/Nexus9刷机全纪录/","link":"","permalink":"https://blog.quickso.cn/2021/06/29/Nexus9%E5%88%B7%E6%9C%BA%E5%85%A8%E7%BA%AA%E5%BD%95/","excerpt":"","text":"最近从某海鲜市场花了200软妹币购买了Nexus9，2+32GB的，具体参数可以看这里，NVIDIA Tegra K1的CPU 原系统是谷歌原生7.X，把玩了半天，发现卡的不能，所以还是刷个鸡吧！顺便记录一下 步骤1.解锁BL锁下载安装Nexus Root Toolkit 官方： NRT_v2.1.9.sfx.exe | by WugFresh for Generic Device/Other (androidfilehost.com) 我的网盘： NRT_v2.1.9.sfx.exe - 蓝奏云 (lanzoui.com) 一路next安装好后，按照图示数字开启刷机之旅…… 开发者选项，打开 OEM 锁，打开 USB 调试点 unlock 解锁（好像也可以用命令 [adb fastboot flashing unlock / fastboot oem unlock] 装 adb 环境（好像装 nexus root toolkit 时会自动把 adb 也装上） 解锁好后 进入bootloader 会显示 unlocked 2.安装第三方REC-twrp下载（下载最新版本即可）： TeamWin - TWRP 拷贝twrp到指定目录以twrp-3.5.2_9-0-flounder.img为例，将twrp-3.5.2_9-0-flounder.img拷贝到Nexus Root Toolkit的默认安装目录下 1C:\\Program Files (x86)\\WugFresh Development\\Nexus Root Toolkit\\data 进入bootloader模式设备关机，**同时按住电源键和音量键上（直到进入界面后方可松开）**，选择进入bootloader模式 当然你也可以用命令 1adb reboot bootloade 刷入twrp在dos模式下进入C:\\Program Files (x86)\\WugFresh Development\\Nexus Root Toolkit\\data目录，输入如下命令： 1fastboot flash recovery twrp-3.5.2_9-0-flounder.img 之后 1fastboot boot twrp-x.x.x-x.img 进入REC模式 之后的操作都在 twrp 里进行 3.刷机⑴备份（也可以忽略） * 点 backup* 命令 [adb pull xxx xxx] 保存到电脑里 （2）清除数据（三清）点 wipe，全选点 format data 还有一个滑动的那个也执行了 （3）刷机 命令 [adb push xxx /sdcard/] 把需要装的包传进手机 ①点 install，刷 [驱动] vendor-flounder-n9f27m.img，在文件列表的右下角，点 install image 才会显示 img 后缀的文件 ②点 install，刷 [系统] Resurrection Remix Oreo for Nexus 9 ③点 install，刷 [内核] ElementalX-N9 （8.1.0的那个） ④点 install，刷 [gapps] The Open GApps Project ⑤点 install，刷 [root] root包 SuperSU-v2.82-nexus9 ⑥刷机完成 4.跳过激活原因你懂的，安装android原生系统后，无法在wifi环境下激活，因此强烈推荐手工修改系统文件跳过激活步骤 A、设备关机，同时按住电源键和音量键（直到进入界面后方可松开），进入bootloader状态 B、选择音量增减键进入recovery模式 C、选择界面中mount，勾选system分区并挂载 D、adb修改系统文件 12345cd C:\\Program Files (x86)\\WugFresh Development\\Nexus Root Toolkit\\dataadb shellecho &quot;ro.setupwizard.mode=DISABLED&quot; &gt;&gt; /system/build.propexitadb reboot 小伙伴终于可以愉快玩耍了 平板应用推荐 https://www.coolapk.com/album/28085545 参考文档： nexus9刷机全记录_chj113的专栏-CSDN博客_nexus9刷机 刷机 全过程 记录 LineageOS 14.1 Nexus 9 (Wi-Fi)【nexus9吧】_百度贴吧 (baidu.com) [ROM][OFFICIAL] LineageOS 14.1 for Nexus 9 (flounder) | XDA Forums (xda-developers.com) [RR OREO] Nexus 9 Resurrection Remix OREO 8. 1 Download (cyanogenmods.org) [KERNEL] [January 29] ElementalX-N9 5.17 (Nougat) 7.03 (Oreo) | XDA Forums (xda-developers.com)","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Nexus9","slug":"Nexus9","permalink":"https://blog.quickso.cn/tags/Nexus9/"}]},{"title":"树莓派自动化推流摄像头到Bilibili直播","slug":"树莓派自动化推流摄像头到Bilibili直播","date":"2021-06-12T01:33:28.000Z","updated":"2021-06-12T01:52:07.822Z","comments":true,"path":"2021/06/12/树莓派自动化推流摄像头到Bilibili直播/","link":"","permalink":"https://blog.quickso.cn/2021/06/12/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A8%E6%B5%81%E6%91%84%E5%83%8F%E5%A4%B4%E5%88%B0Bilibili%E7%9B%B4%E6%92%AD/","excerpt":"","text":"树莓派/玩客云闲置怎么办？用来直播推流呀 withsalt/BilibiliLiveTools: Bilibili直播工具 直播间演示： https://live.bilibili.com/21577989 准备工作 （1）前提条件 a.首先要有一个树莓派，并连接了摄像头（USB摄像头）。并能够访问网络。b.在Bilibili中通过实名认证，并开通了直播间。点击连接开通直播间（很简单的，实名认证通过后直接就可以开通了）c.FFmpeg。推流默认使用FFmpeg，树莓派官方系统默认安装了的，我就不再赘述，其它系统请自行安装。 （2）获取程序 下载编译好的程序： 1wget https://github.com/withsalt/BilibiliLiveTools/releases/download/2.0.2/BilibiliLiver_Linux_ARM.zip （2）解压并授权 1unzip BilibiliLiver_Linux_ARM.zip &amp;&amp; chmod -R 755 BilibiliLiver_Linux_ARM &amp;&amp; chmod +x BilibiliLiver_Linux_ARM/BilibiliLiver （3）编辑配置文件 编辑用户配置文件User.json 12cd BilibiliLiver_Linux_ARM/nano appsettings.json 编辑直播配置文件 1234567891011121314151617181920212223&#123; &quot;AppSetting&quot;: &#123; //加密密钥，一般不需要修改，要修改的话，至少需要16位 &quot;Key&quot;: &quot;ac131de1-ed20-499f-8fdf-dede054dbaad&quot; &#125;, &quot;LiveSetting&quot;: &#123; //直播间分类 &quot;LiveCategory&quot;: &quot;369&quot;, //直播间名称 &quot;LiveRoomName&quot;: &quot;【24H】小金鱼啦~&quot;, //FFmpeg推流命令，请自行填写对应操作系统和设备的推流命令，默认为树莓派，且摄像头设备为‘/dev/video0’ //填写到此处时，请注意将命令中‘&quot;’用‘\\’进行转义，将推流的rtmp连接替换为[[URL]]，[[URL]]不需要双引号。 &quot;FFmpegCmd&quot;: &quot;ffmpeg -f dshow -video_size 1280x720 -i video=\\&quot;5M USB CAM\\&quot; -vcodec libx264 -pix_fmt yuv420p -r 30 -s 1280*720 -g 60 -b:v 5000k -an -preset:v ultrafast -tune:v zerolatency -f flv [[URL]]&quot;, //ffmpeg异常退出后，是否自动重新启动 &quot;AutoRestart&quot;: true &#125;, &quot;UserSetting&quot;: &#123; //B站账号 &quot;Account&quot;: &quot;*********&quot;, //B站密码，放心填写，没有后门 &quot;Password&quot;: &quot;*********&quot; &#125;&#125; 由于推流方式不同以及FFmpeg配置的多边性，这里采用直接填写推流命令的方式。建议填写之前先测试推流命令能否正确执行。默认的推流命令设配树莓派官方系统，其它系统可能不适用，需要自己修改。 推流命令（FFmpegCmd）中的“[[URL]]”，是一个配置符号，将在程序中被替换为获取到的Bilibili推流地址，所以一定要在最终命令中，把测试文件或者地址修改为 “[[URL]]”（URL大写） ，否则程序将抛出错误。推流命令中注意半角双引号需要用符号‘\\’来进行转义。 FFmpeg的使用请查看最后一节：FFmpeg的使用 开始直播 执行推流程序。推流程序将会自动开启B站直播，并获取推流地址，然后执行预设的FFmpeg推流命令。 1sudo ./BilibiliLiver 输出下面的就表示开始直播啦~ 开始直播输出 如果希望在后台持续直播，可以将上面一条命令替换为： 1sudo nohup ./BilibiliLiver /dev/null 2&gt;live.log 程序将会在后台运行。 或者编写一个系统服务，设置开机启动，控制开始关闭推流什么的。 1sudo nano /etc/systemd/system/bilibiliLiver.service 将下方代码中的执行路径替换为BilibiliLiver程序所在的绝对路径。比如“/home/pi/BilibiliLiver_Linux_ARM/BilibiliLiver”，注意大小写。 1234567891011121314[Unit]Description=BilibiliLiverAfter=network.target[Service]WorkingDirectory=BilibiliLiver所在路径，比如/home/pi/BilibiliLiver_Linux_ARMExecStart=BilibiliLiver所在路径包含程序的路径，比如/home/pi/BilibiliLiver_Linux_ARM/BilibiliLiverRestart=alwaysSyslogIdentifier=BilibiliLiver ToolUser=rootEnvironment=ASPNETCORE_ENVIRONMENT=Production[Install]WantedBy=multi-user.target 执行start，开启推流服务。 1sudo systemctl start bilibiliLiver 检查命令是否配置正确已经程序是否正常工作。 1sudo systemctl status bilibiliLiver 其它服务维护命令。 123sudo systemctl stop bilibiliLiver #停止推流服务sudo systemctl enable bilibiliLiver #设置开机启动sudo systemctl disable bilibiliLiver #禁用开机启动 FFmpeg的使用 无论是Windows还是Linux，运行环境无论是PC还是树莓派，如果使用FFmpeg推流，都要在上面安装好FFmpeg，并在命令行中执行ffmpeg -version后可以准确的获取ffmpeg的相关信息。 ffmpeg命令行输出 至于如何在各种环境中安装ffmpeg我就不在此赘述，网上有很多详细的教程。树莓派官方系统是内置了ffmpeg的，不用自己再编译安装。 以下是树莓派Raspbian系统中推流命令： 1234567891011#推流USB摄像头（包含音频，音频源为音频文件）ffmpeg -thread_queue_size 512 -f video4linux2 -s 1280*720 -input_format mjpeg -i &quot;视频源&quot; -stream_loop -1 -i &quot;音频源&quot; -vcodec h264_omx -pix_fmt yuv420p -r 30 -s 1280*720 -g 60 -b:v 10M -bufsize 10M -acodec aac -ac 2 -ar 44100 -ab 128k -f flv &quot;推流地址&quot;#推流USB摄像头（包含音频，音频源麦克风）ffmpeg -thread_queue_size 512 -f video4linux2 -s 1280*720 -input_format mjpeg -i &quot;视频源&quot; -i &quot;音频源&quot; -vcodec h264_omx -pix_fmt yuv420p -r 30 -s 1280*720 -g 60 -b:v 10M -bufsize 10M -acodec aac -ac 2 -ar 44100 -ab 128k -f flv &quot;推流地址&quot;#推流USB摄像头（不包含音频）ffmpeg -thread_queue_size 512 -f video4linux2 -s 1280*720 -i &quot;视频源&quot; -vcodec h264_omx -pix_fmt yuv420p -r 30 -s 1280*720 -g 60 -b:v 10M -bufsize 10M -an -f flv &quot;推流地址&quot;#推流视频ffmpeg -re -i &quot;视频源&quot; -vcodec copy -acodec aac -b:a 192k -f flv &quot;推流地址&quot; 以下是Windows系统中推流命令： 1234567891011#推流USB摄像头（包含音频，音频源为音频文件）ffmpeg -f dshow -s 1280*720 -r 1024 -i video=&quot;视频源&quot; -stream_loop -1 -i &quot;音频源&quot; -vcodec libx264 -pix_fmt yuv420p -r 30 -s 1280*720 -g 60 -b:v 5000k -acodec aac -ac 2 -ar 44100 -ab 128k -preset:v ultrafast -tune:v zerolatency -f flv &quot;推流地址&quot;#推流USB摄像头（包含音频，音频源麦克风）ffmpeg -f dshow -s 1280*720 -r 1024 -i video=&quot;视频源&quot; -i &quot;音频源&quot; -vcodec libx264 -pix_fmt yuv420p -r 30 -s 1280*720 -g 60 -b:v 5000k -acodec aac -ac 2 -ar 44100 -ab 128k -preset:v ultrafast -tune:v zerolatency -f flv &quot;推流地址&quot;#推流USB摄像头（不包含音频）ffmpeg -f dshow -s 1280*720 -r 1024 -i video=&quot;视频源&quot; -vcodec libx264 -pix_fmt yuv420p -r 30 -s 1280*720 -g 60 -b:v 5000k -an -preset:v ultrafast -tune:v zerolatency -f flv &quot;推流地址&quot;#推流视频ffmpeg -re -i &quot;视频源&quot; -vcodec copy -acodec aac -b:a 192k -f flv &quot;推流地址&quot; 以上命令没有经过仔细测试，不同环境需要不同的参数，请自行学习FFmpeg的用法。 FFmpeg基本用法： ffmpeg [全局选项] {[输入文件选项] -i 输入文件} … {[输出文件选项] 输出文件} … 参数简单介绍： -f：输入格式（video4linux2 ） -i：输入源 -s：视频分辨率 -r：所需的帧率 -vcodec：视频编解码器 -vb：视频比特率 -bufsize：缓冲区大小（对于流来说很重要） -vf：像素格式 -g：GOP（图片组，对于流式传输很重要） -an：不使用音频 -f：输出格式 ffmpeg翻译文档.pdf - 蓝奏云 (lanzoui.com) 树莓派在使用FFmpeg推流时，帧数大概在10帧左右，这个帧数并不理想，而且还在用树莓派硬件解码的情况下。但是也是目前我能找到的最优解了","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"玩客云","slug":"玩客云","permalink":"https://blog.quickso.cn/tags/%E7%8E%A9%E5%AE%A2%E4%BA%91/"},{"name":"树莓派","slug":"树莓派","permalink":"https://blog.quickso.cn/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"},{"name":"FFmpeg","slug":"FFmpeg","permalink":"https://blog.quickso.cn/tags/FFmpeg/"}]},{"title":"在玩客云上部署code-server","slug":"在玩客云上部署code-server","date":"2021-06-05T06:49:06.000Z","updated":"2021-06-05T07:06:04.984Z","comments":true,"path":"2021/06/05/在玩客云上部署code-server/","link":"","permalink":"https://blog.quickso.cn/2021/06/05/%E5%9C%A8%E7%8E%A9%E5%AE%A2%E4%BA%91%E4%B8%8A%E9%83%A8%E7%BD%B2code-server/","excerpt":"","text":"介绍Code-server 是在远程服务器上运行的VS Code，通过浏览器访问。 在你的Chromebook、平板、笔记本上用一样的环境来进行开发 如果你有Windows或Mac工作站，也可以轻松地在Linux上开发 利用云服务器来加快测试、编译、下载等操作 不论在哪永远在线 所有的计算都在云端进行 不需要再运行过多的Chrome实例 Code-server → https://coder.com/ GitHub → https://github.com/linuxserver/docker-code-server Docker Hub → https://hub.docker.com/r/linuxserver/code-server 支持的系统架构得益于docker的跨平台属性，我们的镜像也支持多架构（如，x86-64、arm64、armhf）。 直接拉取 ghcr.io/linuxserver/code-server 应该就可以自动获取适合你系统架构的版本，当然你也可以通过 tag 获取特定的版本。 架构 Tag x86-64 amd64-latest arm64 arm64v8-latest armhf arm32v7-latest 玩客云是32位的，所以也可以用这个 部署方法你需要先安装好Docker ，方法自行百度 部署命令 123456789101112docker run -d \\ --name=code-server \\ -e PUID=1000 \\ -e PGID=1000 \\ -e TZ=Europe/London \\ -e PASSWORD=password \\ -e SUDO_PASSWORD=password \\ -e PROXY_DOMAIN=code-server.my.domain \\ -p 8443:8443 \\ -v /path/to/appdata/config:/config \\ --restart unless-stopped \\ linuxserver/code-server 参数Docker镜像在使用的时候需要配置一些参数，这些参数使用 : 分隔，分别表示 宿主机:容器内。例如 -p 8080:80 指的是将容器内的80端口映射到宿主机上的8080端口，即通过宿主机网络访问的话，访问8080端口即是访问容器内的80端口。 端口（-p） port 说明 8443 WEB界面 环境变量（-e） env 说明 PUID=1000 用户的 UID，详见下面的说明 PGID=1000 用户的 GID，详见下面的说明 TZ=Europe/London 设置时区，在国内的话可以使用 Asia/Shanghai PASSWORD=password Web界面的密码，如果不设置则不会启用认证 SUDO_PASSWORD=password 如果设置了该项，则在服务器的终端上用该密码使用sudo PROXY_DOMAIN=code-server.my.domain 反向代理相关的设置，具体参阅这里 卷映射（-v） volume 说明 /config 配置文件所在路径 从文件加载环境变量可以使用前缀名为 FILE__ 的文件来加载环境变量。 例： 1-e FILE__PASSWORD=/run/secrets/mysecretpassword 将把 /run/secrets/mysecretpassword 文件中的内容作为 PASSWORD 变量的值。 UID和GID当使用 -v 映射卷的时候，宿主机和容器内会出现关于权限的问题，我们的镜像可以通过指定 PUID 和 GUID 来避免此类问题。 可以使用你目前正在使用的用户的UID和GID进行设置，这样就不会存在权限问题。 可以通过如下的方式查看当前用户的UID和GID： 12$ id $user uid=1000(dockeruser) gid=1000(dockergroup) groups=1000(dockergroup) 安装说明访问WEB界面：http://ip:8443 如果要使用GitHub，把ssh密钥放在 /config/.ssh 文件夹 然后在菜单中打开终端，设置github的用户名和邮箱 12git config --global user.name &quot;username&quot;git config --global user.email &quot;email address&quot; 想换成中文，在拓展那里搜索“Chinese”,找到“简体中文”安装，重新加载页面即可。 哈哈哈，快去压榨玩客云的性能吧！","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"VsCode","slug":"VsCode","permalink":"https://blog.quickso.cn/tags/VsCode/"},{"name":"玩客云","slug":"玩客云","permalink":"https://blog.quickso.cn/tags/%E7%8E%A9%E5%AE%A2%E4%BA%91/"}]},{"title":"基于宝塔面板的Google镜像网站设置教程","slug":"基于宝塔面板的Google镜像网站设置教程","date":"2021-05-20T11:25:43.000Z","updated":"2021-05-20T11:30:11.962Z","comments":true,"path":"2021/05/20/基于宝塔面板的Google镜像网站设置教程/","link":"","permalink":"https://blog.quickso.cn/2021/05/20/%E5%9F%BA%E4%BA%8E%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF%E7%9A%84Google%E9%95%9C%E5%83%8F%E7%BD%91%E7%AB%99%E8%AE%BE%E7%BD%AE%E6%95%99%E7%A8%8B/","excerpt":"","text":"建立站点在宝塔面板后台点击：网站-添加站点-输入网站域名 反向代理设置安装面板后新建站点，然后设置站点选择反向代理（如下图所示） 然后设置反向代理 123456目标URL是： https://www.google.com.hk发送域名也是： www.google.com.hk#注意：目标URL一定是www.google.com.hk 后缀为二级区域域名.hk或者.sg。否则会出现无法反代，连续多跳的问题。 SSL设置点击SSL-开启https强制运行（这一步一定要有，因为谷歌目前已经强制https，所以镜像站点同样要以https运行）","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Google","slug":"Google","permalink":"https://blog.quickso.cn/tags/Google/"},{"name":"宝塔","slug":"宝塔","permalink":"https://blog.quickso.cn/tags/%E5%AE%9D%E5%A1%94/"}]},{"title":"小米路由器mini刷openwrt系统","slug":"小米路由器mini刷openwrt系统","date":"2021-04-24T11:58:22.000Z","updated":"2021-04-24T12:20:23.849Z","comments":true,"path":"2021/04/24/小米路由器mini刷openwrt系统/","link":"","permalink":"https://blog.quickso.cn/2021/04/24/%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A8mini%E5%88%B7openwrt%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"前言这个路由器有16M的ROM，还能装点东西，比斐讯K2还是好使得多，可以刷功能较齐备的openwrt，顺便搞个去广告，科学上网等 刷机步骤小米路由器要刷其他系统，需要先获得SSH权限，而获得SSH权限则需要先刷开发版 只有开发版系统才能开启SSH权限，所以第一步我们需要将路由器系统刷为开发版。到小米路由官网去下载开发版系统ROM，建议直接刷这个版本小米路由器mini MiWiFi 开发版 0.8.11 非常重要，如果版本高了，不能开启SSH，版本低了没有修改root用户的api。 刷开发版刷入开发版非常简单，步骤如下： 将上面下载好的固件改名为：miwifi.bin ，放入一个U盘的根目录，U盘需要是 FAT32 格式 U盘插到路由屁股上，拿根取卡针等尖头物件顶住 reset ，然后插入电源 路由器指示灯先会常亮黄色，等指示灯狂闪后就可以松开 reset 了，然后静候路由器指示灯变成蓝色 以上做完就完成刷入开发版的步骤了。如果指示灯是红色，那么代表这个固件有问题，重新更换固件，断电再走一遍流程就可以了，不用担心会变砖。 开启SSH权限系统刷好开发版后，我们就可以开启系统的SSH权限了。开启SSH权限，需要登录官方网站下载对应的工具包： 请将下载的工具包 bin 文件复制到U盘（FAT/FAT32 格式）的根目录下，保证文件名为 miwifi_ssh.bin 「如果之前刷开发版用的同一个U盘，那之前放的 miwifi.bin 删除掉不需要多说吧？」； 断开小米路由器的电源，将U盘插入USB接口； 抵住 reset 按钮之后重新插上电源，指示灯变为黄色闪烁状态即可松开 reset 键； 等待3-5秒后安装完成之后，小米路由器会自动重启 官方给每个账号提供了一个随机的root密码，为了管理方便，我们可以登录后用 passwd 命令将root密码改成我们自己好记得的 刷完 miwifi_ssh.bin 后，我们可以用Xshell等SSH客户端连接登录路由器，我这里使用的是FinalShell 如果不成功（红灯）就换个固件或者U盘 刷BreedSSH权限搞定后，我们要做的是换个BootLoder系统，大名鼎鼎的Breed（Boot and Recovery Environment for Embedded Devices）便是不二选择。 要刷入Breed也不复杂，操作步骤如下： 1.下载Breed固件在Breed固件列表，查找自己设备所需的版本，小米路由器mini需要的是这个：breed-mt7620-xiaomi-mini.bin 2.备份原有的BootLoder使用SSH客户端连接登录路由系统，输入以下命令： 1dd if=/dev/mtd1 of=/tmp/xiaomi_uboot.bin 系统返回，说明已经将原来的xiaomi_uboot.bin备份到/tmp： 12384+0 records in384+0 records out 备份完成后将备份文件下载到本地妥善保存，用不到就最好了。不知道怎么下载？那就扔了不要了吧，就当这步备份操作白做了，反正出了问题自己负责o(￣︶￣)o 3.刷Breed用sftp之类工具把Breed固件上传到 /tmp 目录下，如果不会传那也可以ssh登录路由系统后执行下面的命令直接从网上下载： 12cd /tmpwget http://down.sobaigu.com/files/breed-mt7620-xiaomi-mini.bin 这里，我的路由器wget用不了，所以下载WinSCP，把下载好的固件上传到 /tmp 目录下 然后执行以下写入命令： 1mtd -r write /tmp/breed-mt7620-xiaomi-mini.bin Bootloader 眨眼的功夫就刷写完成了，完成后关闭路由拔掉电源，找取卡针之类的尖物件抵住 reset 按钮，插上电源开机，等到路由指示灯狂闪的时候，就可以松开 reset 键，然后在用网线连接在该路由上的Wan口浏览器登录 192.168.1.1 就可以进入 Breed web恢复控制台 界面了，就如上面那个截图。 刷固件在刷固件前，建议使用Breed固件备份功能，将原路由所有的项目备份好以备用，同样的用不到最好。 因为路由有16M的ROM，所以可选的固件还是蛮多的，潘朵拉，华硕改等固件都行，在此推荐一个，个人觉着还蛮不错的，功能也齐全：小米路由器Mini Lean R9.7.6 自编译固件 选择 固件更新 》点击 固件 右侧的 选择文件 ，选择刚下载的固件文件，然后点上传，不一会儿就完成了，新系统默认后台信息为： 123IP： 192.168.1.1用户： root密码： password 至此，路由器系统脱胎换骨完成，有广告屏蔽，有科学上网还支持订阅地址，V2Ray，支持局域网网络唤醒设备，提供打印机服务…… 有点小瑕疵，可能有内存泄露开久了会死机，带宽监控统计图表不展示之类的，设置下每周定时重启，完全OK，知足常乐！ 更换Wan口的MAC地址在SSH中输入 1vi /etc/config/network 修改其中一段 123456789101112config &#x27;interface&#x27; &#x27;lan&#x27; option &#x27;type&#x27; &#x27;bridge&#x27; option &#x27;ifname&#x27; &#x27;eth0.0&#x27; option &#x27;proto&#x27; &#x27;static&#x27; option &#x27;netmask&#x27; &#x27;255.255.255.0&#x27; option &#x27;ipaddr&#x27; &#x27;192.168.200.1&#x27; option &#x27;macaddr&#x27; &#x27;d8:64:c7:5e:f1:c6&#x27;config &#x27;interface&#x27; &#x27;wan&#x27; option &#x27;ifname&#x27; &#x27;eth0.1&#x27; option &#x27;proto&#x27; &#x27;dhcp&#x27; option &#x27;macaddr&#x27; &#x27;d8:64:c7:5e:f1:c6&#x27; 修改Wan口Mac地址即可 之后保存，reboot 重启，就能看到所有修改都生效了。","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"小米","slug":"小米","permalink":"https://blog.quickso.cn/tags/%E5%B0%8F%E7%B1%B3/"},{"name":"路由器","slug":"路由器","permalink":"https://blog.quickso.cn/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"},{"name":"Openwrt","slug":"Openwrt","permalink":"https://blog.quickso.cn/tags/Openwrt/"}]},{"title":"为玩客云或树莓派安装LNMP和PhpMyAdmin","slug":"树莓派安装MySQL和PhpMyAdmin","date":"2021-04-09T15:01:55.000Z","updated":"2021-04-10T23:47:03.110Z","comments":true,"path":"2021/04/09/树莓派安装MySQL和PhpMyAdmin/","link":"","permalink":"https://blog.quickso.cn/2021/04/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85MySQL%E5%92%8CPhpMyAdmin/","excerpt":"","text":"一、更换国内源，修改为清华镜像源（PS. 如果不更换，可能…………）备份原文件： 12sudo cp /etc/apt/sources.list /etc/apt/sources.list.baksudo cp /etc/apt/sources.list.d/raspi.list /etc/apt/sources.list.d/raspi.list.bak 更改系统源文件： 1sudo vim /etc/apt/sources.list 将原内容注释掉，然后添加： 12deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpideb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi 更改系统源： 1sudo vim /etc/apt/sources.list.d/raspi.list 将原内容注释并改为 12deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main uideb-src http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui 玩客云： 1234567891011deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal main restricted universe multiverse# deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal main restricted universe multiversedeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse# deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-security main restricted universe multiversedeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse# deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiversedeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse# deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse 更新软件包索引 12sudo apt-get updatesudo apt-get upgrade 一、安装Nginx安装Nginx，输入下面的命令 1sudo apt-get install -y nginx 安装完毕后启动nginx服务： 1sudo service nginx restart 二、安装PHP安装PHP7.0，输入下面的命令 1sudo apt-get install -y nginx php7.0-fpm php7.0-cli php7.0-curl php7.0-gd php7.0-mcrypt php7.0-cgi php7.0-mysql php7.0-mbstring 安装完毕后启动php7.0服务 1sudo service php7.0-fpm restart 三、安装MySQL（MariaDB） 「重要前提」上面的 “更新软件包索引” 必须执行成功之后，才能进行安装 安装MySQL（MariaDB） 1sudo apt-get install mariadb-server 运行 mysql_secure_installation 工具： 1sudo mysql_secure_installation 根据向导指引进行相关设置： 第一步： “输入 root 的当前密码：”，默认为空，直接按Enter即可； 第二步： “设置 root 密码？”，这里请输入 Y 并按 Enter。设置 root 登陆密码确保数据安全。然后向导将要求输入新密码和确认密码。 第三步： “删除匿名用户？”，输入 Y 或 N 并按 Enter。 第四步： “禁止远程 root 登录？”，输入 Y 或 N 并按 Enter；根据自己需要设置，我这里设置为N。 第五步： “删除测试数据库并访问它？”，输入 Y 或 N 并按 Enter。 开始尽情使用 MySQL 吧： 1sudo mysql -u root -p 输入前面设置的密码并回车，然后……就和我们平时使用的 mysql 一样了！ 四、配置Nginx+PHP+MySQL1.配置Nginx让它能处理 PHP 1sudo nano /etc/nginx/sites-available/default 找到下面这段代码： 12345location / &#123; # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. try_files $uri $uri/ =404;&#125; 在这段代码的{}里面，添加一行代码：index index.html index.htm index.php; 123456location / &#123; # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. try_files $uri $uri/ =404; index index.html index.htm index.php;&#125; 再找到下面的代码： 12345678#location ~ \\.php$ &#123; # include snippets/fastcgi-php.conf; # # # With php-fpm (or other unix sockets): # fastcgi_pass unix:/var/run/php/php7.0-fpm.sock; # # With php-cgi (or other tcp sockets): # fastcgi_pass 127.0.0.1:9000; #&#125; 改为：（注意要去掉location 和 }前面的“#”号） 12345678910location ~ \\.php$ &#123; # include snippets/fastcgi-php.conf; # # # With php-fpm (or other unix sockets): fastcgi_pass unix:/run/php/php7.0-fpm.sock; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; # # With php-cgi (or other tcp sockets): # fastcgi_pass 127.0.0.1:9000; &#125; Ctrl + O 保存再 Ctrl + X 退出。最后重启 Nginx 即可： 1sudo service nginx restart 测试运行php文件，在/var/www/html/目录下新建一个index.php文件，这里直接su获取最高权限来完成： 123456pi@raspberrypi:~ $ su密码：《输入你的root密码》root@raspberrypi:/home/pi# cat &gt;/var/www/html/index.php #回车进入编辑状态&lt;?phpphpinfo();?&gt; 好了，用浏览器打开http:// 树莓派的IP你就可以看到熟悉的页面啦！ 配置MySQL，允许远程连接用shell登录mysql： 123456789101112131415#默认无密码，直接回车mysql -u root -p#设置允许远程连接并修改root密码，123456为root用户的新密码，%代表所有主机UPDATE mysql.user SET host=&#x27;%&#x27;,authentication_string=PASSWORD(&#x27;123456&#x27;), PLUGIN=&#x27;mysql_native_password&#x27; WHERE USER=&#x27;root&#x27;;#刷新权限FLUSH PRIVILEGES;#退出myslqexit#重启mysql服务sudo service mysql restart 如果远程连接提示“100061”错误，那就继续修改/etc/mysql/mariadb.conf.d文件夹中的50-server.cnf文件 123456789#用nano打开50-server.cnfsudo nano /etc/mysql/mariadb.conf.d/50-server.cnf#修改其中的bind-address为bind-address = 0.0.0.0#Ctrl + O 保存再 Ctrl + X 退出,并重启mysql服务即可生效。sudo service mysql restart 五、安装PhpMyAdmin1.要将PHPMyAdmin软件包安装到树莓派中，需要运行以下命令。 1sudo apt install phpmyadmin 2.PHPMyAdmin现在将开始安装到树莓派。在此过程中，系统将会询问你已经运行的Web服务器类型。 我这里使用的是nginx，所以点击Esc退出，你可以根据自己的情况选择 安装完毕后，再把phpmyadmin链接到/var/www/html目录下 1sudo ln -s /usr/share/phpmyadmin /var/www/html 浏览器打开 http:// 树莓派ip/phpmyadmin 就可以用root和新密码登录管理mysql数据库了！！ 好了，到这里就差不多结束了，遇到问题要多使用搜索引擎搜索哦！不要放弃，慢慢来。","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"玩客云","slug":"玩客云","permalink":"https://blog.quickso.cn/tags/%E7%8E%A9%E5%AE%A2%E4%BA%91/"},{"name":"树莓派","slug":"树莓派","permalink":"https://blog.quickso.cn/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"},{"name":"Nginx","slug":"Nginx","permalink":"https://blog.quickso.cn/tags/Nginx/"},{"name":"PHP","slug":"PHP","permalink":"https://blog.quickso.cn/tags/PHP/"},{"name":"MySQL","slug":"MySQL","permalink":"https://blog.quickso.cn/tags/MySQL/"},{"name":"PhpMyAdmin","slug":"PhpMyAdmin","permalink":"https://blog.quickso.cn/tags/PhpMyAdmin/"}]},{"title":"在玩客云或树莓派上通过ffmpeg将视频推流到直播平台","slug":"在玩客云或树莓派上通过ffmpeg将视频推流到直播平台","date":"2021-04-09T14:32:37.000Z","updated":"2021-06-12T01:31:38.163Z","comments":true,"path":"2021/04/09/在玩客云或树莓派上通过ffmpeg将视频推流到直播平台/","link":"","permalink":"https://blog.quickso.cn/2021/04/09/%E5%9C%A8%E7%8E%A9%E5%AE%A2%E4%BA%91%E6%88%96%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8A%E9%80%9A%E8%BF%87ffmpeg%E5%B0%86%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E5%88%B0%E7%9B%B4%E6%92%AD%E5%B9%B3%E5%8F%B0/","excerpt":"","text":"为了压榨玩客云的性能，搞了直播推流，下面教大家怎么推流 我把玩客云刷了Powersee的玩客云第二版固件，具体看这里，当然使用树莓派也可以 步骤1、安装ffmpeg1sudo apt-get install ffmpeg 2、启动推流1ffmpeg -re -i /root/video.mp4 -vcodec libx264 -acodec aac -strict -2 -f flv &quot;你的推流地址&quot; 举个栗子（B站）： 1ffmpeg -re -i /mnt/aria2-downloads/xianghuo.mkv -vcodec libx264 -acodec aac -strict -2 -f flv &quot;rtmp://live-push.bilivideo.com/live-bvc/直播码&quot; 更多详细说明可参考ffmpeg官方文档：http://ffmpeg.org/ffmpeg.html 3、后台执行（1）安装screen 1sudo apt-get install screen （2）新建终端 1screen -S live （3）在新的终端执行命令后 1Ctrl+A+D （4）重新进入终端 1screen -r live （5）删除某一个终端 1screen -S 进程号 -X quit 4.推流成功https://live.bilibili.com/21577989 玩客云直播时的参数 CPU基本跑满 好了，赶快去实践吧！","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"ffmpeg","slug":"ffmpeg","permalink":"https://blog.quickso.cn/tags/ffmpeg/"},{"name":"玩客云","slug":"玩客云","permalink":"https://blog.quickso.cn/tags/%E7%8E%A9%E5%AE%A2%E4%BA%91/"},{"name":"树莓派","slug":"树莓派","permalink":"https://blog.quickso.cn/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"}]},{"title":"阿里云盘+OneManager+Heroku+CFWorkers实现阿里云盘网络挂载","slug":"阿里云盘-OneManager-Heroku-CFWorkers实现阿里云盘网络挂载","date":"2021-03-28T10:20:05.000Z","updated":"2021-03-28T11:36:45.369Z","comments":true,"path":"2021/03/28/阿里云盘-OneManager-Heroku-CFWorkers实现阿里云盘网络挂载/","link":"","permalink":"https://blog.quickso.cn/2021/03/28/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98-OneManager-Heroku-CFWorkers%E5%AE%9E%E7%8E%B0%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E7%BD%91%E7%BB%9C%E6%8C%82%E8%BD%BD/","excerpt":"","text":"你是不是想和我一样把阿里云盘搭建成一个分享平台呢？像下面这样 实现直链下载，不通过客户端，还可以分享给别人 我们先来看看实现的方法 下面有两种挂载程序（任选其一） 1.Onemanager https://github.com/qkqpttgf/OneManager-php 2.ShareList https://github.com/reruin/sharelist 部署方式有许多种，我们这里采用Heroku部署（要白嫖嘛~） 准备工作 阿里云盘账户 Heroku账户 GitHub 项目地址 搭建步骤我们先来讲Onemanager 首先注册一个Heroku账号（可能需要科学上网） https://signup.heroku.com/login 这个不用教了吧~ 注册好后登陆，打开Onemanager的github项目 https://github.com/qkqpttgf/OneManager-php 点击“Deploy to Heroku” App name 随便填一个，下面选择美国或欧洲，然后点击“Deploy app” 然后等它构建完成，点击“View” 点击“点击开始安装程序” 语言选择中文，然后点击新建API Key 然后滑到下边找到API Key点击Reveal，复制key 然后返回刚才的页面，粘贴key并设置管理密码 之后会进入这个页面，点击“登陆”，输入你刚才设置的密码 然后点击“管理-设置”，然后在添加盘那里选择“Aliyundrive”，然后点击“添加盘” 这个随便填一下 然后点击“确认” 接下来我们获取refresh_token 首先登陆阿里云盘 https://www.aliyundrive.com/drive 登陆阿里云盘之后，打开开发者工具，切换到Application选项卡，点开Local storage,会有一个token项，点开就可以看到refresh_token了 复制粘贴到刚才的页面，选择下面的其中之一 这样就搭建好了，你可以在设置里美化页面，设置参数 接下来我们讲ShareList 还是注册登陆好 Heroku 打开https://github.com/reruin/sharelist，点击“查看文档” 点击“Deploy toHeroku” 名字name随便起，json地址 https://raw.githubusercontent.com/reruin/sharelist/master/package.json 点击Deploy app，开始创建 创建成功，点击“View“ 进行初始化 要求按下面这个，虚拟路径那里选择“AliyunDrive”，然后点击保存 下一步填入refresh_token，方法还是上面那个 好了，这样就搭建好了。为了更好的访问速度可以进行CF Workers部署 CF Workers部署打开 https://dash.cloudflare.com/ 1.进入cf workers后台，选择新建worker 2.复制如下代码，到worker编辑器中(xxxx.herokuapp.com改成你自己的) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130// 替换成你想镜像的站点const upstream = &#x27;xxxx.herokuapp.com&#x27; // 如果那个站点有专门的移动适配站点，否则保持和上面一致const upstream_mobile = &#x27;xxxx.herokuapp.com&#x27; // 你希望禁止哪些国家访问const blocked_region = [&#x27;KP&#x27;] // 禁止自访问const blocked_ip_address = [&#x27;0.0.0.0&#x27;, &#x27;127.0.0.1&#x27;] // 替换成你想镜像的站点const replace_dict = &#123; &#x27;$upstream&#x27;: &#x27;$custom_domain&#x27;, &#x27;//google.com&#x27;: &#x27;&#x27;&#125; //以下内容都不用动addEventListener(&#x27;fetch&#x27;, event =&gt; &#123; event.respondWith(fetchAndApply(event.request));&#125;) async function fetchAndApply(request) &#123; const region = request.headers.get(&#x27;cf-ipcountry&#x27;).toUpperCase(); const ip_address = request.headers.get(&#x27;cf-connecting-ip&#x27;); const user_agent = request.headers.get(&#x27;user-agent&#x27;); let response = null; let url = new URL(request.url); let url_host = url.host; if (url.protocol == &#x27;http:&#x27;) &#123; url.protocol = &#x27;https:&#x27; response = Response.redirect(url.href); return response; &#125; if (await device_status(user_agent)) &#123; upstream_domain = upstream &#125; else &#123; upstream_domain = upstream_mobile &#125; url.host = upstream_domain; if (blocked_region.includes(region)) &#123; response = new Response(&#x27;Access denied: WorkersProxy is not available in your region yet.&#x27;, &#123; status: 403 &#125;); &#125; else if(blocked_ip_address.includes(ip_address))&#123; response = new Response(&#x27;Access denied: Your IP address is blocked by WorkersProxy.&#x27;, &#123; status: 403 &#125;); &#125; else&#123; let method = request.method; let request_headers = request.headers; let new_request_headers = new Headers(request_headers); new_request_headers.set(&#x27;Host&#x27;, upstream_domain); new_request_headers.set(&#x27;Referer&#x27;, url.href); let original_response = await fetch(url.href, &#123; method: method, headers: new_request_headers &#125;) let original_response_clone = original_response.clone(); let original_text = null; let response_headers = original_response.headers; let new_response_headers = new Headers(response_headers); let status = original_response.status; new_response_headers.set(&#x27;access-control-allow-origin&#x27;, &#x27;*&#x27;); new_response_headers.set(&#x27;access-control-allow-credentials&#x27;, true); new_response_headers.delete(&#x27;content-security-policy&#x27;); new_response_headers.delete(&#x27;content-security-policy-report-only&#x27;); new_response_headers.delete(&#x27;clear-site-data&#x27;); const content_type = new_response_headers.get(&#x27;content-type&#x27;); if (content_type.includes(&#x27;text/html&#x27;) &amp;&amp; content_type.includes(&#x27;UTF-8&#x27;)) &#123; original_text = await replace_response_text(original_response_clone, upstream_domain, url_host); &#125; else &#123; original_text = original_response_clone.body &#125; response = new Response(original_text, &#123; status, headers: new_response_headers &#125;) &#125; return response;&#125; async function replace_response_text(response, upstream_domain, host_name) &#123; let text = await response.text() var i, j; for (i in replace_dict) &#123; j = replace_dict[i] if (i == &#x27;$upstream&#x27;) &#123; i = upstream_domain &#125; else if (i == &#x27;$custom_domain&#x27;) &#123; i = host_name &#125; if (j == &#x27;$upstream&#x27;) &#123; j = upstream_domain &#125; else if (j == &#x27;$custom_domain&#x27;) &#123; j = host_name &#125; let re = new RegExp(i, &#x27;g&#x27;) text = text.replace(re, j); &#125; return text;&#125; async function device_status (user_agent_info) &#123; var agents = [&quot;Android&quot;, &quot;iPhone&quot;, &quot;SymbianOS&quot;, &quot;Windows Phone&quot;, &quot;iPad&quot;, &quot;iPod&quot;]; var flag = true; for (var v = 0; v &lt; agents.length; v++) &#123; if (user_agent_info.indexOf(agents[v]) &gt; 0) &#123; flag = false; break; &#125; &#125; return flag;&#125; 然后点击“保存并部署“，然后你可以改一个你喜欢的名称 自定义域名可以参考这篇文章 https://vircloud.net/exp/cf-worker-domain.html 演示站点 1https://huangepan.hgnet.workers.dev/ 好了，快去实践吧！","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"阿里云盘","slug":"阿里云盘","permalink":"https://blog.quickso.cn/tags/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98/"},{"name":"OneManager","slug":"OneManager","permalink":"https://blog.quickso.cn/tags/OneManager/"}]},{"title":"GiWiFI校园网认证过程分析与模拟登录","slug":"GiWiFI校园网认证过程分析与模拟登录","date":"2021-03-22T15:29:58.000Z","updated":"2021-03-22T15:49:10.484Z","comments":true,"path":"2021/03/22/GiWiFI校园网认证过程分析与模拟登录/","link":"","permalink":"https://blog.quickso.cn/2021/03/22/GiWiFI%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%AE%A4%E8%AF%81%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90%E4%B8%8E%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95/","excerpt":"","text":"前言GiWiFi是由上海寰创网络科技有限公司基于wifidog项目开发的一套网关管理系统, 通常被应用于校园网行业. 认证机制由于GiWiFi是基于wifidog项目的, 所以大致流程也差不多 基本流程用户上线 用户访问网络，通过iptables将未认证的用户dnat到wifidog进程，wifidog通过307报文将用户重定向到认证服务器 用户打开认证服务器登录页面，输入用户名密码，发送认证请求 认证成功的话服务器会发送302报文，携带token信息重定向到wifidog页面。认证失败的话会返回失败页面 用户携带token信息向wifidog发起认证请求，wifidog再向认证服务器发起请求，认证成功后授权，并将用户重定向到成功页面 保活和下线 wifidog会定时向认证服务器发送保活消息(相当于心跳) 当用户主动请求下线后，wifidog此时并没有下线 当wifidog再次发起保活请求时，认证服务器会告诉它用户已下线，此时wifidog会将用户下线 网页登录客户端引导下载页对于不同的设备和系统使用了UA进行区分，经过测试，提供的客户端有Windows、macOS、iOS以及Android版本（果然Linux又被忽视了，显示的是Android版的下载按钮🌝） 由于对此类认证客户端的排斥和心理洁癖，我便开始寻找使用网页认证，甚至是使用脚本模拟认证的方法，果不其然，经过一番分析与搜寻，我找到了一些东西 你藏得好深啊，登录框此前网页的认证过程为 打开任意http页面后被劫持至172.17.1.1:8062/redirect 返回307跳转至认证页 在认证页里输入账号密码登录认证 关闭认证页，一段时间内即可正常上网 而现在跳转后仅显示客户端的下载按钮，直觉意识到这是一个专用于客户端引导下载的页面，真正的认证页仍另藏他处 事实正是如此，对比历史记录，现在的跳转页面的域名是172.17.1.1(校园网网关IP)，此前的认证页则是http://login.gwifi.com.cn/cmps/admin.php/api/login/ 修改UA先修改UA为ipad（使用UA浏览器插件即可，或者浏览器里的自定义UA） 1Mozilla/5.0 (iPad; CPU OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5376e Safari/8536.25 将客户端引导下载页的URL参数粘贴到认证页的URL后并打开，就能看到之前的认证页了（单纯打开首页会显示It works! ，不加任何参数打开的话则是跳转至新浪首页，阿巴阿巴~） 1http://login.gwifi.com.cn/cmps/admin.php/api/login/?gw_address=172.17.1.1&amp;gw_port=8060&amp;gw_id=GWIFI-zhongbeixinshang01&amp;ip=10.16.100.174&amp;mac=你的MAC地址 认证页打开之后仍是一个大大的客户端下载按钮，但不要慌。打开审查元素就会发现，所有的登录框、重设密码框、注册框等都在，只是被隐藏掉了 去掉隐藏样式，正常输入账号密码登录即可，和之前的操作一模一样（登录后会跳转至百度首页，看来这两个页面是同一位鬼才写的🌝） 登录接口及参数分析找到了登录框之后，就可以开始分析接口和参数了 直接看页面代码吧，写的挺乱的，好在未经过混淆，关键部分： 登录接口123456789101112131415161718192021222324252627var loginAction = function(params)&#123; var btn = $(&quot;#first_button&quot;); var round = Math.round(Math.random()*1000); var form = $(&quot;#frmLogin&quot;); $.ajax(&#123; url: &quot;/cmps/admin.php/api/loginaction?round=&quot;+round, data: form.serialize(), type: &quot;post&quot;, async: false, dataType: &quot;json&quot;, success: function (data) &#123; if (data.status === 1) &#123; if(data.data.reasoncode == &quot;44&quot;)&#123; params = getWechatParams(data); //showSelectMessage(params); wechatAuth(params.okParams); &#125;else&#123; window.location.href = data.info; &#125; &#125; else &#123; btn.removeAttr(&#x27;disabled&#x27;); doFailedLogin(data,&quot;frmLogin&quot;); return false; &#125; &#125; &#125;);&#125; 可以看到接口为/cmps/admin.php/api/loginaction，参数都在登录表单里： 关键部分已手动打码 参数名 值 说明 access_type 2 作用未知 acsign *** 登录状态接口中的sign字段 btype pc 猜测为平台类型 client_mac *** 客户端MAC contact_phone 400-038-5858 服务电话 devicemode 默认空值，作用未知 gw_address 172.17.1.1 网关地址 gw_id *** AP的SSID gw_port 8060 网关端口 lastaccessurl 默认空值，作用未知 logout_reason 0 作用未知 mac *** 同client_mac name *** 账号 online_time 0 猜测为在线时间，作用未知 page_time 1535509645 登录页时间戳 password *** 密码 sign *** 签名，可从登录表单中获取 station_cloud login.gwifi.com.cn 作用未知 station_sn *** 猜测为基站ID suggest_phone 400-038-5858 同contact_phone url http://www.baidu.com 登录成功后跳转的网站 user_agent 默认空值，作用未知 观察后发现登录所需的大部分参数在认证页的URL参数里已经有了，剩下的有一部分已经在登录表单里填好了，另一部分需要从下文的登录状态接口中取到，将其组合起来后发送POST请求 登录成功后返回JSON数据： 1234567891011121314151617181920212223&#123; &quot;status&quot;:1, &quot;info&quot;:&quot;http://172.17.1.1:8060/wifidog/auth?token=***&amp;info=***&quot;, &quot;data&quot;:&#123; &quot;auth_verify&quot;:1, &quot;reasoncode&quot;:0, &quot;remain_time&quot;:1053640, &quot;limit_time&quot;:null, &quot;cost_type&quot;:4, &quot;serviceplan_id&quot;:&quot;1357&quot;, &quot;is_share&quot;:&quot;2&quot;, &quot;wechat_enable&quot;:&quot;1&quot;, &quot;bw_up&quot;:&quot;2048&quot;, &quot;bw_down&quot;:&quot;10240&quot;, &quot;ontrial&quot;:0, &quot;need_complete_data&quot;:null, &quot;complete_data_url&quot;:null, &quot;permit_intranet&quot;:2, &quot;permit_internet&quot;:2, &quot;carrier_operator&quot;:&quot;3&quot;, &quot;network_type&quot;:&quot;2&quot; &#125;&#125; 其中的info字段的URL用作登录验证，使用GET请求就可以完成整个认证登录的流程了 登录失败的话info字段则会返回百度首页的URL，再次吐槽一下🌝 12345&#123; &quot;status&quot;:1, &quot;info&quot;:&quot;http:\\/\\/www.baidu.com&quot;, &quot;data&quot;:1&#125; 登录状态接口1234567891011121314151617181920function initData()&#123; //获取终端信息 $.ajax(&#123; url: &quot;http://172.17.1.1:8060/wifidog/get_auth_state?ip=***&amp;mac=***&amp;sign=***&amp;callback=***&quot;, dataType:&#x27;jsonp&#x27;, success: function(data) &#123; c = eval(&#x27;(&#x27; + data.data + &#x27;)&#x27;); if(data.resultCode == 0)&#123; fixData(c); &#125;else &#123; window.top.location.href = &quot;http://www.baidu.com&quot;; &#125; return false; &#125;, error:function(data) &#123; return false; &#125;, cache: false &#125;);&#125; 同样可以看到接口为/wifidog/get_auth_state，参数为IP、MAC、签名和回调函数名，其中的签名可以直接在页面表单里取到 返回结果为JSONP数据，提取为： 1234&#123; &quot;resultCode&quot;:0, &quot;data&quot;:&quot;&#123;&quot;auth_state&quot;:2,&quot;gw_id&quot;:&quot;***&quot;,&quot;access_type&quot;:&quot;2&quot;,&quot;authStaType&quot;:&quot;0&quot;,&quot;station_sn&quot;:&quot;***&quot;,&quot;client_mac&quot;:&quot;***&quot;,&quot;online_time&quot;:11,&quot;logout_reason&quot;:7,&quot;contact_phone&quot;:&quot;400-038-5858&quot;,&quot;suggest_phone&quot;:&quot;400-038-5858&quot;,&quot;station_cloud&quot;:&quot;login.gwifi.com.cn&quot;,&quot;orgId&quot;:&quot;899&quot;,&quot;sign&quot;:&quot;***&quot;&#125;&quot;&#125; 其中的auth_state字段值为2时为正常登录状态 观察登录成功后执行的操作，是替换了部分表单数据： 123456789101112function fixData(data) &#123; $(&quot;.gw_id&quot;).val(data.gw_id); $(&quot;.access_type&quot;).val(data.access_type); $(&quot;.station_sn&quot;).val(data.station_sn); $(&quot;.client_mac&quot;).val(data.client_mac); $(&quot;.online_time&quot;).val(data.online_time); $(&quot;.logout_reason&quot;).val(data.logout_reason); $(&quot;.contact_phone&quot;).val(data.contact_phone); $(&quot;.suggest_phone&quot;).val(data.suggest_phone); $(&quot;.station_cloud&quot;).val(data.station_cloud); $(&quot;.acsign&quot;).val(data.sign);&#125; 进行模拟登录时也应一一替换 需要注意的是参数callback是必需的，不然将不会返回sign字段值 登出接口登出功能在客户端引导下载页上，接口及参数为http://172.17.1.1/getApp.htm?action=logout 返回数据为： 1234&#123; &quot;resultCode&quot;:0, &quot;data&quot;:[]&#125; 其中resultCode字段值为0时登出成功 模拟登录脚本现在登录相关接口和所需参数已经了解，可以开始写模拟登录了 这里使用Python来实现，理论上对所有GiWiFi系统通用 这里需要事先安装好Python以及requests、netifaces库 你可能会用到Visualcppbuildtools（安装C++插件） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231# -*- coding: utf-8 -*-import osimport reimport timeimport jsonimport argparseimport requestsimport netifacesfrom getpass import getpassfrom urllib.parse import urlparse, parse_qsSCRIPT_VERSION = &quot;1.0.3.2&quot;HEADERS = &#123; &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (iPad; CPU OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5376e Safari/8536.25&#x27;, &#x27;accept-encoding&#x27;: &#x27;gzip, deflate, br&#x27;, &#x27;accept-language&#x27;: &#x27;zh-CN,zh-TW;q=0.8,zh;q=0.6,en;q=0.4,ja;q=0.2&#x27;, &#x27;cache-control&#x27;: &#x27;max-age=0&#x27;&#125;PARSER = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description=&#x27;GiWiFi认证登录脚本&#x27;, epilog=&#x27;(c) 2018 journey.ad&#x27;)PARSER.add_argument(&#x27;-g&#x27;, &#x27;--gateway&#x27;, type=str, help=&#x27;网关IP&#x27;)PARSER.add_argument(&#x27;-u&#x27;, &#x27;--username&#x27;, type=str, help=&#x27;用户名&#x27;)PARSER.add_argument(&#x27;-p&#x27;, &#x27;--password&#x27;, type=str, help=&#x27;密码&#x27;)PARSER.add_argument(&#x27;-q&#x27;, &#x27;--quit&#x27;, action=&#x27;store_true&#x27;, help=&#x27;登出&#x27;)PARSER.add_argument(&#x27;-d&#x27;, &#x27;--daemon&#x27;, action=&#x27;store_true&#x27;, help=&#x27;在后台守护运行&#x27;)PARSER.add_argument(&#x27;-v&#x27;, &#x27;--verbose&#x27;, action=&#x27;store_true&#x27;, help=&#x27;额外输出一些技术性信息&#x27;)PARSER.add_argument(&#x27;-V&#x27;, &#x27;--version&#x27;, action=&#x27;version&#x27;, version=&#x27;giwifi-auth-helper &#123;&#125;&#x27;.format(SCRIPT_VERSION))CONFIG = PARSER.parse_args()if not CONFIG.quit: if not CONFIG.gateway: CONFIG.gateway = netifaces.gateways()[&#x27;default&#x27;][netifaces.AF_INET][0] if not CONFIG.password: CONFIG.gateway = input(&#x27;请输入网关地址(%s):&#x27; % (CONFIG.gateway)) or CONFIG.gateway if not CONFIG.username: CONFIG.username = input(&#x27;请输入上网账号:&#x27;) if not CONFIG.password: CONFIG.password = getpass(&#x27;请输入账号密码:&#x27;)else: if not CONFIG.gateway: CONFIG.gateway = netifaces.gateways()[&#x27;default&#x27;][netifaces.AF_INET][0] CONFIG.gateway = input(&#x27;请输入网关地址(%s):&#x27; % (CONFIG.gateway)) or CONFIG.gatewaydef main(): logcat(&#x27;正在获取网关信息…&#x27;) try: authUrl = requests.get(&#x27;http://%s:8062/redirect&#x27; % (CONFIG.gateway), timeout=5).url authParmas = &#123;k: v[0] for k, v in parse_qs(urlparse(authUrl).query).items()&#125; loginPage = requests.get(&#x27;http://login.gwifi.com.cn/cmps/admin.php/api/login/?&#x27; + urlparse(authUrl).query, headers=HEADERS, timeout=5).text pagetime = re.search(r&#x27;name=&quot;page_time&quot; value=&quot;(.*?)&quot;&#x27;, loginPage).group(1) sign = re.search(r&#x27;name=&quot;sign&quot; value=&quot;(.*?)&quot;&#x27;, loginPage).group(1) except requests.exceptions.ConnectionError: logcat(&#x27;连接失败，请检查网关地址是否正确&#x27;) return except requests.exceptions.Timeout: logcat(&#x27;连接超时，可能已超出上网区间&#x27;) return except AttributeError: logcat(&#x27;解析失败，可能网关设备重启或系统已更新&#x27;) return authState = getAuthState(authParmas, sign) if CONFIG.quit: logout(authParmas) if not authState: return else: if authState[&#x27;auth_state&#x27;] == 2: printStatus(authParmas, authState) logcat(&#x27;你已登录，无需再次登录&#x27;) else: data = &#123; &#x27;access_type&#x27;: authState[&#x27;access_type&#x27;], &#x27;acsign&#x27;: authState[&#x27;sign&#x27;], &#x27;btype&#x27;: &#x27;pc&#x27;, &#x27;client_mac&#x27;: authState[&#x27;client_mac&#x27;], &#x27;contact_phone&#x27;: &#x27;400-038-5858&#x27;, &#x27;devicemode&#x27;: &#x27;&#x27;, &#x27;gw_address&#x27;: authParmas[&#x27;gw_address&#x27;], &#x27;gw_id&#x27;: authParmas[&#x27;gw_id&#x27;], &#x27;gw_port&#x27;: authParmas[&#x27;gw_port&#x27;], &#x27;lastaccessurl&#x27;: &#x27;&#x27;, &#x27;logout_reason&#x27;: authState[&#x27;logout_reason&#x27;], &#x27;mac&#x27;: authParmas[&#x27;mac&#x27;], &#x27;name&#x27;: CONFIG.username, &#x27;online_time&#x27;: authState[&#x27;online_time&#x27;], &#x27;page_time&#x27;: pagetime, &#x27;password&#x27;: CONFIG.password, &#x27;sign&#x27;: sign, &#x27;station_cloud&#x27;: &#x27;login.gwifi.com.cn&#x27;, &#x27;station_sn&#x27;: authState[&#x27;station_sn&#x27;], &#x27;suggest_phone&#x27;: &#x27;400-038-5858&#x27;, &#x27;url&#x27;: &#x27;http://www.baidu.com&#x27;, &#x27;user_agent&#x27;: &#x27;&#x27;, &#125; if CONFIG.verbose: logcat(data) result = login(data) if result[&#x27;status&#x27;]: authState = getAuthState(authParmas, sign) printStatus(authParmas, authState) if authState[&#x27;auth_state&#x27;] == 2: logcat(&#x27;认证成功&#x27;) else: logcat(&#x27;认证失败&#x27;) else: logcat(&#x27;认证失败，提示信息：%s&#x27; % (result[&#x27;info&#x27;]))def login(data): logcat(&#x27;正在尝试认证…&#x27;) try: resp = json.loads(requests.post(&#x27;http://login.gwifi.com.cn/cmps/admin.php/api/loginaction&#x27;, data=data, timeout=5).text) result = &#123; &#x27;status&#x27;: False, &#x27;info&#x27;: None &#125; if CONFIG.verbose: logcat(resp) if &#x27;wifidog/auth&#x27; in resp[&#x27;info&#x27;]: requests.get(resp[&#x27;info&#x27;]) result[&#x27;status&#x27;] = True else: result[&#x27;info&#x27;] = resp[&#x27;info&#x27;] except requests.exceptions.Timeout: logcat(&#x27;连接超时，可能已超出上网区间&#x27;) finally: return resultdef logout(authParmas): try: resp = json.loads(requests.get(&#x27;http://%s/getApp.htm?action=logout&#x27; % (authParmas[&#x27;gw_address&#x27;])).text) except requests.exceptions.Timeout: logcat(&#x27;连接超时，可能已超出上网区间&#x27;) return if resp[&#x27;resultCode&#x27;] == 0: logcat(&#x27;下线成功&#x27;) else: logcat(&#x27;下线失败&#x27;)def getAuthState(authParmas, sign): try: params = &#123; &#x27;ip&#x27;: authParmas[&#x27;ip&#x27;], &#x27;mac&#x27;: authParmas[&#x27;mac&#x27;], &#x27;sign&#x27;: sign, &#x27;callback&#x27;: &#x27;&#x27; &#125; resp = json.loads(requests.get(&#x27;http://%s:%s/wifidog/get_auth_state&#x27; % (authParmas[&#x27;gw_address&#x27;], authParmas[&#x27;gw_port&#x27;]), params=params, timeout=5).text[1:-1]) except KeyError: logcat(&#x27;所需参数不存在&#x27;) return False except requests.exceptions.Timeout: logcat(&#x27;连接超时，可能已超出上网区间&#x27;) return False if CONFIG.verbose: logcat(resp) if resp[&#x27;resultCode&#x27;] == 0: return json.loads(resp[&#x27;data&#x27;]) else: return Falsedef printStatus(authParmas, authState): if not CONFIG.verbose: clear() print(&#x27;&#x27;&#x27;--------------------------------------------SSID: %sAP MAC: %sGateWay: %sIP: %sMAC: %sStation SN: %sLogged: %s--------------------------------------------&#x27;&#x27;&#x27; % ( authParmas[&#x27;gw_id&#x27;], authParmas[&#x27;apmac&#x27;], authParmas[&#x27;gw_address&#x27;], authParmas[&#x27;ip&#x27;], authParmas[&#x27;mac&#x27;], authState[&#x27;station_sn&#x27;], &#x27;yes&#x27; if(authState[&#x27;auth_state&#x27;] == 2) else &#x27;no&#x27; ) )def clear(): os.system(&#x27;cls&#x27; if os.name == &#x27;nt&#x27; else &#x27;clear&#x27;)def logcat(msg, level=&#x27;I&#x27;): print(&#x27;%s %s: %s&#x27; % (time.ctime().split(&#x27; &#x27;)[-2], level, msg))if __name__ == &#x27;__main__&#x27;: if CONFIG.daemon: while True: main() time.sleep(30) else: main() input() 效果 本文参考： 1.https://nocilol.me/archives/lab/giwifi-auth-process-analysis-and-simulation-login/ 2.https://github.com/icepie/giwifi-gear/wiki/GiWiFi-%E5%88%86%E6%9E%90","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blog.quickso.cn/tags/Python/"},{"name":"Giwifi","slug":"Giwifi","permalink":"https://blog.quickso.cn/tags/Giwifi/"}]},{"title":"ShadowsocksR一键安装脚本","slug":"ShadowsocksR一键安装脚本","date":"2021-03-13T01:42:03.000Z","updated":"2021-03-13T01:49:00.142Z","comments":true,"path":"2021/03/13/ShadowsocksR一键安装脚本/","link":"","permalink":"https://blog.quickso.cn/2021/03/13/ShadowsocksR%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/","excerpt":"","text":"目前逗比网站逗比根据地（doub.io）已经关站无法打开，其它类似名称网站均为山寨版本。但是 doubi 的一键安装脚本仍然可以正常使用。目前网上的各个 ShadowsocksR 脚本基本都是只有 安装/启动/重启 等基础功能，对于小白来说还是不够简单方便，既然是一键脚本，那么就要尽可能地简单 逗比的SSR脚本特点 支持 限制 用户速度 支持 限制 端口设备数 支持 显示 当前连接IP 支持 显示 SS/SSR连接 二维码 支持 切换管理 单/多端口 支持 一键安装 锐速 支持 一键安装 BBR 支持 一键封禁 垃圾邮件(SMAP)/BT/PT 安装环境要求支持架构：Openvz、KVM、Xen系统支持: CentOS6+ / Debian6+ / Ubuntu14+ 下载安装我一般使用 aes-256-ctr + auth_aes128_md5 + tls1.2_ticket_fastauth 1wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod x ssr.sh &amp;&amp; bash ssr.sh 安装锐速及BBR如果你的VPS服务器 不是OpenVZ虚拟，而是 KVM/Xen，那么可以在 SSR 安装完毕后，接着安装 锐速/BBR 对网络进行加速。重新运行一键安装脚本 bash ssr.sh，根据提示选项即可 各平台客户端下载 Windows客户端下载地址：https://github.com/shadowsocksrr/shadowsocksr-csharp/releases Mac客户端下载地址：https://github.com/qinyuhang/ShadowsocksX-NG-R/releases Linux客户端下载地址：https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation Android/安卓客户端下载地址：https://github.com/shadowsocksrr/shadowsocksr-android/releases iOS/iPad/苹果客户端可使用 Wingy &amp; Shadowrocket 或者 Potatso Lite 免费SSR订阅地址1https://raw.githubusercontent.com/ssrsub/ssr/master/ssrsub 1https://ssr.hgnet.workers.dev/","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"ShadowsocksR","slug":"ShadowsocksR","permalink":"https://blog.quickso.cn/tags/ShadowsocksR/"},{"name":"科学上网","slug":"科学上网","permalink":"https://blog.quickso.cn/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"}]},{"title":"Java开发环境的搭建","slug":"Java开发环境的搭建","date":"2021-03-11T11:22:49.000Z","updated":"2021-03-11T12:55:34.927Z","comments":true,"path":"2021/03/11/Java开发环境的搭建/","link":"","permalink":"https://blog.quickso.cn/2021/03/11/Java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/","excerpt":"","text":"开发Java应用需要部署Java的开发环境，就像做饭需要厨房这个环境，Java的jdk就相当于做饭的工具。 1.平台Java SE ：Java标准版 Java EE ：Java企业版 Java ME：为机顶盒、移动电话和PDA之类嵌入式消费电子设备提供的Java语言平台 2.安装Java SE平台下载地址： https://www.oracle.com/java/technologies/javase-downloads.html 选择适合你的JDK，我这里下载的是Windows x64版本（如果你是Linux或者Mac系统下载对应版本即可） 下载完毕，开始安装…. 点击“安装包”，选择“下一步” 这里我们更改一下安装位置（方便后面配置系统变量） 比如我这里修改成D盘的位置 然后点击“下一步”，就开始安装了 这样软件就安装好了 配置系统变量在此电脑那里右键选择“属性” 在右边那里选择“高级系统设置”，然后选择“环境变量” 1.设置系统变量JAVA_HOME在“系统变量”那里点击“新建” 变量名填 1JAVA_HOME 变量值填写你的JDK安装位置 2.设置系统环境Path的设置选中变量“Path”，点击“编辑” 在弹出来的对话框中选择“新建”，填入 1%JAVA_HOME%/bin 3.设置系统环境classpath变量新建系统变量 变量名填 1CLASSPATH 变量值填 1.;%JAVA_HOME%/lib/dt.jar;%JAVA_HOME%/lib/tools.jar 3.测试是否安装成功1.点击“Win+R”，输入“CMD” 然后输入“javac”,会出现下面的一大堆东西，即是安装成功 如果出现“javac不是内部或外部命令，也不是可运行的程序或批处理文件。”你就需要重新安装或者重新设置环境变量 2.写一个HelloWord程序 我这里是使用VsCode，你可以使用notepad++或其他编辑器 12345public class Hello&#123; public static void mian(String args[]) &#123; System.out.println(&quot;Hello，World！&quot;); &#125;&#125; 然后保存为“Hello.java” 然后使用CMD 进入“Hello.java”所在路径（你可以在.Java文件那里右键选择属性查看） 使用“cd 文件路径”命令进入 编译.java文件 在CMD输入 1javac Hello.java 如果提示“错误: 编码 GBK 的不可映射字符”，则输入 1javac -encoding UTF-8 Hello.java 编译成功就会多一个名为“Hello.class”的文件 运行 在CMD输入 1java Hello 如果提示 123错误: 在类 Hello 中找不到 main 方法, 请将 main 方法定义为: public static void main(String[] args)否则 JavaFX 应用程序类必须扩展javafx.application.Application 则修改.java文件为 12345public class Hello&#123; public static void main(String[] args) &#123; System.out.println(&quot;Hello，World！&quot;); &#125;&#125; 重新编译并运行即可 是不是很简单呢？嘿嘿~","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://blog.quickso.cn/tags/Java/"},{"name":"开发环境","slug":"开发环境","permalink":"https://blog.quickso.cn/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"}]},{"title":"使用Cloudflare设置网站301重定向","slug":"使用Cloudflare设置网站301重定向","date":"2021-03-01T04:39:53.000Z","updated":"2021-03-01T04:44:01.313Z","comments":true,"path":"2021/03/01/使用Cloudflare设置网站301重定向/","link":"","permalink":"https://blog.quickso.cn/2021/03/01/%E4%BD%BF%E7%94%A8Cloudflare%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%AB%99301%E9%87%8D%E5%AE%9A%E5%90%91/","excerpt":"","text":"前言301 是 HTTP 协议中的一个状态码，表示该网页已经永久迁移到新位置。 我们经常在更换域名时，使用 301 重定向来把旧域名永久转移到新域名上去，它可以同时把我们旧域名的流量和权重同时转移到新域名上去，对搜索引擎比较友好，避免了更换域名所带来的流量丢失。 适用情况 更换域名，将旧域名指向新域名； 网址规范化，将a.com、www.a.com、blog.a.com等访问地址全部指向a.com一个地址，集中流量和权重； 将指向过期、无效网页的链接重定向至正确地址； http重定向到https； 中文域名指向英文域名。 使用 Cloudflare 进行重定向 下面介绍下如何使用 Cloudflare 的页面规则对网站进行 301 重定向。Step 1登录 Cloudflare 的控制面板，进入 “Page Rules” 页面，创建一条页面规则。 Step 2添加规则 “Forwarding URL”，类型 “301 – Permanent Redirect” 1.统一跳转，将abc.com的所有页面都无差别的重定向至newsite.com首页。 写法：abc.com/* 301 newsite.com 2.对应跳转，即 abc.com/b.html 重定向至 newsite.com/b.html，abc.com/about.html 重定向至 newsite.com/about.html，保持原网址结构。 写法：abc.com/* 301 newsite.com/$1 3.HTTP 重定向至 HTTPS Cloudflare 提供了 HTTPS 重定向选项，直接选择 “Always Use HTTPS” 即可。 官方文档：Forwarding (URL Redirection) 301重定向检测设置好我们可以通过检测工具查看重定向结果。 Bulk URL HTTP Status Code, Header &amp; Redirect Checker HTTP状态查询 – 站长工具 301 和 302 的区别重定向选项中除了 301 还有一个 302 重定向，但是不建议使用。 301：永久重定向（推荐） 永久转移地址，不会恢复原地址； 对搜素引擎友好，可以转移流量和权重。 302：临时重定向（不推荐） 临时性转移，会恢复原地址； 影响搜索引擎优化。 结语当然，进行301重定向还可以通过更改 .htaccess 文件等方法，也很方便。如果正好在使用 Cloudflare 的话，可以通过本文的方法进行重定向，使用 Cloudflare 提供好的选项直接设置，不涉及任何代码。 via.https://go2think.com/301-redirect-by-cloudflare/","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"301","slug":"301","permalink":"https://blog.quickso.cn/tags/301/"},{"name":"Cloudflare","slug":"Cloudflare","permalink":"https://blog.quickso.cn/tags/Cloudflare/"}]},{"title":"利用DockerHub仓库搭建无限容量不限速的网盘","slug":"利用DockerHub仓库搭建无限容量不限速的网盘","date":"2021-02-26T03:11:44.000Z","updated":"2021-02-26T03:43:44.839Z","comments":true,"path":"2021/02/26/利用DockerHub仓库搭建无限容量不限速的网盘/","link":"","permalink":"https://blog.quickso.cn/2021/02/26/%E5%88%A9%E7%94%A8DockerHub%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA%E6%97%A0%E9%99%90%E5%AE%B9%E9%87%8F%E4%B8%8D%E9%99%90%E9%80%9F%E7%9A%84%E7%BD%91%E7%9B%98/","excerpt":"","text":"很多服务商都提供了免费的Docker容器镜像服务，国内的也有一些，比如，阿里云，华为云等。今天要介绍的就是利用免费的Docker容器镜像搭建一个无限容量不限速的网盘。 友情提示：本文演示阿里云容器镜像服务搭建，请大家不要乱用资源！造成任何后果与本博无关！谢谢大家理解！ 1、项目介绍1）https://github.com/xausky/DockerRegisterCloud 2）客户端：https://github.com/xausky/DockerRegisterCloud/releases 3）基本功能 命令行工具基本功能，登录，文件列表，上传文件，下载文件 直接下载，在支持的仓库服务中可以直接在浏览器中实现下载而无需客户端 命令行功能优化，重命名文件以及删除文件 GUI 客户端，预计包括 Linux, Windows, Mac OS, Android, iOS，本项目使用 Dart 编写，GUI 客户端将使用 Flutter，期待热心小伙伴的帮助。 直接下载支持到仓库可以用 Web 版客户端复制永久直链，可用于图床等 4）支持仓库 服务提供商 无需成本 直接下载支持 Docker Register ✖️ ✖️ Docker Hub ✔️ ✔️ 百度智能云 ✔️ ✖️ 阿里云 ✔️ ✔️ 华为云 ✔️ ✔️ 本项目编写仅基于 Docker Registry HTTP API V2 未曾尝试破解或者逆向任何公司服务，用户存储的内容以及隐私性和安全性由用户自己负责以及仓库服务提供商保证，本项目未曾也没有能力负责和保证。 2、准备工作1）阿里云账号 2）本地需要下载客户端 3、部署本文以阿里云作为演示~~~~ 1）容器镜像服务 网址：https://cr.console.aliyun.com 2）开通阿里云免费的Docker存储 3）首先要设置登陆密码！这个密码后面会使用到！ 4）按照提示注册一个命名空间！(选择公开) 5）新建仓库选择我们新建的命名空间！（选择公开）代码源选择本地仓库！ 6）新建成功后，点击管理，进入后，复制公网地址，后面我们要使用！ 7）运行软件，仓库地址粘贴上面复制的公网地址，然后输入用户名 和密码！ 特别提醒：这里的密码不是阿里云的密码，是在第一步设置的密码，请注意！ 8）然后就可以愉快的使用啦！ 4.其他说明目前阿里云下载的文件名称都是data，需要自己手动修改文件名以及后缀！ 演示下载【点击下载】 5、最后1）客户端上传文件后，复制链接后，就可以共享链接地址，让他人方便的在浏览器里点击链接地址，直接下载了。这样你就有了一个不限速，不限容量的Docker网盘！ 注意：阿里云下载的文件名称都是data，需要自己手动修改文件名以及后缀！ 2）免费仓库 国内 阿里云：https://cr.console.aliyun.com 华为云：https://console.huaweicloud.com/swr 国外 Docker Hub：https://hub.docker.com/ 消息来源 本文消息来自**吾爱破解** 友情提醒：白嫖虽好，不要过分！！！","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://blog.quickso.cn/tags/Docker/"},{"name":"网盘","slug":"网盘","permalink":"https://blog.quickso.cn/tags/%E7%BD%91%E7%9B%98/"},{"name":"白嫖","slug":"白嫖","permalink":"https://blog.quickso.cn/tags/%E7%99%BD%E5%AB%96/"}]},{"title":"一键配置VScode的C语言开发环境","slug":"一键配置VScode的C语言开发环境","date":"2021-02-24T03:00:00.000Z","updated":"2021-02-24T03:10:15.539Z","comments":true,"path":"2021/02/24/一键配置VScode的C语言开发环境/","link":"","permalink":"https://blog.quickso.cn/2021/02/24/%E4%B8%80%E9%94%AE%E9%85%8D%E7%BD%AEVScode%E7%9A%84C%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/","excerpt":"","text":"最近因为学习需要，得整一个C语言的开发平台。打开百度一顿搜。嗯，推荐使用宇宙第一IDE——VS Code！随便敲一段代码，按下F5本来以为会跳出“Hello World”，结果。。。乖乖，我这程序运行出来个json文件！666!再定睛仔细以看，原来如此，还是要配置C语言开发环境的嘛。 这不看不知道，一看得吓尿。啥是编译器？？？啥是环境变量？？？我写C语言还要用编译器？？？这个MinGW和GCC有什么关系啊？这个tasks和launch是干啥事的呀？这给我还推荐插件装了咋也没用呢？好嘛，我就想写个C语言，本以为装个编辑器就完事了，咋还整出这么多乱七八糟的玩意。告辞！就这样，VS code劝退了诸多萌新，让他们与全宇宙数一数二好用的工具擦肩而过。 那有没有办法一键配置开发环境呢？答案肯定是：有！ B站UP主SDchao，就开发了一款一键配置C语言开发环境的工具。 下载链接：点我直达 压缩包下载好了，先解压！右键，以管理员权限运行那个又粗又大的exe文件，你将获得至高无上的快乐。 咳咳，你还是得选择一下项目文件夹。说人话就是你以后写的c或者cpp文件都要放在这个文件夹和它的子文件夹里面。 点击确认，配置文件、编译器、环境变量、编辑器插件……全部给你一一整好！完事了还帮你开了VS code。新建文件，写下代码，F5，完美运行。（如果不行的话关掉重启下VS code） 那一刻，泪流了下来 ~","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"VsCode","slug":"VsCode","permalink":"https://blog.quickso.cn/tags/VsCode/"},{"name":"C","slug":"C","permalink":"https://blog.quickso.cn/tags/C/"},{"name":"C++","slug":"C","permalink":"https://blog.quickso.cn/tags/C/"}]},{"title":"VSCode配置Python开发环境","slug":"VSCode配置Python开发环境","date":"2021-02-24T02:50:55.000Z","updated":"2021-02-24T02:58:44.682Z","comments":true,"path":"2021/02/24/VSCode配置Python开发环境/","link":"","permalink":"https://blog.quickso.cn/2021/02/24/VSCode%E9%85%8D%E7%BD%AEPython%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/","excerpt":"","text":"VSCode 是一个相当优秀的编辑器，具备开源、跨平台、模块化、插件丰富、启动时间快、颜值高、可高度定制等等优秀的特质，不愧是微软爸爸的私生子。不管是用来写 css,php,c/c++ 都是不错的选择，用 VSCode 来编写 Python，也是相当的好用的。所以，今天我们就来讲讲，怎么在 VScode 上配置 Python 开发环境。 程序准备首先，我们必须先下载好 Python 的安装包和 VSCode 的安装包。我之前 VS2019 已经自动安装好了 Python3，这里就不再进行安装了。下载地址如下： Python下载 VsCode下载 大家选择适合自己的版本下载即可。我是 Windows10 64 位的操作系统，所以我 Python 下的是 64 位的最新版，VSCode 下载的是 64 位的最新版。 软件安装安装 Python首先，我们安装 Python 到自己的电脑里。切记，一定要记得勾选添加环境变量。安装过程如下： 然后，我们需要检查下 python 是否安装成功。检查方法如下： 打开 cmd，输入 python，点击回车。 输入 import this，欣赏下 python 之禅。 退出，输入 pip list，检查第三方的包正确不。 安装第三方包通过 python 自带的 pip 工具，安装两个一会儿配置 VScode 需要的包。flake8 和 yapfflake8 会检查编写代码时的不规范的地方和语法错误。yapf 是一个代码格式化工具，可以一键美化代码。安装过程如下： 在 cmd 输入 pip list 检查是否已存在需要的包。 输入 pip install flake8 下载安装 flake8。 输入 pip install yapf 下载安装 yapf（检测代码规范性）。 配置 VSCode安装 Python 插件 打开 VScode，按下快捷键 Ctrl+Shift+X，进入插件管理页面。 在搜索栏输入 python。 选择插件，点击安装。 创建项目，配置工作区域 创建一个本地文件夹，作为项目文件。 在项目文件中，新建文件夹vscode，新建文件 settings.json。 123456789&#123; &quot;files.defaultLanguage&quot;: &quot;python&quot;, &quot;python.linting.flake8Enabled&quot;: true, &quot;python.formatting.provider&quot;: &quot;yapf&quot;, &quot;python.linting.flake8Args&quot;: [ &quot;--max-line-length=248&quot; ], &quot;python.linting.pylintEnabled&quot;: false&#125; 点击 VSCode 侧边栏中的Run，选择添加launch.json，选择Python File。 写个 Hello World 测试，按 F5 进行调试。 1print(&quot;Hello VScode&quot;) 配置完成到这里，整个 VSCode 编写 Python 的开发环境就已经全部配置完成了。 代码格式化工具 yapf：在 VSCode 中按下快捷键Alt+Shift+F即可自动格式化代码。","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"VsCode","slug":"VsCode","permalink":"https://blog.quickso.cn/tags/VsCode/"},{"name":"Python","slug":"Python","permalink":"https://blog.quickso.cn/tags/Python/"}]},{"title":"为博客添加访问提醒","slug":"为博客添加访问提醒","date":"2021-02-23T16:04:50.000Z","updated":"2021-02-23T16:09:34.545Z","comments":true,"path":"2021/02/24/为博客添加访问提醒/","link":"","permalink":"https://blog.quickso.cn/2021/02/24/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E6%8F%90%E9%86%92/","excerpt":"","text":"在网页底部自定义中添加 如果你网站开启了pjax,可能还会有点小bug,问题不大 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091&lt;!-- 客户端信息 --&gt; &lt;div id=&quot;fps&quot; style=&quot;z-index:5;position:fixed;bottom:3px;left:3px;color:#2196F3;font-size:10px;&quot;&gt;&lt;/div&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/gh/kaliisra/myblogstatic/kehuduan-js/fetch.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdn.gmit.vip/layer/3.1.1/layer.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; &lt;script&gt; /*网站打开提醒代码开始*/ $(function()&#123; if(/*getCookie(&#x27;msg&#x27;) !=*/ 1)&#123; var t = document.createElement(&quot;a&quot;); t.href = document.referrer; var msgTitle = t.hostname; var name = t.hostname.split(&quot;.&quot;)[1]; if(&quot;&quot; !== document.referrer)&#123; switch (name) &#123; case &#x27;bing&#x27;: msgTitle = &#x27;必应搜索&#x27;; break; case &#x27;baidu&#x27;: msgTitle = &#x27;百度搜索&#x27;; break; case &#x27;so&#x27;: msgTitle = &#x27;360搜索&#x27;; break; case &#x27;google&#x27;: msgTitle = &#x27;谷歌搜索&#x27;; break; case &#x27;sm&#x27;: msgTitle = &#x27;神马搜索&#x27;; break; case &#x27;sogou&#x27;: msgTitle = &#x27;搜狗搜索&#x27;; break; default: msgTitle = t.hostname; &#125;; &#125;; var time = (new Date).getHours(); var msg = &#x27;&#x27;; 23 &lt; time || time &lt;= 5 ? msg = &quot;你是夜猫子呀？这么晚还不睡觉，明天起的来嘛？&quot;: 5&lt; time &amp;&amp; time &lt;= 7 ? msg = &quot;早上好！一日之计在于晨，美好的一天就要开始了！&quot;: 7&lt; time &amp;&amp; time &lt;= 11 ? msg = &quot;上午好！工作顺利嘛，不要久坐，多起来走动走动哦！&quot;: 11&lt; time &amp;&amp; time &lt;= 14 ? msg = &quot;中午了，工作了一个上午，现在是午餐时间！&quot;: 14&lt; time &amp;&amp; time &lt;= 17 ? msg = &quot;午后很容易犯困呢，今天的运动目标完成了吗？&quot;: 17&lt; time &amp;&amp; time &lt;= 19 ? msg = &quot;傍晚了！窗外夕阳的景色很美丽呢，最美不过夕阳红~&quot;: 19&lt; time &amp;&amp; time &lt;= 21 ? msg = &quot;晚上好，今天过得怎么样？&quot;: 21&lt; time &amp;&amp; time &lt;= 23 &amp;&amp; (msg = &quot;已经这么晚了呀，早点休息吧，晚安~&quot;); $.ajax(&#123; type:&quot;get&quot;, url:&quot;https://open.gmit.vip/web/api/UserInfo/&quot;, async:true, success:function(data)&#123; window.info = data; layer.msg(&quot;Hi~ 来自&quot;+ data.data.location + &#x27;~&lt;br/&gt;通过 &#x27;+msgTitle+&#x27; 进来的朋友！&lt;br/&gt;使用 &#x27;+ data.data.os +&quot;&lt;br/&gt;&quot;+ data.data.browser +&#x27; 访问本站！&#x27; + &#x27;&lt;br/&gt;&#x27; + msg); var showFPS = (function()&#123; var requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) &#123; window.setTimeout(callback, 1000/60); &#125;; var e,pe,pid,fps,last,offset,step,appendFps; fps = 0; last = Date.now(); step = function()&#123; offset = Date.now() - last; fps += 1; if( offset &gt;= 1000 )&#123; last += offset; appendFps(fps); fps = 0; &#125;; requestAnimationFrame( step ); &#125;; appendFps = function(fps)&#123; var settings = &#123; timeout: 5000, logError: true &#125;; $(&#x27;#fps&#x27;).html(&#x27;&lt;span style=&quot;float:left;&quot;&gt;&#x27;+fps+&#x27;FPS&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot;float:left&quot;&gt;&#x27;+window.info.data.os+&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot;float:left;margin-top:1px;&quot;&gt;&#x27;+window.info.data.browser+&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot;float:left;margin-top:1px;&quot;&gt;&#x27;+window.info.data.location+&#x27;&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot;float:left;margin-top:1px;&quot;&gt;&lt;/span&gt;&#x27;); &#125;; step(); &#125;)(); &#125; &#125;); &#125;; &#125;); &lt;/script&gt; 如果不显示，在头部或者脚部添加以下代码 1&lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;","categories":[{"name":"代码","slug":"代码","permalink":"https://blog.quickso.cn/categories/%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.quickso.cn/tags/Hexo/"},{"name":"博客","slug":"博客","permalink":"https://blog.quickso.cn/tags/%E5%8D%9A%E5%AE%A2/"}]},{"title":"Armbian-N1手动安装omv","slug":"Armbian-N1手动安装omv","date":"2021-02-23T04:49:59.000Z","updated":"2021-02-23T04:53:34.362Z","comments":true,"path":"2021/02/23/Armbian-N1手动安装omv/","link":"","permalink":"https://blog.quickso.cn/2021/02/23/Armbian-N1%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85omv/","excerpt":"","text":"本来是想用 armbian-config 来自动安装 OpenMediaVault 的，但是安装的时候总是自动退出，无奈，只能手动安装了。 1. 添加 OMV 软件源123echo &quot;deb http://packages.openmediavault.org/public arrakis main&quot; &gt; /etc/apt/sources.list.d/openmediavault.list apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 7E7A6C592EF35D13 24863F0C716B980Bapt update 2. 设置环境变量123export LANG=C export DEBIAN_FRONTEND=noninteractive export APT_LISTCHANGES_FRONTEND=none 3. 安装 OMV12apt install openmediavault-keyring postfix apt install openmediavault 4. 初始化：快完成时有确认提示，如下： 确认后，omv-initsystem 进行初始化 5. 安装完成后，输入http://ip打开登陆页面，默认账号密码如下， 账号：admin 密码：openmediavault 6. 安装扩展插件123wget http://omv-extras.org/openmediavault-omvextrasorg_latest_all4.debdpkg -i openmediavault-omvextrasorg_latest_all4.debapt-get update 这样就安装完成了！","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://blog.quickso.cn/tags/Linux/"},{"name":"N1","slug":"N1","permalink":"https://blog.quickso.cn/tags/N1/"},{"name":"Armbian","slug":"Armbian","permalink":"https://blog.quickso.cn/tags/Armbian/"},{"name":"OpenMediaVault","slug":"OpenMediaVault","permalink":"https://blog.quickso.cn/tags/OpenMediaVault/"}]},{"title":"钉钉内网穿透，免费高速的内网穿透工具","slug":"钉钉内网穿透，免费高速的内网穿透工具","date":"2021-02-21T10:57:06.000Z","updated":"2021-02-21T11:09:28.453Z","comments":true,"path":"2021/02/21/钉钉内网穿透，免费高速的内网穿透工具/","link":"","permalink":"https://blog.quickso.cn/2021/02/21/%E9%92%89%E9%92%89%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%EF%BC%8C%E5%85%8D%E8%B4%B9%E9%AB%98%E9%80%9F%E7%9A%84%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7/","excerpt":"","text":"什么是内网穿透？就是让你个人电脑内建立的网站，在外网可以访问，例如你的手机，其他电脑等。 例如你在电脑部署了一个web服务器，你在浏览器访问127.0.0.1可以打开这个网站，但是你用手机访问127.0.0.1却打不开。那是因为你这个ip地址不是公网ip，只能在你的电脑访问，你需要将127.0.0.1暴露出去，即需要有一个公网ip，别人访问公网ip即可访问网站。 假设你的电脑是A，你的手机是B，你有一台拥有公网ip的服务器C，显然B想知道A里面有什么，是有一堵墙阻挡住了，这是防火墙。我们的目的就是绕过防火墙，即需要C来协助。 A可以和C进行信息交换，因为C是公网的，大家可以访问C，所以B也可以和C进行信息交换，如果B想和A联系，B先和C联系，C再和A联系，那么B就可以间接联系到A了，即C作为A和B的中介，也称为代理。 如何实现内网穿透？市面上的内网穿透软件、工具很多，收费的有花生壳、向日葵、免费的有frp、ngrok，其中frp、ngrok是需要一些搭建基础的，对小白不友好啊，但是钉钉把ngrok进行了封装，小白也可以上手，下面给大家介绍钉钉这款内网穿透工具如何使用 内网穿透之HTTP穿透鉴于很多开发者在临时体验开发时往往没有公网域名或者公网IP，本工具提供了一个公网代理服务，目的是方便开发测试。 本工具不保证稳定性，仅适用于开发测试阶段，禁止当作公网域名使用。如线上应用使用本工具造成稳定性问题，后果由自己承担。如使用本工具传播违法不良信息，钉钉将追究法律责任。 内网穿透示意图 场景介绍案例一：ISV三方企业小程序的回调地址必须是公网域名或IP，对于大部分开发者来说，开发者无法在本地调试远程代码，对于回调URL校验不通过之类的问题无法追踪，只能不断远程部署查看log日志来调试修改。 案例二：企业通讯录同步过程中需要注册一个公网域名(或IP)的回调地址，用来接收钉钉上的企业通讯录信息变更。 内网穿透工具可以实现将一个公网域名映射到本地的localhost域名 github地址：https://github.com/open-dingtalk/pierced 使用方法一、下载程序从上面github地址里下载程序，或者直接用git clone 这里以Linux系统为例 12git clone https://github.com/open-dingtalk/pierced.gitcd pierced/linux/ 二、启动程序Linux、Mac下用系统终端，Windows下要用CMD，Powershell不知为何运行不了。 执行./ding -config=./ding.cfg -subdomain=域名前缀 端口，这里以Linux系统为例 12chmod +x ./ding./ding -config=./ding.cfg -subdomain=huange 8080 参数说明： 参数 说明 -config 内网穿透的配置文件，按命令照示例固定为钉钉提供的./ding.cfg，无需修改 -subdomain 您需要使用的域名前缀，该前缀将会匹配到“vaiwan.com”前面，例如你的subdomain是abcde，启动工具后会将abcde.vaiwan.com映射到本地。 端口 您需要代理的本地服务http-server端口，例如你本地端口为8080等 三、启动成功 启动完客户端后，你访问http://abcde.vaiwan.com/xxxxx都会映射到 http://127.0.0.1:8080/xxxxx。 四、注意事项 需要访问的域名是http://abcde.vaiwan.com/xxxxx 而不是http://abcde.vaiwan.com:8080/xxxxx 启动命令的subdomain参数有可能被别人占用，尽量不要用常用字符，可以用自己公司名的拼音，例如：alibaba、dingding等 可以在本地起个http-server服务，放置一个index.html文件，然后访问http://abcde.vaiwan.com/index.html测试一下 官方文档：点击进入","categories":[{"name":"工具","slug":"工具","permalink":"https://blog.quickso.cn/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"内网穿透","slug":"内网穿透","permalink":"https://blog.quickso.cn/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"},{"name":"免费","slug":"免费","permalink":"https://blog.quickso.cn/tags/%E5%85%8D%E8%B4%B9/"}]},{"title":"使用服务器24小时不间断直播电影电视剧","slug":"使用服务器24小时不间断直播电影电视剧","date":"2021-02-21T07:26:09.000Z","updated":"2021-02-21T07:29:28.697Z","comments":true,"path":"2021/02/21/使用服务器24小时不间断直播电影电视剧/","link":"","permalink":"https://blog.quickso.cn/2021/02/21/%E4%BD%BF%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A824%E5%B0%8F%E6%97%B6%E4%B8%8D%E9%97%B4%E6%96%AD%E7%9B%B4%E6%92%AD%E7%94%B5%E5%BD%B1%E7%94%B5%E8%A7%86%E5%89%A7/","excerpt":"","text":"在现在主流的平台上面有很多直播电影，电视剧的房间。很多直播平台也有这方面影视的版权。大部分新人还是使用obs+potplayer来直播。这显然不符合技术宅的解决方法，需要开机个windows主机？技术宅：NO。利用我闲置的vps，云服务器。在b站，虎牙，斗鱼上面24小时不间断直播比obs方便太多下面是我的直播方案，我选用的是白嫖的华为云centos系统的云服务器，cpu内存都不高，网络选用的是1M小水管。 准备工作：下载直播推流工具: wget http://download.bytelang.cn/kplayer-latest-linux_amd64.tar.gz 12# 解压压缩包tar zxvf kplayer-latest-linux_amd64.tar.gz 得到可执行文件 媒体资源准备:自行下载想要直播的视频资源，我直播的是蜡笔小新。用迅雷下载完成蜡笔小新的全集后，上传到服务器中任意目录 开始直播：编辑kplayer.yaml的配置文件(可查看官方文档)，在playlist里面添加进下载的媒体资源 12345678910version: &quot;1.0&quot;player: media: list: - &quot;/root/lbxx/蜡笔小新1.mp4&quot; - &quot;/root/lbxx/蜡笔小新2.mp4&quot; output: type: rtmp path: &quot;rtmp://*****&quot; 下面的output path一般是直播平台提供的推流地址，工具将我们的媒体资源推送到直播服务器上面就开始正式直播了。 但是kplayer没有提供后台运行的功能，我借助的是tmux工具来进行后台运行的。如果有嫌麻烦的小伙伴可以 nohup 命令来进行后台推流. 1nohup ./kplayer 打开直播间，就能完整看到蜡笔小新正在播放了 配置文件：官方网站上面有很详细的配置文件说明，提供了插件。缓存，多个直播平台推流的功能。还是挺全面的，赞一个。这是网站地址 https://kplayer.bytelang.cn/ 有空可以去看看我的直播间https://live.bilibili.com/21577989","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"VPS","slug":"VPS","permalink":"https://blog.quickso.cn/tags/VPS/"},{"name":"服务器","slug":"服务器","permalink":"https://blog.quickso.cn/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}]},{"title":"PHP空间虚拟主机不支持子目录的情况下借助.htaccess实现多个域名重定向到子目录实现单空间多站点","slug":"PHP空间虚拟主机不支持子目录的情况下借助-htaccess实现多个域名重定向到子目录实现单空间多站点","date":"2021-02-20T08:28:57.000Z","updated":"2021-02-20T08:33:10.000Z","comments":true,"path":"2021/02/20/PHP空间虚拟主机不支持子目录的情况下借助-htaccess实现多个域名重定向到子目录实现单空间多站点/","link":"","permalink":"https://blog.quickso.cn/2021/02/20/PHP%E7%A9%BA%E9%97%B4%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E4%B8%8D%E6%94%AF%E6%8C%81%E5%AD%90%E7%9B%AE%E5%BD%95%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E5%80%9F%E5%8A%A9-htaccess%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%B8%AA%E5%9F%9F%E5%90%8D%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0%E5%AD%90%E7%9B%AE%E5%BD%95%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%A9%BA%E9%97%B4%E5%A4%9A%E7%AB%99%E7%82%B9/","excerpt":"","text":"举例：有多个域名：site1.abc.com，site2.abc.com，site3.abc.com分别在二级目录site1.abc.com/，site2.abc.com/，site3.abc.com/ .htaccess的代码如下 123456789101112131415161718192021222324RewriteEngine OnRewriteCond %&#123;HTTP_HOST&#125; ^site1.abc.com$RewriteCond %&#123;REQUEST_URI&#125; !^/site1.abc.com/RewriteCond %&#123;REQUEST_FILENAME&#125; !-fRewriteCond %&#123;REQUEST_FILENAME&#125; !-dRewriteRule ^(.*)$ /site1.abc.com/$1RewriteCond %&#123;HTTP_HOST&#125; ^site1.abc.com$RewriteRule ^(/)?$ site1.abc.com/index.php [L]RewriteCond %&#123;HTTP_HOST&#125; ^site2.abc.com$RewriteCond %&#123;REQUEST_URI&#125; !^/site2.abc.com/RewriteCond %&#123;REQUEST_FILENAME&#125; !-fRewriteCond %&#123;REQUEST_FILENAME&#125; !-dRewriteRule ^(.*)$ /site2.abc.com/$1RewriteCond %&#123;HTTP_HOST&#125; ^site2.abc.com$RewriteRule ^(/)?$ site2.abc.com/index.php [L]RewriteCond %&#123;HTTP_HOST&#125; ^site3.abc.com$RewriteCond %&#123;REQUEST_URI&#125; !^/site3.abc.com/RewriteCond %&#123;REQUEST_FILENAME&#125; !-fRewriteCond %&#123;REQUEST_FILENAME&#125; !-dRewriteRule ^(.*)$ /site3.abc.com/$1RewriteCond %&#123;HTTP_HOST&#125; ^site3.abc.com$RewriteRule ^(/)?$ site3.abc.com/index.php [L]","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"虚拟主机","slug":"虚拟主机","permalink":"https://blog.quickso.cn/tags/%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA/"},{"name":"虚拟空间","slug":"虚拟空间","permalink":"https://blog.quickso.cn/tags/%E8%99%9A%E6%8B%9F%E7%A9%BA%E9%97%B4/"}]},{"title":"Hexo博客的备份与恢复","slug":"Hexo博客的备份与恢复","date":"2021-02-20T03:15:31.000Z","updated":"2021-02-20T03:46:11.076Z","comments":true,"path":"2021/02/20/Hexo博客的备份与恢复/","link":"","permalink":"https://blog.quickso.cn/2021/02/20/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/","excerpt":"","text":"可能有的小伙伴认为备份不就创建一个仓库多简单；或者说我将Hexo博客源文件拷贝到U盘不就可以了吗，可是你写一篇文章或者更新一次配置就要拷贝一次不是很麻烦吗？ 备份博客源文件的好处： 如果电脑突然罢工，我们的源文件也不会丢失。 有时候不方便需要更换电脑写作，我们直接clone仓库就可以了。 前提、机制前提是你已经初始化好了自己想要备份的那个博客。GIT、GitHub/Gitee环境已经准备好了。 机制是这样的，由于hexo d上传部署到github的其实是hexo编译后的文件，是用来生成网页的，不包含源文件。 也就是上传的是在本地目录里自动生成的.deploy_git里面。 其他文件 ，包括我们写在source 里面的文章，和配置文件，主题文件，都没有上传到github 备份博客我是用的gitee，因为Github有时候速度慢上不去。 ⑴Git配置多个SSH-Key我用Github部署博客，用Gitee备份博客，所以需要两个SSH-Key，现在已经有了Github的，所以再新建一个Gitee的就欧克了 解决方法1.生成一个Gitee用的SSH-Key 1ssh-keygen -t rsa -C &#x27;xxxxx@qq.com&#x27; -f ~/.ssh/gitee_id_rsa 2.输入命令，无脑下一步即可，会生成密钥文件 3.将gitee_id_rsa.pub用记事本打开，把里面的密钥填到Gitee 4.在 ~/.ssh 目录下新建一个config文件，添加如下内容（其中Host和HostName填写git服务器的域名，IdentityFile指定私钥的路径） 12345# giteeHost gitee.comHostName gitee.comPreferredAuthentications publickeyIdentityFile ~/.ssh/gitee_id_rsa 4.用ssh命令测试 1ssh -T git@gitee.com 成功的话会返回下图内容 ⑵新建仓库新建一个仓库，自己命名，勾选README ⑶获取 .git文件夹原始的博客文件夹只有.deploy_git，是没有.git文件夹的，于是我们先去桌面或者哪里随便一个地方，把刚刚的hexo分支给clone下来。然后剪切出里面的.git文件夹，复制到现在的博客文件夹中。 命令： 12git clone git@gitee.com:muzihuaner/hexo.git//git@gitee.com:muzihuaner/hexo.git 改为你自己的 如图： ⑷创建.gitignore用来在上传时候忽略一些文件，即不上传.gitignore中忽略的文件。有就不用管了，没有的话自己手动添加。 12345678.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/1234567 注意，如果你之前克隆过theme中的主题文件，那么应该把主题文件中的.git文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。 ⑸备份通过如下命令将本地文件备份到Gitee上。在hexo博客的根目录下执行 123git add .git commit -m &quot;backup&quot; （注：“backup”里面换成你需要，如“first commit”）git push -u origin master （注：此操作目的是把本地仓库push到gitee上面，如果没有使用密钥此步骤需要你输入帐号和密码） 这样就备份完博客了且在Gitee上能看到 其中node_modules、public、db.json已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要重新输入命令安装 。 个人备份习惯123456hexo cgit add .git commit -m &quot;Backup&quot;git pushhexo ghexo d 恢复博客目前假设本地Hexo博客基础环境已经搭好：比如安装git、nodejs、hexo安装… 克隆项目到本地输入下列命令克隆博客必须文件 12git clone https://gitee.com/muzihuaner/hexo.git//https://gitee.com/muzihuaner/hexo.git换成你的 恢复博客在clone下来的那个文件夹里面执行 123npm install hexo-clinpm installnpm install hexo-deployer-git 在此不需要执行hexo init这条指令，因为不是从零搭建起新博客。 然后就完成了，你如果想也可以 123hexo cleanhexo ghexo d 是不是很简单呢？","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.quickso.cn/tags/Hexo/"}]},{"title":"快链-友链接力","slug":"快链-友链接力","date":"2021-02-20T02:03:28.000Z","updated":"2021-02-20T02:06:05.546Z","comments":true,"path":"2021/02/20/快链-友链接力/","link":"","permalink":"https://blog.quickso.cn/2021/02/20/%E5%BF%AB%E9%93%BE-%E5%8F%8B%E9%93%BE%E6%8E%A5%E5%8A%9B/","excerpt":"","text":"开箱即用的网站友链交换解决方案。 预览：https://quickso.cn 首页：https://myquicklinks.vercel.app 项目介绍快链是一个开箱即用的友链接力项目，您只需要将“快链”的徽标或者链接放入您的网页，提交审核，审核通过，就可以使用。 可以用来增加网页流量和交个朋友（李姐万岁~） 原理每当有用户访问加入快链的网页时，点击快链后会**随机跳转**到另一个加入快链的网页。加入快链的网页越多，友链接力的规模越大，分享流量的规模也越大。 “ 网页A → 快链 → 网页B → 快链 → 网页C → 快链 → 网页D → 快链 → 网页E → 快链 → 网页F … ” 示例： 项目仓库国际：Github https://github.com/muzihuaner/QuickLinks 国内：Gitee https://gitee.com/muzihuaner/QuickLinks","categories":[{"name":"工具","slug":"工具","permalink":"https://blog.quickso.cn/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"QuickLinks","slug":"QuickLinks","permalink":"https://blog.quickso.cn/tags/QuickLinks/"},{"name":"快链","slug":"快链","permalink":"https://blog.quickso.cn/tags/%E5%BF%AB%E9%93%BE/"}]},{"title":"利用CloudFlare Worker 免费部署 JSProxy 服务","slug":"利用CloudFlare Worker 免费部署 JSProxy 服务","date":"2021-02-20T01:38:41.000Z","updated":"2021-02-20T01:54:46.038Z","comments":true,"path":"2021/02/20/利用CloudFlare Worker 免费部署 JSProxy 服务/","link":"","permalink":"https://blog.quickso.cn/2021/02/20/%E5%88%A9%E7%94%A8CloudFlare%20Worker%20%E5%85%8D%E8%B4%B9%E9%83%A8%E7%BD%B2%20JSProxy%20%E6%9C%8D%E5%8A%A1/","excerpt":"","text":"SProxy 一个基于浏览器端 JS 实现的在线代理，这里不多介绍！ 本文主要介绍一下利用CloudFlare Worker 来搭建一个JSProxy服务。 CloudFlare Worker 是 CloudFlare 的边缘计算服务。开发者可通过 JavaScript 对 CDN 进行编程，从而能灵活处理 HTTP 请求。这使得很多任务可在 CDN 上完成，无需自己的服务器参与。 CloudFlare Worker免费服务，支持每天10 万次免费请求！基本也够用了！ 准备工作1、Cloudflare账号*1；2、GitHub上一个大佬开源的项目；最终得到：一个可用于应急或者日常使用的的网页端在线代理。 使用教程1）打开 https://workers.cloudflare.com，登陆上你的 Cloudflare 账号激活 Workers 服务 然后创建一个 Workers【Create a Worker】 2）修改一下子域名，创建出来的域名格式 自定义的内容.Cloudflare用户名.workers.dev 3）复制 index.js 的内容到左侧代码（Script）区域 代码备份：点我进入 4）先点击【Run】右侧看执行效果，再点击 【Save and deploy】 部署代码 5）届时你可以访问你的站点https://xxx.子域名.workers.dev查看效果 进入站点后将线路选择切换为当前站点即可使用 特别提示：浏览网站的时候，有时候会提示加载不安全脚本，点击允许即可！ 演示站点：点击进入 绑定自己的域名（可有可无）1、确保自己在Cloudflare下托管的有域名；2、选择Workers选项；3、点击添加路由； 4、输入信息；5、将部署好的在线代理网站域名（这个是Cloudflare分配给你的）CNAME指向到你自己的域名，即添加DNS记录中的CNAME模式，文本框填Cloudflare分配给你的域名；6、即可访问自己的域名来访问在线代理。","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"CloudFlare","slug":"CloudFlare","permalink":"https://blog.quickso.cn/tags/CloudFlare/"},{"name":"JSProxy","slug":"JSProxy","permalink":"https://blog.quickso.cn/tags/JSProxy/"}]},{"title":"Hexo sever端口占用，localhost:4000无响应","slug":"Hexo sever端口占用，localhost-4000无响应","date":"2021-02-19T15:17:25.000Z","updated":"2021-02-20T02:00:35.279Z","comments":true,"path":"2021/02/19/Hexo sever端口占用，localhost-4000无响应/","link":"","permalink":"https://blog.quickso.cn/2021/02/19/Hexo%20sever%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%EF%BC%8Clocalhost-4000%E6%97%A0%E5%93%8D%E5%BA%94/","excerpt":"","text":"这种情况一般是因为4000端口被占用，使用下面的命令更改端口号为5000然后浏览器输入http://localhost:5000/ 1$ hexo server -p 5000 可是每次这样设置会很麻烦（如果4000端口被占用） 解决办法：在站点配置文件加入 1234server: port: 5000 compress: true header: true","categories":[{"name":"代码","slug":"代码","permalink":"https://blog.quickso.cn/categories/%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.quickso.cn/tags/Hexo/"}]},{"title":"Git常用命令","slug":"Git常用命令","date":"2021-02-19T09:45:45.000Z","updated":"2021-02-19T15:39:30.176Z","comments":true,"path":"2021/02/19/Git常用命令/","link":"","permalink":"https://blog.quickso.cn/2021/02/19/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"前言本篇记录下我使用Git常用的命令 配置使用Git的第一件事就是将其配置好，其中需要配置“用户名”、“邮箱”、“创建SSH” 首先在Git的安装目录中打开”git-bash.exe“ 1.配置用户名及邮箱 12git config --global user.name &quot;Your Name&quot;git config --global user.email &quot;your_email@example.com&quot; 为了记住用户名和邮箱我们还需要执行下面这个命令 1git config --global credential.helper store 2.创建SSH 在命令行中输入这个命令，之后一直回车即可 1ssh-keygen -t rsa 3.配置SSH 由于博主使用Coding的代码托管，因此讲一下Coding的SSH配置，其他请自行百度查找教程 首先打开“C:\\Users\\用户名.ssh”文件夹，右击“id_rsa.pub”文件，选择用记事本打开，复制里面的所有内容 然后登录Coding，在右上角头像处选择“个人设置”，然后选择“SSH公钥”。单击“新增公钥”，在“公钥内容”中粘贴刚刚复制的内容，”公钥名称“可不填，勾选”永久有效“，单击”添加“就可以。 至此，SSH就配置好了 新建代码库12345678# 在当前目录新建一个Git代码库git init# 新建一个目录，将其初始化为Git代码库git init [project-name]# 下载一个项目和它的整个代码历史git clone [url] 增加/删除文件123456789101112131415161718192021# 添加指定文件到暂存区git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录git add [dir]# 添加当前目录的所有文件到暂存区git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交git add -p# 删除工作区文件，并且将这次删除放入暂存区git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区git rm --cached [file]# 改名文件，并且将这个改名放入暂存区git mv [file-original] [file-renamed] 我一般就是直接添加所有文件到暂存区,代码如下 1git add -A 代码提交123456789101112131415161718# 提交暂存区到仓库区（常用）git commit -m [message]# 提交暂存区的指定文件到仓库区git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区git commit -a# 提交时显示所有diff信息git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化git commit --amend [file1] [file2] ... 分支12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# 列出所有本地分支git branch# 列出所有远程分支git branch -r# 列出所有本地分支和远程分支git branch -a# 新建一个分支，但依然停留在当前分支git branch [branch-name]# 新建一个分支，并切换到该分支git checkout -b [branch]# 新建一个分支，指向指定commitgit branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区git checkout [branch-name]# 切换到上一个分支git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支git merge [branch]# 选择一个commit，合并进当前分支git cherry-pick [commit]# 删除分支git branch -d [branch-name]# 删除远程分支git push origin --delete [branch-name]git branch -dr [remote/branch]# 本地存在一个分支，名称叫：develop_chen，但远程没有怎么办？git push origin develop_chen这样就在远程建立一个和本地一样的分支 git branch --set-upstream-to=origin/develop develop 本地分支和远程分支建立跟踪关系 标签1234567891011121314151617181920212223242526# 列出所有taggit tag# 新建一个tag在当前commitgit tag [tag]# 新建一个tag在指定commitgit tag [tag] [commit]# 删除本地taggit tag -d [tag]# 删除远程taggit push origin :refs/tags/[tagName]# 查看tag信息git show [tag]# 提交指定taggit push [remote] [tag]# 提交所有taggit push [remote] --tags# 新建一个分支，指向某个taggit checkout -b [branch] [tag] 查看信息12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061# 显示有变更的文件git status# 显示当前分支的版本历史git log# 显示commit历史，以及每次commit发生变更的文件git log --stat# 搜索提交历史，根据关键词git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名git log --follow [file]git whatchanged [file]# 显示指定文件相关的每一次diffgit log -p [file]# 显示过去5次提交git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序git shortlog -sn# 显示指定文件是什么人在什么时间修改过git blame [file]# 显示暂存区和工作区的代码差异git diff# 显示暂存区和上一个commit的差异git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异git diff HEAD# 显示两次提交之间的差异git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;# 显示某次提交的元数据和内容变化git show [commit]# 显示某次提交发生变化的文件git show --name-only [commit]# 显示某次提交时，某个文件的内容git show [commit]:[filename]# 显示当前分支的最近几次提交git reflog# 从本地master拉取代码更新当前分支：branch 一般为mastergit rebase [branch] 远程同步123456789101112131415161718192021222324git remote update --更新远程仓储# 下载远程仓库的所有变动git fetch [remote]# 显示所有远程仓库git remote -v# 显示某个远程仓库的信息git remote show [remote]# 增加一个新的远程仓库，并命名git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并git pull [remote] [branch]# 上传本地指定分支到远程仓库git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突git push [remote] --force# 推送所有分支到远程仓库git push [remote] --all 撤销12345678910111213141516171819202122232425262728293031# 恢复暂存区的指定文件到工作区git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区git checkout [commit] [file]# 恢复暂存区的所有文件到工作区git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变git reset [file]# 重置暂存区与工作区，与上一次commit保持一致git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支git revert [commit]# 暂时将未提交的变化移除，稍后再移入git stashgit stash pop 其他（合并两个分支：Merge）1，将开发分支代码合入到master中 12345git checkout dev #切换到dev开发分支git pullgit checkout mastergit merge dev #合并dev分支到master上git push origin master #将代码推到master上 2，将master的代码同步更新到开发分支中 merge方法：保证主干提交线干净(可以安全回溯) 1234567git checkout mastergit pullgit checkout devgit merge mastergit pull origin devCOPY# 生成一个可供发布的压缩包git archive","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://blog.quickso.cn/tags/Git/"}]},{"title":"Hexo博客搭建与部署","slug":"Hexo博客搭建与部署","date":"2021-02-19T09:45:45.000Z","updated":"2021-02-19T15:39:46.252Z","comments":true,"path":"2021/02/19/Hexo博客搭建与部署/","link":"","permalink":"https://blog.quickso.cn/2021/02/19/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%83%A8%E7%BD%B2/","excerpt":"","text":"Hexo简介Hexo是一款基于Node.js的静态博客框架，使用Markdown（或其他渲染引擎）解析文章，依赖少易于安装，可在几秒内利用现有主题生成静态网页。框架提供了很详细的中文文档，大家可以进入Hexo官网查看。 搭建环境准备安装GitGit是一个先进的分布式版本控制工具，可以有效处理不同规模的项目版本管理。这里用于管理你的Hexo文章，将本地的博客上传至Github。到Git官网选择合适的版本下载，安装后会有一个Git Bash的命令行工具，之后用该工具操作Git。 检查是否安装成功： 1git --version 正常显示版本号，无报错即为安装成功。 另外，Windows环境下在Git安装完成后，可以使用Git Bash来进行后续命令行操作。 安装Node.jsHexo基于Node.js，所以需要安装Node.js及npm工具。可进入Node.js中文网下载，选择LTS（长期支持版本）即可。 检查是否安装成功： 12node -vnpm -v 正常显示版本号，无报错即为安装成功。 博客本地搭建安装Hexo右键打开Git Bash，输入命令： 1npm install -g hexo-cli 检查是否安装成功： 1hexo -v 初始化博客在电脑上新建一个文件夹作为博客的目录，例如这里我将博客目录设置为myblog，执行以下命令： 123hexo init myblogcd myblognpm install 博客目录介绍新建完成后，指定文件夹的目录如下： 123456789.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes_config.yml 网站的配置信息，可以在此配置大部分的参数。 1package.json 应用程序的信息，新添加的插件内容也会显示在这里，可以不做修改。 1scaffolds 模板文件夹，新建文章时，Hexo会根据scaffolds来建立文件。 Hexo的模板是指在新建的Markdown文件中默认填充的内容，我们可以在模板上添加自定义内容，比如categories，tags等。 1source source文件夹是存放用户资源的地方，也就是我们的博客内容。初始设置两个文件夹，posts（文章）和drafts（草稿）。之后通过命令新建页面后，文件夹数量会增加。 1themes 主题文件夹，用于存放主题文件包，Hexo会根据主题内容生成静态页面，默认主题为landscape，可根据个人喜好进行更改。 博客本地效果Git Bash执行以下命令： 12hexo -ghexo server 启动hexo服务，访问http://localhost:4000即可看到生成的博客页面。使用Ctrl+C可关闭本地服务。 博客Github部署创建个人仓库这里需要Github账号，如果没有可以去注册一个。 登录Github，新建一个仓库，命名格式为：用户名.github.io。比如，我的用户名是muzihuaner，我的仓库名为muzihuaner.github.io`。注意这里必须按此格式命名，只有这样，之后部署到GitHub pages的时候，才会被识别。 配置SSH打开Git Bash，输入以下命令，生成本地密钥。这里用户名和邮箱仅作演示，用户名为你Github的用户名，邮箱为你Github的邮箱。 12git config --global user.name &quot;muzihuaner&quot;git config --global user.email &quot;xxxxxx@qq.com&quot; 输入以下命令，检查输入是否正确： 12git config user.namegit config user.email 确认无误后，输入以下命令，创建SSH： 1ssh-keygen -t rsa -C &quot;youremail&quot; 无脑下一步即可 此时在用户文件夹下，已经生成了.ssh文件夹，在本地找到这个文件夹。 id_rsa是你这台电脑的私人秘钥，id_rsa.pub是公共秘钥。把公钥放在GitHub上，当你连接自己的Github账号时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过Git上传你的文件到GitHub上。 在Github的设置中，找到SSH and GPG keys，新建SSH Key，以文本方式打开id_rsa.pub文件，将内容复制到Key，标题随便起，添加Key。 部署代码到Github打开站点配置文件_config.yml，拉到最底部，找到deploy字段，按如下格式修改其内容： 1234deploy: type: git repository: git@github.com:muzihuaner/muzihuaner.github.io.git branch: main 其中repo字段可在Github获取： 回到Git Bash，安装deploy-git ，用于使用命令部署到Github。 1npm install hexo-deployer-git --save 然后执行： 123hexo clean //可省略hexo generatehexo deploy 出现下图所示说明部署成功，此时代码已同步至Github。 打开网址http://yourname.github.io就可以看到Hexo博客了。 常用命令Hexo文档中命令很多，但你并不需要记住每一个。在博客的使用过程中，主要的命令如下： init用于新建网站 1hexo init &lt;folder&gt; new用于新建文章或页面 1hexo new [layout] &lt;title&gt; generate用于生成静态页面 12hexo generatehexo g //简写 deploy用于将内容部署到网站 12hexo deployhexo -g publish用于将内容从drafts文件夹移动到posts文件夹 1hexo publish [layout] &lt;title&gt; server用于启动服务器进行预览，默认情况下，访问入口为http://localhost:4000/ 12hexo serverhexo s //简写 实际上，除了第一次部署时，需要用到hexo init这个命令，平时写博客的过程中，最常用的就是： hexo n 新建文章/页面 hexo g 生成静态页面 hexo s 本地查看内容 hexo d 部署到Github 如果需要清除之前生成的内容，可以在生成静态页面前执行hexo clean，其他情况只需要以上四条命令即可。 之后你就可以使用各种各样的主题啦！详细使用主题的教程，看主题的文档就可以了哦！ 设置个人域名现在你的个人网站的地址是 yourname.github.io，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。推荐在良心云上买域名 因为Github的Page服务处于半墙状态，所以我们这里使用Vercel代理 打开Vercel，使用Github账号登录 新建Project 填写对应的github仓库https地址，单击Continue 此处直接点击Continue 此处可以填写下PROJECT NAME，也可默认，毕竟后面要添加域名。然后点击Deploy，这个Project就建好了 添加域名解析记录在域名控制台添加域名解析记录，如下方所示。 线路类型 记录值 默认 76.76.21.21 添加对应的域名回到Vercel,点击之前创建的Project的settings打开设置，选择Domains 添加对应的域名即可。 除此之外你还可以使用Coding来部署博客（教程自行百度） 好了，基本的安装方法到此结束，尽情折腾吧！","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.quickso.cn/tags/Hexo/"}]},{"title":"V2ray部署教程","slug":"V2ray部署教程","date":"2021-02-19T01:21:17.000Z","updated":"2021-03-13T01:42:40.652Z","comments":true,"path":"2021/02/19/V2ray部署教程/","link":"","permalink":"https://blog.quickso.cn/2021/02/19/V2ray%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/","excerpt":"","text":"前言什么是V2ray? V2Ray(Project V) 相对于 Shadowsocks，V2Ray 更像全能选手，拥有更多可选择的协议 / 传输载体 (Socks、HTTP、TLS、TCP、mKCP、WebSocket )，还有强大的路由功能，不仅仅于此，它亦包含 Shadowsocks 组件，你只需要安装 V2Ray，你就可以使用所有的 V2Ray 相关的特性包括使用 Shadowsocks，由于 V2Ray 是使用 GO 语言所撰写的，天生的平台部署优势，下载即可使用 流程总结一下此文章的大致流程，此 V2Ray 教程可百分百帮助你搭建 V2Ray 使用。哪怕你只是一个小白。 购买一个 VPS想要搭建 V2Ray，就必须要拥有一台 VPS。 获取 VPS 信息我们必须要知道 VPS IP 地址，root 用户密码，SSH 端口 安装 SSH工具要登录 VPS，当然需要 SSH 客户端 登录 VPS使用 SSH 配置 VPS SSH 信息，然后登录 安装 V2Ray安装过程你可以随意选择你喜欢的传输协议或者配置 Shadowsocks V2Ray 安装完成此时你可以使用客户端配置 V2Ray 使用了 购买一个VPS想要搭建 V2Ray， 拥有一个 VPS 是必需的。 这个嘛…为了避免广告嫌疑，自己看着买 哪个套餐好？一般来说，推荐购买 香港线路 或 CN2 GIA 线路，或者哪个便宜选择那个，说着当然如果你使用量比较多或者想要分享给同学和朋友一起用的话，选择合适的套餐即可。又或者你土豪的话，选择最贵的也行。 VPS 速度：香港线路 &gt; CN2 GIA 线路 &gt; CN2 线路 &gt; 普通线路 香港套餐 VPS 的速度最快。 如果你非常在乎速度的话，建议购买香港线路的 VPS，当然，但价格贵，流量相对其他套餐来说也是比较少的……退一步的选择是 CN2 GIA 线路，这个线路的速度也比较好。 线路是比较重要的，像香港和 CN2 GIA 线路到晚上一般不会怎么炸，其他的到了晚上可能会出现很慢慢的感觉。 自己看情况买吧，嘿嘿~ 获取 VPS 信息这个一般在后台或者购买时发送给你的邮件里有 安装 SSH工具这个工具是用来连接VPS的 PC端 XShell： https://www.netsarang.com/zh/xshell/ FinalShell（我用的这个） http://www.hostbuf.com/ 手机端 安卓： JuiceSSH https://huangenet.lanzous.com/iguAEjlekmb iOS： Termius https://apps.apple.com/cn/app/termius-ssh-client/id549039908 登录 VPS这里以XShell为例： 在桌面找到 Xshell ，打开它，新建一个会话。 主机写上你的 VPS IP 地址，端口写上 SSH 端口。 之后点击 用户身份验证，用户名：root，密码：你的 root 密码。然后点击确定 之后选择连接。 然后会提示SSH安全警告，选择，接受并保存。 这是登录成功后的界面 其他的软件基本差不多的连接步骤 安装 V2Ray一键脚本这边推荐三个一键脚本，都是经过本人亲自测试过的，如果你是 CentOS 系统需要**关闭防火墙或者放行相关端口** 123# Centos关闭防火墙systemctl stop firewalld.servicesystemctl disable firewalld.service 如果提示 curl: command not found ，那是因为你的 VPS 没装 curl，安装命令： 1234# CentOS：yum update -y &amp;&amp; yum install curl -y# Debian/Ubuntu：apt-get update -y &amp;&amp; apt-get install curl -y 1. 233boy 一键脚本Github地址：https://github.com/233boy/v2ray/wiki 233boy 的 V2Ray 搭建脚本貌似有 BUG 用户无法自定义端口，不过依然能够正常安装使用，支持单用户及多种协议，非常推荐 12# CentOS 7 、Debian 8 、Ubuntu 16 ，Debian 9（推荐）bash &lt;(curl -s -L https://git.io/v2ray.sh) 2. v2-ui 一键脚本GitHub 地址：https://github.com/sprov065/v2-ui支持多协议多用户的一键安装脚本，带有 WEB管理面板，详见作者 GitHub 1bash &lt;(curl -Ls https://blog.sprov.xyz/v2-ui.sh) 3. multi-v2ray 一键脚本GitHub 地址：https://github.com/Jrohy/multi-v2ray这是个脚本作者一直在维护，支持多用户及多种协议（详见作者 GitHub ）和 Docker 部署，不过个人觉得还是 233boy 版的好用 12# 安装中文版source &lt;(curl -sL https://multi.netlify.com/v2ray.sh) --zh 安装方法看各自的使用说明，基本上都是“傻瓜式”安装 其他说明V2Ray 时间要求VPS 服务器时间与 V2Ray 客户端所在设备时间，两者最好保持一致，不要误差太大。这是 V2Ray 自身要求，与脚本无关。SSH 连接服务器，输入 date 命令，可以查看服务器时间。 如果时间不对，这样操作 软件时间： 查看方式 date，是是距离1970.1.1的时间差； 硬件时间： sudo hwclock -r，硬件时间是BIOS的时间。 ​ -w : 将软件时间写入到硬件时间； ​ -r : 读取硬件时间。 查看并同步软件时间和硬件时间： 12执行命令： sudo hwclock -w; hwclock -r ; date或者 sudo hwclock --systohc V2Ray 协议说明1234没啥需求就用 TCP追求更加安全就用 WS + TLSISP 多作怪用动态端口VPS 网络不好就用 mKCP v2ray配置成功，客户端连接不上报错context deadline exceeded,必须关闭防火墙（或者开启对应v2ray端口和ss端口） 123456systemctl status firewalld.service #查看防火墙状态systemctl stop firewalld.service #执行停止运行防火墙命令systemctl disable firewalld.service #禁止防火墙自启动防火墙其他命令systemctl start firewalld.service #启动systemctl enable firewalld.service #开机启动 V2ray客户端的使用 Windows客户端下载地址： 客户端 下载地址 V2RayN（荐） https://github.com/2dust/v2rayN/releases Clash https://github.com/Fndroid/clash_for_windows_pkg/releases Mellow https://github.com/mellow-io/mellow/releases Qv2ray https://github.com/Qv2ray/Qv2ray/releases Mac客户端下载地址： 客户端 下载地址 V2RayU（荐） https://github.com/yanue/V2rayU/releases ClashX https://github.com/yichengchen/clashX/releases Mellow https://github.com/mellow-io/mellow/release Qv2ray https://github.com/Qv2ray/Qv2ray/releases Linux客户端下载地址： 客户端 下载地址 Qv2ray https://github.com/Qv2ray/Qv2ray/releases Mellow https://github.com/mellow-io/mellow/releases V2rayL https://github.com/jiangxufeng/v2rayL/releases 安卓客户端下载地址： 客户端 下载地址 V2RayNG（荐） https://github.com/2dust/v2rayNG/releases Kitsunebi https://apkpure.com/kitsunebi/fun.kitsunebi.kitsunebi4android BifrostV https://apkpure.com/bifrostv/com.github.dawndiy.bifrostv iOS客户端客户端下载地址：IOS目前没有发现免费的客户端，付费的有：Shadowrocket、pepi、i2Ray、Kitsunebi 和 Quantumult，需要去美区商店下载。 使用方法：Windows 客户端下载 V2RayN下载链接： https://github.com/2dust/v2rayN/releases/latest 然后选择 v2rayN-Core.zip 下载下载好了之后，解压，然后打开解压的文件夹目录结构大概如下图所示 获取 V2Ray 客户端配置SSH 登录你的 VPS （如果你没登录）输入 v2ray url 然后复制 vmess 链接 （将链接全选，然后鼠标右键，再选择复制即可） 配置 V2RayN双击 v2rayN.exe 启动，然后在任务栏托盘找到 V2RayN 图标并双击它添加一个 VMess 服务器 从剪贴板导入 URL 重要提醒！由于 V2RayN 暂不支持 QUIC 协议，如果是 QUIC 协议，就算导入了，也是不能正常使用的。 设置本地监听端口，此处我将它设置为 2333 启用系统代理在任务栏托盘找到 V2RayN 图标并鼠标右键，然后选择 启动系统代理并且设置 系统代理模式 》PAC 模式之后在 V2RayN 主界面，找到 检查更新 》检查更新 PAC 测试一下在完成上面的步骤的时候，正常来说，你已经处于翻出去的状态了OK，此时你已经自由了，赶紧打开 Google 找部十八减的大电影喵喵吧。哈哈 MAC 平台下载 V2RayX下载链接： https://github.com/insisttech/v2rayX-copy/releases选择 V2RayX.app.zip 下载，下载好了之后 ，解压，将 V2RayX.app 复制到 程序 文件夹。 获取 V2Ray 客户端配置使用终端进行 SSH 登录你的 VPS。输入v2ray info 回车，你会得到 V2Ray 客户端配置 打开 V2RayX第一次打开时会出现需要安全认证的信息，此时你需要点完所有系统弹出的窗口里的是，打开，确认等选项，然后打开系统偏好设置里的安全性与隐私，你就会看见灰色的一条，大概意思为 “V2RayX，未被安全认证，是否打开”，后面有一个仍要打开的选项，点开就好。然后你就会在状态栏看到 V2RayX 图标 这个时候你点击它就可以看到如下界面： 然后进行如下操作： 1.进行相关配置 一般的 tcp 只需按照配置在上述界面进行配置，如果有其他需求，点击高级设置选项，再进行配置。 每一个配置界面都很简单，都是简单的单词。如果你需要 WS + TLS 的话 需要在 WS 和 TLS 界面里的框钩上就行。（有几个钩几个，文本框可以为空，如果你什么都知道的话）配置好后点击 OK 会出现如下界面 点击 yes 就好。回到最初的设置界面后也是点击 OK 就完成了配置工作。 2.选择模式。自带全局和 PAC 。推荐全局配置，如果想自己更改 PAC 规则的话，菜单界面有编辑的选项可以进行更改。 3.Start V2Ray. 开启你的新世界。开启 V2RayX 后系统也就开启了代理，无需再去配置浏览器之类的。 登录后自动运行如果有需求加入开机自启的话可以进行如下操作：打开 macOS 系统设置 -&gt; 用户与组 -&gt; 登录项，把 V2RayX.app 添加到列表中。 手动更新内核在访达（Finder）的应用程序一栏，找到 V2RayX.app，右键选择显示包内容，去Contents/Resources/v2ray 目录下替换从 v2ray-core repo 下载的对应版本的内核内容。但不保证应用的兼容性。 后记在使用过程中如果有问题，是软件使用的问题，要去 V2RayX 的 Github 上提issues。目前版本在 TLS 的使用上有一小点问题，但不影响使用。本软件开发者不是计算机专业也不是软件工程师，目前还在忙于研究生课程中，所以在更新和修改方面可能会有些慢。所以不要抱怨这个软件功能较少，基本功能可以用就好。:) 安卓下载 V2RayNG在 Google Play 下载： V2RayNG 并安装或者在 Github 下载 ： V2RayNG 并安装，备注，选择 app-universal-release.apk 下载 获取 V2Ray 客户端配置SSH 登录你的 VPS （如果你没登录）输入 v2ray qr 便会得到一个链接，然后打开链接 配置 V2RayNG打开 V2RayNG如果有出现一个默认的配置，先将默认的配置删除掉，点击右边的编辑图标，然后在弹出的配置窗口，再点击右上角的删除图标，将它删除。回到主界面，点击右上角的 “+” 加号，选择 扫描二维码，(哪里有二维码扫描？我擦，在上面的 [获取 V2Ray 客户端配置] 那里不是叫你打开一个链接了吗)OK，扫描成功点击右上角的菜单 (就是那三个点啊)，选择 设置，将 路由 修改为 绕过大陆地址，之后返回主界面点击右下角的小灰机图标，然后会有一个提示，确定它。Okay，搞定。此时你可以翻墙了，就是那么简单。此时你已经自由了，赶紧打开 Google 找部十八减的大电影喵喵吧。哈哈 结束其实写这个教程有点多余啦，软件之类的都那么简单明了，是个正常人都会配置在 V2RayNG 设置里面还有一个 分应用代理，这个东东就是说，想要说指定相关的程序走代理，如果不设置这个，默认情况下就是所有的程序都走代理那个 MUX 多路复用，一般情况下不建议打开在安卓上，还有一个可能比较好用的 V2Ray 的客户端叫 BifrostV ，如果你觉得 V2RayNG 用着不顺手的话，可以试试看用它的 iOSkitsunebi目前对 V2Ray 支持最完全的应用，支持所有 vmess 链接使用方案，国区有售，支持 TestFlight。kitsunebi 的 testflight 自动申请页面：https://docs.google.com/forms/d/1-1ZuYA1qkyDfAn6qzUzNEV3YVZbgr__7b6aFBiKeNHc/closedform 备注一下：kitsunebi 如果搜索不到，请使用 Kitsunebi Lite如何使用1，扫码导入服务器配置 ( 推荐 )，在小鸡上输入 v2ray qr 将会得到扫码链接，打开扫码即可。 支持自动导入一键脚本以及由 V2rayN 生成的二维码，需手动输入 AlterId。 2，手动填写服务器配置点击右上 “+” 号导入新服务器，根据服务端配置填写。 备注：如果你使用 WS+TLS 方式，记得要配置好路径。 Shadowrocket泛用性极高的代理软件，俗称小火箭。除 vmess 外也支持 ss、ssR、socks5、HTTP、Lua 等类型。缺点是不支持 Vmess KCP，国区无售。 如何使用：1，手动填写服务器配置 ( 推荐 )shadowrocket 不支持扫入一键脚 本或 V2rayN 生成的二维码。如何填写以及注意事项见以下。如果你是使用 TCP 协议的，混淆记得选择 none 备注：如果你使用 WS+TLS 方式，记得要配置好 WS 的路径。 2，扫码导入服务器配置 ( 不推荐 )正如之前所说，shadowrocket 不支持扫入一键脚本或 V2rayN 生成的二维码，只能扫入 shadowrocket 导出的 vmess 服务器设置，所以这种导入方式没有泛用性。 Pepi ( 原 ShadowRay )由 shadowrocket 同作者开发的针对 vmess 的应用。缺点是只能从状态球的颜色判断服务器状态，同样不支持 Vmess KCP，国区无售，设置类 shadowrocket，如果已经拥有了小火箭，不建议重复购买。 如何使用：手动填写服务器配置进入 Servers 页面，点击右上 “+” 号导入新服务器，根据服务端配置填写。 结束iOS 上的 V2Ray 客户端相的配置对来说会比较麻烦一些，其实自己注意一下一些选项就行。 Linux能耍 Linux 的都是大佬了，我懒得写。 好了就这些 请勿违反国家法律法规，否则后果自负！ 低调低调低调。文章参考：centos搭建v2ray https://blog.ziyiu.com/2020/06/05/Centos%E6%9C%8D%E5%8A%A1%E5%99%A8/centos%E6%90%AD%E5%BB%BAv2ray/ V2Ray搭建详细图文教程 https://github.com/233boy/v2ray/wiki/V2Ray%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B V2Ray一键安装脚本 支持多用户管理以及多种协议 https://m1314.cn/341.html V2Ray 各平台客户端使用教程 - V2Ray 教程 https://233v2.com/post/4/","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"V2ray","slug":"V2ray","permalink":"https://blog.quickso.cn/tags/V2ray/"},{"name":"科学上网","slug":"科学上网","permalink":"https://blog.quickso.cn/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"}]},{"title":"VPS服务器性能测试脚本","slug":"VPS服务器性能测试脚本","date":"2021-02-19T01:16:07.000Z","updated":"2021-02-19T15:53:30.557Z","comments":true,"path":"2021/02/19/VPS服务器性能测试脚本/","link":"","permalink":"https://blog.quickso.cn/2021/02/19/VPS%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/","excerpt":"","text":"本脚本雨落大佬写的，将秋水的Bench.sh和Oldking的SuperBench结合了，然后加入Ping以及路由测试功能，可以详细的测试出服务器系统信息，下载速度，到国内的带宽，Ping值等等，还可以生成html网页进行查看，很不错。 使用Github地址：https://github.com/FunctionClub/ZBench 如果中文版出现乱码等情况，请换成英文版。 12345#中文版：wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/ZBench/master/ZBench-CN.sh &amp;&amp; bash ZBench-CN.sh#英文版：wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/ZBench/master/ZBench.sh &amp;&amp; bash ZBench 截图演示","categories":[{"name":"代码","slug":"代码","permalink":"https://blog.quickso.cn/categories/%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Vps","slug":"Vps","permalink":"https://blog.quickso.cn/tags/Vps/"},{"name":"Linux","slug":"Linux","permalink":"https://blog.quickso.cn/tags/Linux/"}]},{"title":"一款带Web面板的轻量级、高性能内网穿透工具：nps使用教程","slug":"一款带Web面板的轻量级、高性能内网穿透工具：nps使用教程","date":"2021-02-19T01:07:23.000Z","updated":"2021-02-19T15:40:54.993Z","comments":true,"path":"2021/02/19/一款带Web面板的轻量级、高性能内网穿透工具：nps使用教程/","link":"","permalink":"https://blog.quickso.cn/2021/02/19/%E4%B8%80%E6%AC%BE%E5%B8%A6Web%E9%9D%A2%E6%9D%BF%E7%9A%84%E8%BD%BB%E9%87%8F%E7%BA%A7%E3%80%81%E9%AB%98%E6%80%A7%E8%83%BD%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%B7%A5%E5%85%B7%EF%BC%9Anps%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/","excerpt":"","text":"内网穿透工具有不少了，比如Frp、lanproxy、Holer等，现在再介绍个带Web面板的穿透工具nps，之前叫easyProxy，只是改名了而已，该工具是一款使用go语言编写的轻量级、功能强大的内网穿透服务器。支持tcp、udp流量转发，支持内网http、socks5代理，同时支持snappy压缩(节省带宽和流量)、站点保护、加密传输、多路复用、header修改等。同时还支持web图形化管理。 安装Github地址：https://github.com/cnlh/nps 通常内网穿透工具都有服务端和客户端，安装要求如下： 服务端：需要安装在一个有公网IP的服务器上，系统为Linux/Windows/Mac均可。客户端：一般安装在一个内网的VPS服务器或Windows/Mac电脑上使用。 1、编译安装提示：编译安装主要讲的Linux系统，其它系统(Win/Mac，也包括Linux)建议直接使用作者编译好的文件即可。安装Go语言： 12345678910111213#Debian/Ubuntu系统apt-get -y install golang#创建目录并定义GOPATH环境变量指向该目录mkdir ~/workspaceecho &#x27;export GOPATH=&quot;$HOME/workspace&quot;&#x27; &gt;&gt; ~/.bashrcsource ~/.bashrc#CentOS/RHEL系统yum -y install golang#创建目录并定义GOPATH环境变量指向该目录。mkdir ~/workspaceecho &#x27;export GOPATH=&quot;$HOME/workspace&quot;&#x27; &gt;&gt; ~/.bashrcsource ~/.bashrc 安装git： 12345#Debian/Ubuntu系统apt-get -y install git#CentOS/RHEL系统yum -y install git 安装源码： 1go get github.com/cnlh/nps 编译服务端和客户端： 123456#进入指定目录cd ~/workspace/src/github.com/cnlh/nps#编译服务端go build cmd/nps/nps.go#编译客户端go build cmd/npc/npc.go 编译好了后，就会在当前目录生成npc或nps二进制文件了，就可以直接拿来用了。 编译的时候可能出现的问题解决方法： 12345678#只拿一种常见的错误做例子，有时候可能会出现很多种这样的提示lib/kcp/crypt.go:14:2: cannot find package &quot;golang.org/x/crypto/pbkdf2&quot; in any of: /usr/lib/go-1.7/src/golang.org/x/crypto/pbkdf2 (from $GOROOT) /root/workspace/src/golang.org/x/crypto/pbkdf2 (from $GOPATH)#意思是缺少这种包，然后记住提示的地址，比如上面的golang.org/x/crypto/pbkdf2，有时候也会提示的github地址。然后再使用命令go get golang.org/x/crypto/pbkdf2命令安装一下就行了。 2、直接安装除了自己编译外，作者也直接提供了编译好的文件给你使用，文件下载地址：点击进去，然后再根据自己的系统架构下载对应的最新版服务端和客户端。 如果对于Linux服务器还是不知道怎么选择的，这里拿Vultr、搬瓦工大多数VPS为例。先使用命令getconf LONG_BIT获取系统版本，32位就选386，64就选amd64，具体还是以实际情况为准。 服务端使用这里博主使用的是Vultr Linux x64服务器，直接使用命令： 1234567#记得复制前先将下面链接替换成当前最新版地址cd ~#下载并解压服务端wget https://github.com/cnlh/nps/releases/download/v0.0.14/linux_amd64_server.tar.gz &amp;&amp; tar zxvf linux_amd64_server.tar.gz#编辑配置文件cd npsnano conf/nps.conf 配置文件参数如下： 123456789101112131415161718#web管理端口httpport#web界面管理密码password#服务端客户端通信端口bridePort#ssl certFile绝对路径pemPath#ssl keyFile绝对路径keyPath#域名代理https代理监听端口httpsProxyPort#域名代理http代理监听端口httpProxyPort#web api免验证IP地址authip#客户端与服务端连接方式kcp或tcpbridgeType 然后启动服务端： 1234./nps start#重启/停止服务端./nps stop|restart 然后打开地址http://ip:8080访问管理界面，具体端口以自己修改的为准，再使用密码登录进去，默认为123。 123456789#如果打不开Web界面，就需要开启防火墙，一般CentOS系统出现情况最多#Centos 6系统iptables -I INPUT -p tcp --dport 8080 -j ACCEPTservice iptables saveservice iptables restart#CentOS 7系统firewall-cmd --zone=public --add-port=8080/tcp --permanent firewall-cmd --reload 对于有些服务器，比如阿里云，谷歌云等，还需要在服务器管理面板上开放Web端口才行。 客户端使用1、Linux系统1234#比如下载的客户端文件在根目录，先进入根目录cd ~#启动客户端，比如服务端公网IP为1.1.1.1，服务端配置文件中tcpport为8284./npc -server=1.1.1.1:8284 -vkey=客户端的密钥 2、Windows系统首先按住Win+R，输入cmd进入命令窗口，然后使用命令： 1234#比如下载的客户端文件在D盘，先进入到D盘cd /d d:#启动客户端，比如服务端公网IP为1.1.1.1，服务端配置文件中tcpport为8284npc.exe -server=1.1.1.1:8284 -vkey=客户端的密钥 至于Mac系统启动参考上面就行。 使用场景关于使用场景，Github文档写的很清楚了，这里大概的说下 1、tcp隧道模式适用：想在外网通过ssh连接内网的机器，做云服务器到内网服务器端口的映射，或者做微信公众号开发、小程序开发等。 2、udp隧道模式适用：在非内网环境下使用内网dns，或者需要通过udp访问内网机器等。 3、http代理模式适用：在外网使用HTTP代理访问内网站点。 4、socks5代理模式适用：搭建一个内网穿透55，在外网如同使用内网v皮n一样访问内网资源或者设备。 相关功能1、数据压缩支持由于是内网穿透，内网客户端与服务端之间的隧道存在大量的数据交换，为节省流量，加快传输速度，由此本程序支持SNNAPY形式的压缩。 所有模式均支持数据压缩，可以与加密同时使用开启此功能会增加cpu和内存消耗在server端加上参数-compress=snappy(或在web管理中设置) 2、加密传输如果公司内网防火墙对外网访问进行了流量识别与屏蔽，例如禁止了ssh协议等，通过设置配置文件，将服务端与客户端之间的通信内容加密传输，将会有效防止流量被拦截。 开启此功能会增加cpu和内存消耗在server端加上参数-crypt=true(或在web管理中设置) 3、站点保护域名代理模式所有客户端共用一个http服务端口，在知道域名后任何人都可访问，一些开发或者测试环境需要保密，所以可以设置用户名和密码，nps将通过Http Basic Auth来保护，访问时需要输入正确的用户名和密码。 web管理中可配置 4、host修改由于内网站点需要的host可能与公网域名不一致，域名代理支持host修改功能，即修改request的header中的host字段。 在web管理中设置 5、自定义header支持对header进行新增或者修改，以配合服务的需要。 6、404页面配置支持域名解析模式的自定义404页面，修改/web/static/page/error.html中内容即可，暂不支持静态文件等内容。 7、流量限制支持客户端级流量限制，当该客户端入口流量与出口流量达到设定的总量后会拒绝服务，域名代理会返回404页面，其他会拒绝连接。 8、带宽限制支持客户端级带宽限制，带宽计算方式为入口和出口总和，权重均衡。 9、负载均衡本代理支持域名解析模式的负载均衡，在web域名添加或者编辑中内网目标分行填写多个目标即可实现轮训级别的负载均衡。 10、守护进程本代理支持守护进程，使用示例如下，服务端客户端所有模式通用，支持linux、darwin、windows。 12./(nps|npc) start|stop|restart|status 若有其他参数可加其他参数(nps|npc).exe start|stop|restart|status 若有其他参数可加其他参数 11、KCP协议支持KCP是一个快速可靠协议，能以比TCP浪费10%-20%的带宽的代价，换取平均延迟降低30%-40%，在弱网环境下对性能能有一定的提升。可在app.conf中修改bridgeType为kcp。 当服务端为kcp时，客户端连接时也需要加上参数-type=kcp。 该工具很强大，更多的使用可以自行研究","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"内网穿透","slug":"内网穿透","permalink":"https://blog.quickso.cn/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"}]},{"title":"MarkDown简单用法","slug":"MarkDown简单用法","date":"2021-02-18T13:01:23.000Z","updated":"2021-02-19T15:40:08.529Z","comments":true,"path":"2021/02/18/MarkDown简单用法/","link":"","permalink":"https://blog.quickso.cn/2021/02/18/MarkDown%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/","excerpt":"","text":"Markdown 是一种轻量级标记语言，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。 1.常用语法 标题1~4个#加上空格，代表4个字号的标题 高亮强调：就是两个反引号把内容括起来 `` 引用符号： &gt; 用来突出内容 字体加粗 ： 1**字体加粗** 字体斜体： 1*字体斜体*： 菜单：菜单用-、+、*加空格都可以 链接： 格式：[标签名字]（链接地址） 百度 1[百度](https://www.baidu.com) 网址： 常规样式：https://www.jianshu.com/u/97ee21e3f77f 超链接样式： https://www.jianshu.com/u/97ee21e3f77f 1&lt;https://www.jianshu.com/u/97ee21e3f77f&gt; 插入图片 例： 代码 12![描述](图片地址)#例如： ![blog头像图片](../images/blog.jpg) 分割线： 12// 就是3个星号*** 或者用html标签&lt;hr&gt; 视频： 123&lt;video id=&quot;video&quot; controls=&quot;&quot; preload=&quot;none&quot; poster=&quot;https://i.loli.net/2020/01/09/n9bcw14OXN82lMD.png&quot;&gt; &lt;source id=&quot;mp4&quot; src=&quot;https://video.pearvideo.com/mp4/third/20200109/cont-1640431-10042874-102056-hd.mp4&quot; type=&quot;video/mp4&quot;&gt;&lt;/video&gt; 音频： 123&lt;audio id=&quot;audio&quot; controls=&quot;&quot; preload=&quot;none&quot;&gt; &lt;source id=&quot;mp3&quot; src=&quot;http://qiniu.cloud.fandong.me/Music_iP%E8%B5%B5%E9%9C%B2%20-%20%E7%A6%BB%E6%AD%8C%20%28Live%29.mp3&quot;&gt;&lt;/audio&gt; 2.代码块以Python为例 1234# 示例 ```pythonimport osprint(&#x27;python 代码块？&#x27;)# OC和html同理：ObjectiveC、html 3.表格:12345| 左对齐 | 居中 | 右对齐 || ------ | :---: | -----: || 香蕉 | $1 | 5 || 苹果 | $1 | 6 || 草莓 | $1 | 7 | 左对齐 居中 右对齐 香蕉 $1 5 苹果 $1 6 草莓 $1 7 4.锚点可以利用html的a标签，进行锚点跳转，例：A、B互跳 锚点A 锚点B 12&lt;a id=&quot;text&quot; href=&quot;#sssss&quot;&gt;锚点A&lt;/a&gt;&lt;a id=&quot;sssss&quot; href=&quot;#text&quot;&gt;锚点B&lt;/a&gt; 4.快捷键 字体加粗 ：conmmond + b 字体斜体：conmmond + i 标题VSCode快捷键变大： shift + ctrl + [缩小： shift + ctrl + ]","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"MarkDown","slug":"MarkDown","permalink":"https://blog.quickso.cn/tags/MarkDown/"}]},{"title":"Github-jsDelivr-PicGo的图床方案","slug":"Github-jsDelivr-PicGo的图床方案","date":"2021-02-18T12:21:46.000Z","updated":"2021-02-19T15:53:08.654Z","comments":true,"path":"2021/02/18/Github-jsDelivr-PicGo的图床方案/","link":"","permalink":"https://blog.quickso.cn/2021/02/18/Github-jsDelivr-PicGo%E7%9A%84%E5%9B%BE%E5%BA%8A%E6%96%B9%E6%A1%88/","excerpt":"","text":"使用Github+jsDelivr+PicGo的图床方案最近一直在寻找好用的图床，SM.MS的速度越来越堪忧，其他的就怕跑路，所以就看上了Github，但由于G站在国内一直处于半墙的状态，所以就用CDN加速，再通过PicGO一键上传，且GitHub的空间完全够个人博客的使用。CDN:内容分发网络（英语：Content Delivery Network或Content Distribution Network，缩写：CDN）是指一种透过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、视频、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。 新建一个仓库注意要勾选Public，进行公开 获取Token生成Token 在主页选择Settings-Developer settings-Personal access tokens-Generate new token，填写好描述，勾选repo，然后点击Generate token生成Token，复制好，待会需要填入PicGo。 下载PicGoPicGo项目地址 配置PicGo 第一项：填写好自己的仓库名 第二项：填写默认master 第三项：填写刚刚生成过的token 第四项：填写你想储存的路径，不填则是根目录 第五项：https://cdn.jsdelivr.net/gh/用户名/图床仓库名/图片路径 来加速图片 最后可以直接通过拖拽图片进行上传啦","categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://blog.quickso.cn/tags/Github/"},{"name":"jsDelivr","slug":"jsDelivr","permalink":"https://blog.quickso.cn/tags/jsDelivr/"},{"name":"PicGo","slug":"PicGo","permalink":"https://blog.quickso.cn/tags/PicGo/"}]}],"categories":[{"name":"教程","slug":"教程","permalink":"https://blog.quickso.cn/categories/%E6%95%99%E7%A8%8B/"},{"name":"代码","slug":"代码","permalink":"https://blog.quickso.cn/categories/%E4%BB%A3%E7%A0%81/"},{"name":"工具","slug":"工具","permalink":"https://blog.quickso.cn/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Nexus9","slug":"Nexus9","permalink":"https://blog.quickso.cn/tags/Nexus9/"},{"name":"玩客云","slug":"玩客云","permalink":"https://blog.quickso.cn/tags/%E7%8E%A9%E5%AE%A2%E4%BA%91/"},{"name":"树莓派","slug":"树莓派","permalink":"https://blog.quickso.cn/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"},{"name":"FFmpeg","slug":"FFmpeg","permalink":"https://blog.quickso.cn/tags/FFmpeg/"},{"name":"VsCode","slug":"VsCode","permalink":"https://blog.quickso.cn/tags/VsCode/"},{"name":"Google","slug":"Google","permalink":"https://blog.quickso.cn/tags/Google/"},{"name":"宝塔","slug":"宝塔","permalink":"https://blog.quickso.cn/tags/%E5%AE%9D%E5%A1%94/"},{"name":"小米","slug":"小米","permalink":"https://blog.quickso.cn/tags/%E5%B0%8F%E7%B1%B3/"},{"name":"路由器","slug":"路由器","permalink":"https://blog.quickso.cn/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"},{"name":"Openwrt","slug":"Openwrt","permalink":"https://blog.quickso.cn/tags/Openwrt/"},{"name":"Nginx","slug":"Nginx","permalink":"https://blog.quickso.cn/tags/Nginx/"},{"name":"PHP","slug":"PHP","permalink":"https://blog.quickso.cn/tags/PHP/"},{"name":"MySQL","slug":"MySQL","permalink":"https://blog.quickso.cn/tags/MySQL/"},{"name":"PhpMyAdmin","slug":"PhpMyAdmin","permalink":"https://blog.quickso.cn/tags/PhpMyAdmin/"},{"name":"ffmpeg","slug":"ffmpeg","permalink":"https://blog.quickso.cn/tags/ffmpeg/"},{"name":"阿里云盘","slug":"阿里云盘","permalink":"https://blog.quickso.cn/tags/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98/"},{"name":"OneManager","slug":"OneManager","permalink":"https://blog.quickso.cn/tags/OneManager/"},{"name":"Python","slug":"Python","permalink":"https://blog.quickso.cn/tags/Python/"},{"name":"Giwifi","slug":"Giwifi","permalink":"https://blog.quickso.cn/tags/Giwifi/"},{"name":"ShadowsocksR","slug":"ShadowsocksR","permalink":"https://blog.quickso.cn/tags/ShadowsocksR/"},{"name":"科学上网","slug":"科学上网","permalink":"https://blog.quickso.cn/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"},{"name":"Java","slug":"Java","permalink":"https://blog.quickso.cn/tags/Java/"},{"name":"开发环境","slug":"开发环境","permalink":"https://blog.quickso.cn/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"name":"301","slug":"301","permalink":"https://blog.quickso.cn/tags/301/"},{"name":"Cloudflare","slug":"Cloudflare","permalink":"https://blog.quickso.cn/tags/Cloudflare/"},{"name":"Docker","slug":"Docker","permalink":"https://blog.quickso.cn/tags/Docker/"},{"name":"网盘","slug":"网盘","permalink":"https://blog.quickso.cn/tags/%E7%BD%91%E7%9B%98/"},{"name":"白嫖","slug":"白嫖","permalink":"https://blog.quickso.cn/tags/%E7%99%BD%E5%AB%96/"},{"name":"C","slug":"C","permalink":"https://blog.quickso.cn/tags/C/"},{"name":"C++","slug":"C","permalink":"https://blog.quickso.cn/tags/C/"},{"name":"Hexo","slug":"Hexo","permalink":"https://blog.quickso.cn/tags/Hexo/"},{"name":"博客","slug":"博客","permalink":"https://blog.quickso.cn/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"Linux","slug":"Linux","permalink":"https://blog.quickso.cn/tags/Linux/"},{"name":"N1","slug":"N1","permalink":"https://blog.quickso.cn/tags/N1/"},{"name":"Armbian","slug":"Armbian","permalink":"https://blog.quickso.cn/tags/Armbian/"},{"name":"OpenMediaVault","slug":"OpenMediaVault","permalink":"https://blog.quickso.cn/tags/OpenMediaVault/"},{"name":"内网穿透","slug":"内网穿透","permalink":"https://blog.quickso.cn/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"},{"name":"免费","slug":"免费","permalink":"https://blog.quickso.cn/tags/%E5%85%8D%E8%B4%B9/"},{"name":"VPS","slug":"VPS","permalink":"https://blog.quickso.cn/tags/VPS/"},{"name":"服务器","slug":"服务器","permalink":"https://blog.quickso.cn/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"虚拟主机","slug":"虚拟主机","permalink":"https://blog.quickso.cn/tags/%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA/"},{"name":"虚拟空间","slug":"虚拟空间","permalink":"https://blog.quickso.cn/tags/%E8%99%9A%E6%8B%9F%E7%A9%BA%E9%97%B4/"},{"name":"QuickLinks","slug":"QuickLinks","permalink":"https://blog.quickso.cn/tags/QuickLinks/"},{"name":"快链","slug":"快链","permalink":"https://blog.quickso.cn/tags/%E5%BF%AB%E9%93%BE/"},{"name":"CloudFlare","slug":"CloudFlare","permalink":"https://blog.quickso.cn/tags/CloudFlare/"},{"name":"JSProxy","slug":"JSProxy","permalink":"https://blog.quickso.cn/tags/JSProxy/"},{"name":"Git","slug":"Git","permalink":"https://blog.quickso.cn/tags/Git/"},{"name":"V2ray","slug":"V2ray","permalink":"https://blog.quickso.cn/tags/V2ray/"},{"name":"Vps","slug":"Vps","permalink":"https://blog.quickso.cn/tags/Vps/"},{"name":"MarkDown","slug":"MarkDown","permalink":"https://blog.quickso.cn/tags/MarkDown/"},{"name":"Github","slug":"Github","permalink":"https://blog.quickso.cn/tags/Github/"},{"name":"jsDelivr","slug":"jsDelivr","permalink":"https://blog.quickso.cn/tags/jsDelivr/"},{"name":"PicGo","slug":"PicGo","permalink":"https://blog.quickso.cn/tags/PicGo/"}]}